{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js/fileUploader.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","$","FileUploader","jQuery","$el","options","self","this","_defaults","lang","useFileIcons","debug","debugLogStyle","name","undefined","pluginName","useLoadingBars","loadingBarsClasses","reloadedFilesClass","resultContainerClass","resultFileContainerClass","resultPrefix","resultInputNames","defaultFileExt","defaultMimeType","fileMaxSize","totalMaxSize","reloadArray","reloadHTML","linkButtonContent","deleteButtonContent","allowDuplicates","duplicatesWarning","HTMLTemplate","join","onload","onfileloadStart","onfileloadEnd","onfileDelete","filenameTest","langs","en","intro_msg","dropZone_msg","maxSizeExceeded_msg","totalMaxSizeExceeded_msg","duplicated_msg","name_placeHolder","_options","extend","_round","value","Math","round","get","parameter","currentTotalSize","_logger","message","level","data","console","log","_fileType","fileName","ext","substring","lastIndexOf","indexOf","_fileDelete","event","element","index","target","closest","prev","remove","fileSize","$resultContainer","find","val","availableSize","availableLabel","children","html","addClass","_fileRename","$this","text","$input","nameTest","$fileThumbsContainer","preventDefault","setSelectionRange","start","stop","getData","each","file","title","push","_createUploaderContainer","fileExt","currentThumb","append","container","parseInt","fileButtonsContainer","seeFileLink","deleteBtn","click","classes","currentLoadBar","prepend","currentTitle","currentExtension","on","selectionStart","selectionEnd","_createResultContainer","fileData","resultElemContainer","attr","type","result","size","_filesRead","filesList","DOM","approvedList","files","dataTransfer","loadedFiles","newFiles","first","forEach","newFile","readFile","reader","currentElement","filter","onloadstart","onprogress","lengthComputable","percentLoaded","loaded","total","animate","width","onloadend","totalUploaded","resultObject","readAsDataURL","currentAvailableSize","errorMsg","currentLangObj","empty","setTimeout","opacity","totalRejected","$fileContainer","removeClass","$fileNameContainer","startIndex","last","appendMessage","$message","FileReader","$info","globalIndex","template","$loadBtn","dropZone","insertBefore","loadedFile","substr","css","parseFloat","addEventListener","stopPropagation","dropEffect","handleDrop","trigger","change","fn","fileUploader","methodOrOptions","method","fileUploaders","args","arguments","Array","prototype","slice","results","warn","info","apply","_typeof"],"mappings":"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","file":"fileUploader.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/*\n* fileUploader v3.7.3\n* Licensed under MIT (https://raw.githubusercontent.com/Cerealkillerway/fileUploader/master/license.txt)\n*/\n(function($) {\n    var FileUploader = function($el, options) {\n        var self = this;\n\n        // default options\n        this._defaults = {\n            lang: 'en',\n            useFileIcons: true,\n\n            debug: false,                                                  // activate console logs for debug\n            debugLogStyle: 'color: #9900ff',                               // css style for debug console logs in js console\n            name: undefined,                                               // a name for plugin's instance (useful for debug purposes)\n            pluginName: 'FileUploader',                                    // plugin's name (used in debug logs alongside with name)\n\n            useLoadingBars: true,                                          // insert loading bar for files\n            loadingBarsClasses: [],                                        // array of strings for classnames for loading bars\n            reloadedFilesClass: 'reloadedElement',                         // class for previously uploaded files\n            resultContainerClass: 'result',                                // result container's class (where to place result files data)\n            resultFileContainerClass: 'uploadedFile',                      // class for every file result container span\n            resultPrefix: 'fileUploader',                                  // prefix for inputs in the file result container\n            resultInputNames: ['title', 'extension', 'value', 'size'],     // name suffix to be used for result inputs\n            defaultFileExt: '',                                            // extension to use for files with no extension\n            defaultMimeType: '',                                           // MIME type to use for files with no extension\n            fileMaxSize: 50,                                               // maximum allowed file size (in MB)\n            totalMaxSize: 1000,                                            // total maximum allowed size of all files\n            reloadArray: [],                                               // array of files to be reloaded at plugin startup\n            reloadHTML: undefined,                                         // HTML for reloaded files to place directly in result container\n            linkButtonContent: 'L',                                        // HTML content for link button\n            deleteButtonContent: 'X',                                      // HTML content for delete button\n            allowDuplicates: false,                                        // allow upload duplicates\n            duplicatesWarning: false,                                      // show a message in the loading area when trying to load a duplicated file\n\n            HTMLTemplate: function() {\n                return [\n                    '<p class=\"introMsg\"></p>',\n                    '<div>',\n                    '    <div class=\"inputContainer\">',\n                    '        <input class=\"fileLoader\" type=\"file\" multiple />',\n                    '    </div>',\n                    '    <div class=\"dropZone\"></div>',\n                    '    <div class=\"filesContainer filesContainerEmpty\">',\n                    '        <div class=\"innerFileThumbs\"></div>',\n                    '        <div style=\"clear:both;\"></div>',\n                    '    </div>',\n                    '</div>',\n                    '<div class=\"result\"></div>'\n                ].join(\"\\n\");\n            },\n\n            onload: function() {},                                         // callback on plugin initialization\n            onfileloadStart: function() {},                                // callback on file reader start\n            onfileloadEnd: function() {},                                  // callback on file reader end\n            onfileDelete: function() {},                                   // callback on file delete\n            filenameTest: function() {},                                   // callback for testing filenames\n\n            langs: {\n                'en': {\n                    intro_msg: '(Add attachments...)',\n                    dropZone_msg: 'Drop your files here',\n                    maxSizeExceeded_msg: 'File too large',\n                    totalMaxSizeExceeded_msg: 'Total size exceeded',\n                    duplicated_msg: 'File duplicated (skipped)',\n                    name_placeHolder: 'name',\n                }\n            }\n        };\n\n        // extend options with instance ones\n        this._options = $.extend(true, {}, this._defaults, options);\n\n        // add more options\n        this.options = function(options) {\n            return (options) ? $.extend(true, this._options, options) : this._options;\n        };\n\n        // round number\n        this._round = function(value) {\n            return Math.round(value * 100) / 100;\n        };\n\n        // return data\n        this.get = function(parameter) {\n            var self = this;\n\n            switch (parameter) {\n                case 'currentTotalSize':\n                return self._round(currentTotalSize);\n\n                case 'currentAvailableSize':\n                return self._round(self._options.totalMaxSize - currentTotalSize);\n            }\n        };\n\n        // debug logs function\n        this._logger = function(message, level, data) {\n            if (this._options.debug) {\n                if (level) {\n                    for (var i = 0; i < level; i++) {\n                        message = '\\u27A1 ' + message;\n                    }\n                }\n                if (this._options.name) {\n                    message = '[' + this._options.pluginName + ' - ' + this._options.name + '] ' + message;\n                }\n\n                if (data) {\n                    console.log('%c ' + message, this._options.debugLogStyle, data);\n                }\n                else {\n                    console.log('%c ' + message, this._options.debugLogStyle);\n                }\n            }\n        };\n\n        // file type identificator\n        this._fileType = function(fileName) {\n            var ext = fileName.substring(fileName.lastIndexOf('.') + 1, fileName.length);\n            var icons = ['pdf', 'jpg', 'png'];\n\n            if (icons.indexOf(ext) >= 0) {\n                return ext;\n            }\n            else {\n                return 'unknown-file';\n            }\n        };\n\n        // method for deleting a reader's result from result container\n        this._fileDelete = function(event) {\n            var element = event.data.element;\n            var index = $(event.target).data('delete');\n\n            if (!index) {\n                index = $(event.target).closest('div[data-delete]').data('delete');\n            }\n\n            // remove file block\n            if (self._options.useFileIcons) {\n                element.prev('img').remove();\n            }\n            element.remove();\n\n            // get file size\n            var fileSize = $resultContainer.find('input[name=\"' + self._options.resultPrefix + '[' + index + '][' + self._options.resultInputNames[3] + ']\"]').val();\n\n            fileSize = self._round(fileSize);\n\n            currentTotalSize = self._round(currentTotalSize - fileSize);\n\n            var availableSize = self._options.totalMaxSize - currentTotalSize;\n\n            availableSize = self._round(availableSize);\n            availableLabel.children('span').html(availableSize);\n\n            // remove result block\n            $resultContainer.children('div[data-index=\"' + index + '\"]').remove();\n\n            if ($('.innerFileThumbs').children().length === 0) {\n                $('.filesContainer').addClass('filesContainerEmpty');\n            }\n\n            self._logger('Deleted file N: ' + index, 2);\n\n            self._options.onfileDelete(index, currentTotalSize);\n        };\n\n        // method to rename file in result container accordingly to modifications by user\n        this._fileRename = function(event) {\n            var element = event.data.element;\n            var $this = $(event.target);\n            var ext = element.children('.fileExt').html();\n            var text = $this.val();\n            var index = element.data('index');\n            var $input = $resultContainer.find('div[data-index=\"' + index + '\"] input:first');\n            var nameTest = self._options.filenameTest(text, ext, $fileThumbsContainer);\n\n            if (nameTest === false) {\n                event.preventDefault();\n                return false;\n            }\n            if (nameTest !== undefined && nameTest !== true) {\n\n                text = nameTest;\n                $this.val(text);\n\n                // update input\n                if (ext.length > 0) {\n                    text = text + '.' + ext;\n                }\n\n                $input.val(text);\n\n                // restore selection range\n                $this[0].setSelectionRange(event.data.start, event.data.stop);\n            }\n        };\n\n        this.getData = function() {\n            var data = [];\n\n            this._logger('RECEIVED SAVE COMMAND:', 0);\n\n            $.each($resultContainer.children('.' + this._options.resultFileContainerClass), function(index, element) {\n                var file = {\n                    title: $($(element).children('input')[0]).val(),\n                    ext: $($(element).children('input')[1]).val(),\n                    value: $($(element).children('input')[2]).val()\n                };\n\n                data.push(file);\n            });\n\n            this._logger('%O', 0 ,data);\n            return data;\n        };\n\n        // create container for file uploading elements (icon, progress bar, etc...)\n        this._createUploaderContainer = function(index, fileName, fileExt) {\n            // create current element's DOM\n            var containerStyle = 'position: relative;';\n\n            //insert file icon if requested\n            if (this._options.useFileIcons) {\n                var currentThumb = $('<img src=\"/images/' + this._fileType(fileExt) + '.png\" class=\"fileThumb\" />');\n                $fileThumbsContainer.append(currentThumb);\n            }\n\n            var container = $('<div class=\"newElement\" data-index=\"' + parseInt(index) + '\" style=\"' + containerStyle + '\"></div');\n            $fileThumbsContainer.append(container);\n\n            var fileButtonsContainer = $('<div class=\"fileActions\"></div>');\n            container.append(fileButtonsContainer);\n\n            // file \"see\" link\n            var seeFileLink = $('<a target=\"_blank\"><div class=\"fileSee\">' + self._options.linkButtonContent + '</div></a>');\n            fileButtonsContainer.append(seeFileLink);\n\n            // delete button\n            var deleteBtn = $('<div data-delete=\"' + parseInt(index) + '\" class=\"fileDelete\">' + self._options.deleteButtonContent + '</div>');\n            fileButtonsContainer.append(deleteBtn);\n            deleteBtn.click({element: container}, this._fileDelete);\n\n            //insert loading bars if requested\n            if (this._options.useLoadingBars) {\n                var classes = self._options.loadingBarsClasses;\n\n                if (classes.length > 0) {\n                    classes = classes.join(' ');\n                }\n\n                var currentLoadBar = $('<div class=\"loadBar ' + classes + '\"><div></div></div>');\n                container.prepend(currentLoadBar);\n            }\n\n            var currentTitle = $('<input placeholder=\"nome\" class=\"fileTitle\"></input>');\n            var currentExtension = $('<div class=\"fileExt\"></div>');\n\n            container.prepend(currentExtension);\n            container.prepend(currentTitle);\n\n            //currentTitle.keypress({element: container}, this._fileRename);\n            currentTitle.on('keypress keyup paste', function(event) {\n                event.data = {};\n                event.data.element = container;\n                event.data.start = this.selectionStart;\n                event.data.stop = this.selectionEnd;\n                self._fileRename(event);\n            });\n\n            currentTitle.val(fileName);\n            currentExtension.html(fileExt);\n\n            return container;\n        };\n\n        this._createResultContainer = function(fileData) {\n            var index = fileData.index;\n            var resultElemContainer = $('<div data-index=\"' + index + '\" class=\"' + self._options.resultFileContainerClass + '\"></div>');\n\n            resultElemContainer.append($('<div>File: ' + index + '</div>'));\n            resultElemContainer.append($('<input/>').attr({type: 'text', name: self._options.resultPrefix + '[' + index + '][' + self._options.resultInputNames[0] + ']', value: fileData.name}));\n            resultElemContainer.append($('<input/>').attr({type: 'text', name: self._options.resultPrefix + '[' + index + '][' + self._options.resultInputNames[1] + ']', value: fileData.type}));\n            resultElemContainer.append($('<input/>').attr({type: 'text', name: self._options.resultPrefix + '[' + index + '][' + self._options.resultInputNames[2] + ']', value: fileData.result}));\n            resultElemContainer.append($('<input/>').attr({type: 'text', name: self._options.resultPrefix + '[' + index + '][' + self._options.resultInputNames[3] + ']', value: fileData.size}));\n\n            $resultContainer.append(resultElemContainer);\n        };\n\n        // files read function\n        this._filesRead = function(event) {\n            var DOM = event.data.DOM;\n            var filesList;\n            var approvedList = false;\n            var i = 0;\n\n            if (event.target.files) {\n                this._logger('files array source: file selector (click event)', 1);\n                filesList = event.target.files;\n            }\n            else {\n                this._logger('files array source: dropzone (drag & drop event)', 1);\n                filesList = event.dataTransfer.files;\n            }\n            this._logger('%O', 0, filesList);\n\n            // build approved list\n            if (!self._options.allowDuplicates) {\n                var loadedFiles = [];\n                var newFiles = [];\n\n                approvedList = [];\n\n                // build already loaded files list\n                $.each($resultContainer.children(), function(index, file) {\n                    loadedFiles.push($(file).children('input').first().val());\n                });\n\n                // build current selected files list\n                for (i = 0; i < filesList.length; i++) {\n                    newFiles.push(filesList[i].name);\n                }\n\n                // avoid load twice the same file\n                newFiles.forEach(function(newFile) {\n                    var fileIndex = loadedFiles.indexOf(newFile);\n\n                    if (fileIndex < 0) {\n                        approvedList.push(newFile);\n                    }\n                });\n            }\n\n            $fileContainer.removeClass('filesContainerEmpty');\n            // set selected file's name to fleNameContainer\n            $fileNameContainer.html('upload files');\n\n            function readFile(reader, file, index, DOM) {\n                var currentElement = DOM.find('.innerFileThumbs').children().filter(function() {\n                    return $(this).data('index') === index ;\n                });\n\n                var size = self._round(file.size / 1000000);      // size in MB\n\n                reader.onloadstart = function() {\n                    self._options.onfileloadStart(index);\n                    self._logger('START read file: ' + index + ', size: ' + size + ' MB', 2);\n                };\n\n                reader.onprogress = function(event) {\n                    if (event.lengthComputable) {\n                        var percentLoaded = self._round((event.loaded / event.total) * 100);\n                        self._logger('File ' + index + ' loaded: ' + percentLoaded, 3);\n\n                        // Increase the progress bar length.\n                        if (percentLoaded <= 100) {\n                            currentElement.children('.loadBar').children('div').animate({width: '100%'}, 500);\n                        }\n                    }\n                };\n\n                reader.onloadend = function() {\n                    var type = file.type;\n                    var name = file.name;\n                    var result = reader.result;\n\n                    // reading unsuccessful\n                    if (!result) {\n                        return false;\n                    }\n\n                    var mimeType = result.substring(0, result.indexOf(';'));\n\n                    // if file has no MIME type, replace with default one\n                    if (mimeType === \"data:\" && self._options.defaultMimeType.length > 0) {\n                        result = \"data:\" + self._options.defaultMimeType + result.substring(result.indexOf(';'), result.length);\n                    }\n\n                    if (type === \"\") {\n                        type = self._options.defaultMimeType;\n                    }\n                    if (name.indexOf('.') < 0 && self._options.defaultFileExt !== \"\") {\n                        name = name + '.' + self._options.defaultFileExt;\n                    }\n\n                    var newFile = {\n                        index: index,\n                        name: name,\n                        type: type,\n                        result: result,\n                        size: size\n                    };\n\n                    self._createResultContainer(newFile);\n\n                    //set direct link on file see button\n                    currentElement.children('.fileActions').children('a').attr('href', result);\n                    self._logger('END read file: ' + index, 4);\n\n                    var totalUploaded = parseInt($('#debugUploaded').html()) + 1;\n\n                    $('#debugUploaded').html(totalUploaded);\n\n                    var resultObject = {\n                        name: file.name,\n                        type: file.type,\n                        data: result,\n                        size: size\n                    };\n\n                    self._options.onfileloadEnd(index, resultObject, self._round(currentTotalSize));\n                };\n\n                if ((size <= self._options.fileMaxSize) && ((currentTotalSize + size) <= self._options.totalMaxSize)) {\n                    reader.readAsDataURL(file);\n\n                    // update total size\n                    currentTotalSize = currentTotalSize + size;\n\n                    var currentAvailableSize = self._options.totalMaxSize - currentTotalSize;\n\n                    availableLabel.children('span').html(self._round(currentAvailableSize));\n                }\n                else {\n                    var errorMsg = currentLangObj.totalMaxSizeExceeded_msg;\n\n                    if (size > self._options.fileMaxSize) {\n                        errorMsg = currentLangObj.maxSizeExceeded_msg;\n                        self._logger('FILE REJECTED: Max size exceeded - max size: ' + self._options.fileMaxSize + ' MB - file size: ' + size + ' MB');\n                    }\n                    else {\n                        self._logger('FILE REJECTED: Max total size exceeded - max size: ' + self._options.totalMaxSizeExceeded_msg + ' MB - current total size: ' + (currentTotalSize + size) + ' MB');\n                    }\n\n                    currentElement.addClass('error');\n                    currentElement.children('.loadBar').empty().append('<div class=\"errorMsg\">' + errorMsg + '</div>');\n\n                    setTimeout(function() {\n                        currentElement.animate({opacity: 0}, 300, function() {\n                            if (self._options.useFileIcons) {\n                                $(this).prev('img').remove();\n                            }\n                            $(this).remove();\n                        });\n                    }, 2000);\n\n                    var totalRejected = parseInt($('#debugRejected').html()) + 1;\n                    $('#debugRejected').html(totalRejected);\n                }\n            }\n\n            var startIndex = $('#innerFileThumbs').children().last().attr('id');\n\n            if (startIndex !== undefined) {\n                startIndex = parseInt(startIndex.substring(startIndex.indexOf('-') + 1, startIndex.length)) + 1;\n            }\n            else {\n                startIndex = 0;\n            }\n\n            function appendMessage($message) {\n                setTimeout(function() {\n                    $message.animate({opacity: 0}, 300, function() {\n                        $(this).remove();\n                    });\n                }, 2000);\n            }\n\n            // create a new div containing thumb, delete button and title field for each target file\n            for (i = 0; i < filesList.length; i++) {\n                var file = filesList[i];\n                var reader = new FileReader();\n\n                // test for duplicates\n                if (approvedList && approvedList.indexOf(file.name) < 0) {\n                    if (self._options.duplicatesWarning) {\n                        var $info = $('<div class=\"errorLabel center\"></div>');\n\n                        $info.html(currentLangObj.duplicated_msg);\n                        $fileThumbsContainer.append($info);\n                        appendMessage($info);\n                    }\n\n                    this._logger('File duplicated: ' + file.name + ' -> skipping...', 2);\n                    continue;\n                }\n\n                var fileName, fileExt;\n                if (file.name.lastIndexOf('.') > 0) {\n                    fileName = file.name.substring(0, file.name.lastIndexOf('.'));\n                    fileExt = file.name.substring(file.name.lastIndexOf('.') + 1, file.name.length);\n                }\n                else {\n                    fileName = file.name;\n                    fileExt = this._options.defaultFileExt;\n                }\n\n                // test for filenames\n                var nameTest = this._options.filenameTest(fileName, fileExt, $fileThumbsContainer);\n                if (nameTest === false) {\n                    this._logger('Invalid file name: ' + file.name, 2);\n                    continue;\n                }\n                else {\n                    if (nameTest !== undefined && nameTest !== true) {\n                        fileName = nameTest;\n                    }\n                }\n\n                this._createUploaderContainer(globalIndex, fileName, fileExt);\n\n                // now read!\n                readFile(reader, file, globalIndex, DOM);\n                globalIndex++;\n            }\n        };\n\n        /*\n        *  -------------------------------------------------------------\n        *  |                       MAIN FLOW                           |\n        *  -------------------------------------------------------------\n        */\n        // initialization\n        if (this._options.name) {\n            this._logger('INITIALIZED INSTANCE: ' + this._options.name);\n        }\n        // build HTML template\n        var template = $(this._options.HTMLTemplate());\n\n        $el.append(template);\n\n        var globalIndex = 0;\n        var $resultContainer = $el.find('.' + this._options.resultContainerClass);\n        var $loadBtn = $el.find('.fileLoader');\n        var $fileContainer = $el.find('.filesContainer');\n        var $fileNameContainer = $el.find('.fileNameContainer');\n        var $fileThumbsContainer = $el.find('.innerFileThumbs');\n        var dropZone = $el.find('.dropZone')[0];\n        var currentLangObj = this._options.langs[this._options.lang];\n\n        // place reloaded files' HTML in result container directly (if provided)\n        if (this._options.reloadHTML) {\n            $resultContainer.html(this._options.reloadHTML);\n        }\n\n\n        $el.find('.introMsg').html(currentLangObj.intro_msg);\n        $(dropZone).html(currentLangObj.dropZone_msg);\n        if (!this._options.debug) {\n            $resultContainer.addClass('hide');\n        }\n        else {\n            $('<p class=\"debugMode\">Debug mode: on</p>').insertBefore($resultContainer);\n            $('<div class=\"debug\">Uploaded files: <span id=\"debugUploaded\">0</span> | Rejected files: <span id=\"debugRejected\">0</span></div>').insertBefore($resultContainer);\n            $('<div class=\"debug\">Current MAX FILE SIZE: ' + this._options.fileMaxSize + ' MB</div>').insertBefore($resultContainer);\n            $('<div class=\"debug\">Current MAX TOTAL SIZE: ' + this._options.totalMaxSize + ' MB</div>').insertBefore($resultContainer);\n            $('<div class=\"debug sizeAvailable\">Size still available: <span>' + this._options.totalMaxSize + '</span> MB</div>').insertBefore($resultContainer);\n        }\n\n        // --- FILES RELOAD SECTION ---\n        // lookup for previously loaded files placed in the result container directly\n        var availableLabel = $el.find('.sizeAvailable');\n        var currentTotalSize = 0;\n        var loadedFile;\n\n        $.each($resultContainer.children('.' + this._options.resultFileContainerClass), function(index, element) {\n            self._logger('found previously uploaded file: index = ' + $(element).data('index'), 2);\n\n            // pay attention to index used on fileData here: index 0 is the title DIV!\n            var fileData = $(element).children('input');\n            var fileName = $(fileData[0]).val();\n            var fileExt = $(fileData[1]).val();\n            var fileSize = $(fileData[3]).val();\n\n            if (fileName.lastIndexOf('.') > 0) {\n                fileName = fileName.substr(0, fileName.lastIndexOf('.'));\n            }\n\n            loadedFile = self._createUploaderContainer(globalIndex, fileName, fileExt);\n            loadedFile.children('.loadBar').children('div').css({width: '100%'});\n            loadedFile.addClass(self._options.reloadedFilesClass);\n\n            currentTotalSize = currentTotalSize + parseFloat(fileSize);\n            globalIndex++;\n        });\n\n        // reload files from provided array\n        if (this._options.reloadArray.length > 0) {\n            this._options.reloadArray.forEach(function(file, index) {\n                // re-create visible elements\n                loadedFile = self._createUploaderContainer(index, file.name, file.ext);\n                loadedFile.children('.loadBar').children('div').css({width: '100%'});\n                loadedFile.addClass(self._options.reloadedFilesClass);\n\n                self._logger('found previously uploaded file: index = ' + index, 2);\n\n                // re-create results\n                var newFile = {\n                    index: index,\n                    name: file.name,\n                    type: file.ext,\n                    result: file.data,\n                    size: file.size\n                };\n\n                self._createResultContainer(newFile);\n\n                currentTotalSize = currentTotalSize + parseFloat(file.size);\n                globalIndex++;\n            });\n        }\n\n        currentTotalSize = self._round(currentTotalSize);\n\n        this._logger('current total size: ' + currentTotalSize);\n        availableLabel.children('span').html(this._options.totalMaxSize - currentTotalSize);\n        // --- END FILES RELOAD SECTION ---\n\n        // onload callback\n        this._options.onload(this._options, currentTotalSize);\n\n        // Drag events\n        function handleDragOver(event) {\n            $(dropZone).addClass('highlight');\n            event.stopPropagation();\n            event.preventDefault();\n            event.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.\n        }\n        function handleDrop(event) {\n            $(dropZone).removeClass('highlight');\n            event.stopPropagation();\n            event.preventDefault();\n            event.data = {\n                DOM: $el\n            };\n            self._filesRead(event);\n        }\n\n        dropZone.addEventListener('dragleave', function() {\n            $(dropZone).removeClass('highlight');\n        });\n        dropZone.addEventListener('dragover', handleDragOver, false);\n        dropZone.addEventListener('drop', (function(passedInElement) {\n            return function(e) {\n                handleDrop(e, passedInElement);\n            };\n        }) (this), false);\n\n        $(dropZone).click(function() {\n            $loadBtn.trigger('click');\n        });\n\n        // fileUploader events\n        $loadBtn.change({DOM: $el}, function(event) {\n            self._filesRead(event);\n            this.value = null;\n        });\n\n    };\n\n    $.fn.fileUploader = function(methodOrOptions) {\n        var method = (typeof methodOrOptions === 'string') ? methodOrOptions : undefined;\n\n        function getFileUploader() {\n            var $el          = $(this);\n            var fileUploader = $el.data('fileUploader');\n\n            fileUploaders.push(fileUploader);\n        }\n\n        function applyMethod(index) {\n            var fileUploader = fileUploaders[index];\n\n            if (!fileUploader) {\n                console.warn('$.fileUploader not instantiated yet');\n                console.info(this);\n                results.push(undefined);\n                return;\n            }\n\n            if (typeof fileUploader[method] === 'function') {\n                var result = fileUploader[method].apply(fileUploader, args);\n                results.push(result);\n            } else {\n                console.warn('Method \\'' + method + '\\' not defined in $.fileUploader');\n            }\n        }\n\n        function init() {\n            var $el          = $(this);\n            var fileUploader = new FileUploader($el, options);\n\n            $el.data('fileUploader', fileUploader);\n        }\n\n        if (method) {\n            var fileUploaders = [];\n\n            this.each(getFileUploader);\n\n            var args    = (arguments.length > 1) ? Array.prototype.slice.call(arguments, 1) : undefined;\n            var results = [];\n\n            this.each(applyMethod);\n\n            return (results.length > 1) ? results : results[0];\n        } else {\n            var options = (typeof methodOrOptions === 'object') ? methodOrOptions : undefined;\n\n            return this.each(init);\n        }\n    };\n})(jQuery);\n"]}