{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js/fileUploader.js","node_modules/deepmerge/dist/umd.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","_deepmerge","window","FileUploader","$el","options","_this","this","instance","_defaults","lang","useFileIcons","debug","debugLogStyle","name","undefined","pluginName","useLoadingBars","loadingBarsClasses","reloadedFilesClass","resultContainerClass","resultFileContainerClass","resultPrefix","resultInputNames","defaultFileExt","defaultMimeType","maxFileSize","maxTotalSize","maxNumberOfFiles","reloadArray","reloadHTML","linkButtonContent","deleteButtonContent","showErrorOnLoadBar","allowDuplicates","duplicatesWarning","labelsContainers","labelsClasses","sizeAvailable","currentSize","currentNumberOfFiles","numberOfUploadedFiles","numberOfRejectedFiles","HTMLTemplate","onload","onfileloadStart","onfileloadEnd","onfileRejected","onfileDelete","filenameTest","langs","en","intro_msg","dropZone_msg","maxSizeExceeded_msg","maxTotalSizeExceeded_msg","maxNumberOfFilesExceeded_msg","duplicated_msg","name_placeHolder","updateLabel","type","value","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","instanceLabels","concat","Symbol","iterator","next","done","labelSpan","querySelector","prevValue","parseInt","innerHTML","err","_options","_round","Math","round","get","parameter","currentTotalSize","_logger","message","level","data","console","log","_fileType","fileName","ext","substring","lastIndexOf","indexOf","_fileDelete","event","element","index","target","dataset","closest","selector","sibling","previousElementSibling","matches","getPreviousSibling","remove","fileSize","$resultContainer","availableSize","document","children","classList","add","_fileRename","$this","text","$input","nameTest","$fileThumbsContainer","preventDefault","setSelectionRange","start","stop","getData","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","querySelectorAll","inputs","file","title","push","_createUploaderContainer","fileExt","currentThumb","insertAdjacentHTML","container","createElement","className","style","position","appendChild","fileButtonsContainer","seeFileLink","addEventListener","content","open","write","deleteBtn","append","classes","join","currentLoadBar","prepend","currentTitle","setAttribute","currentExtension","events","handler","Array","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","_event","addMultipleListeners","selectionStart","selectionEnd","_createResultContainer","fileData","resultElemContainer","result","size","_filesRead","filesList","DOM","approvedList","files","dataTransfer","loadedFiles","newFiles","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","forEach","newFile","$fileContainer","readFile","reader","currentElement","from","filter","onloadstart","onprogress","lengthComputable","percentLoaded","loaded","total","width","onloadend","resultObject","isReadAllowed","rejectReasons","readAsDataURL","currentAvailableSize","readAllowed","reasons","errorMsg","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","currentLangObj","loadBar","setTimeout","onFileRejected","readRejected","innerFileThumbsElements","lastThumbElement","appendMessage","$message","getAttribute","_file","FileReader","$info","globalIndex","template","loadedFile","$loadBtn","dropZone","label","sizeAvailableLabels","currentNumberOfFilesLabels","numberOfUploadedFilesLabels","numberOfRejectedFilesLabels","getContainer","_label","findLabel","labels","isArray","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_container","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","entries","_step7$value","_slicedToArray","substr","parseFloat","handleDragOver","stopPropagation","dropEffect","handleDrop","click","fileUploader","elementDOM","global","factory","isMergeableObject","isNonNullObject","stringValue","Object","prototype","toString","$$typeof","REACT_ELEMENT_TYPE","isReactElement","isSpecial","for","cloneUnlessOtherwiseSpecified","clone","deepmerge","val","emptyTarget","defaultArrayMerge","source","map","mergeObject","destination","keys","key","customMerge","getMergeFunction","arrayMerge","sourceIsArray","all","array","reduce","prev","define","amd"],"mappings":"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","file":"fileUploader.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import deepMerge from 'deepmerge';\nimport { read } from 'fs';\n\n\n/*\n* fileUploader v5.4.43\n* Licensed under MIT (https://raw.githubusercontent.com/Cerealkillerway/fileUploader/master/license.txt)\n*/\n(function(context) {\n    context.FileUploader = function($el, options) {\n        let instance = this;\n\n        // default options\n        this._defaults = {\n            lang: 'en',\n            useFileIcons: true,\n\n            debug: false,                                                  // activate console logs for debug\n            debugLogStyle: 'color: #9900ff',                               // css style for debug console logs in js console\n            name: undefined,                                               // a name for plugin's instance (useful for debug purposes)\n            pluginName: 'FileUploader',                                    // plugin's name (used in debug logs alongside with name)\n\n            useLoadingBars: true,                                          // insert loading bar for files\n            loadingBarsClasses: [],                                        // array of strings for classnames for loading bars\n            reloadedFilesClass: 'reloadedElement',                         // class for previously uploaded files\n            resultContainerClass: 'result',                                // result container's class (where to place result files data)\n            resultFileContainerClass: 'uploadedFile',                      // class for every file result container span\n            resultPrefix: 'fileUploader',                                  // prefix for inputs in the file result container\n            resultInputNames: ['title', 'extension', 'value', 'size'],     // name suffix to be used for result inputs\n            defaultFileExt: '',                                            // extension to use for files with no extension\n            defaultMimeType: '',                                           // MIME type to use for files with no extension\n            maxFileSize: 50,                                               // maximum allowed file size (in MB)\n            maxTotalSize: 1000,                                            // total maximum allowed size of all files\n            maxNumberOfFiles: false,                                       // maximum number of files allowed to upload\n            reloadArray: [],                                               // array of files to be reloaded at plugin startup\n            reloadHTML: undefined,                                         // HTML for reloaded files to place directly in result container\n            linkButtonContent: 'L',                                        // HTML content for link button\n            deleteButtonContent: 'X',                                      // HTML content for delete button\n            showErrorOnLoadBar: true,                                      // decides if the reason for a rejected file will be displayed over its load bar;\n                                                                           // in case the file is rejected because of more than one reason, only the first one will be displayed on the bar;\n            allowDuplicates: false,                                        // allow upload duplicates\n            duplicatesWarning: false,                                      // show a message in the loading area when trying to load a duplicated file\n            labelsContainers: false,                                       // query selector for the container where to look for labels (ex. '#myId'), (default 'false' -> no labels;\n                                                                           // can be a string for a single value, or an array if the plugin has to update labels in many places;\n            labelsClasses: {                                               // dictionary of classes used by the various labels handled by the plugin\n                sizeAvailable: 'sizeAvailable',\n                currentSize: 'currentSize',\n                currentNumberOfFiles: 'currentNumberOfFiles',\n                maxFileSize: 'maxFileSize',\n                maxTotalSize: 'maxTotalSize',\n                maxNumberOfFiles: 'maxNumberOfFiles',\n                numberOfUploadedFiles: 'numberOfUploadedFiles',\n                numberOfRejectedFiles: 'numberOfRejectedFiles'\n            },\n\n            HTMLTemplate: () => {\n                return `<p class=\"introMsg\"></p>\n                    <div>\n                        <div class=\"inputContainer\">\n                            <input class=\"fileLoader\" type=\"file\" multiple />\n                        </div>\n                        <div class=\"dropZone\"></div>\n                        <div class=\"filesContainer filesContainerEmpty\">\n                            <div class=\"innerFileThumbs\"></div>\n                            <div style=\"clear:both;\"></div>\n                        </div>\n                    </div>\n                    <div class=\"result\"></div>`;\n            },\n\n            onload: () => {},                                             // callback on plugin initialization\n            onfileloadStart: () => {},                                    // callback on file reader start\n            onfileloadEnd: () => {},                                      // callback on file reader end\n            onfileRejected: () => {},                                     // callback on file rejected\n            onfileDelete: () => {},                                       // callback on file delete\n            filenameTest: () => {},                                       // callback for testing filenames\n\n            langs: {\n                'en': {\n                    intro_msg: '(Add attachments...)',\n                    dropZone_msg: 'Drop your files here',\n                    maxSizeExceeded_msg: 'File too large',\n                    maxTotalSizeExceeded_msg: 'Total size exceeded',\n                    maxNumberOfFilesExceeded_msg: 'Number of files allowed exceeded',\n                    duplicated_msg: 'File duplicated (skipped)',\n                    name_placeHolder: 'name',\n                }\n            }\n        };\n\n\n        // UTILITIES\n        const addMultipleListeners = function (element, events, handler) {\n            if (!(events instanceof Array)) {\n                this._logger('addMultipleListeners requires events to be an array');\n            }\n            for (const event of events) {\n                element.addEventListener(event, handler);\n            }\n        }\n\n        const getPreviousSibling = function(element, selector) {\n            let sibling = element.previousElementSibling;\n\n            if (!selector) return sibling;\n\n            while (sibling) {\n                if (sibling.matches(selector)) {\n                    return sibling;\n                }\n                sibling = sibling.previousElementSibling;\n            }\n        };\n\n        const updateLabel = function(type, value) {\n            for (let label of instanceLabels[`${type}Labels`]) {\n                let labelSpan = label.querySelector(':scope > span');\n                let prevValue;\n\n                switch(value) {\n                    case '++':\n                    prevValue = parseInt(labelSpan.innerHTML) + 1;\n                    labelSpan.innerHTML = prevValue;\n                    break;\n\n                    case '--':\n                    prevValue = parseInt(labelSpan.innerHTML) - 1;\n                    labelSpan.innerHTML = prevValue;\n                    break;\n\n                    default:\n                    labelSpan.innerHTML = value;\n                }\n            }\n        }\n\n\n        // extend options with instance ones\n        this._options = deepMerge(this._defaults, options);\n\n\n        // add more options\n        this.options = (options) => {\n            return (options) ? deepMerge(this._options, options) : this._options;\n        };\n\n\n        // round number\n        this._round = (value) => {\n            return Math.round(value * 100) / 100;\n        };\n\n\n        // return data\n        this.get = (parameter) => {\n            switch (parameter) {\n                case 'currentTotalSize':\n                return this._round(currentTotalSize);\n\n                case 'currentAvailableSize':\n                return this._round(this._options.maxTotalSize - currentTotalSize);\n\n                case 'currentNumberOfFiles':\n                return currentNumberOfFiles;\n\n                case 'availableNumberOfFiles':\n                return this._options.maxNumberOfFiles - currentNumberOfFiles;\n            }\n        };\n\n\n        // debug logs function\n        this._logger = (message, level, data) => {\n            if (this._options.debug) {\n                if (level) {\n                    for (let i = 0; i < level; i++) {\n                        message = '\\u27A1 ' + message;\n                    }\n                }\n                if (this._options.name) {\n                    message = '[' + this._options.pluginName + ' - ' + this._options.name + '] ' + message;\n                }\n\n                if (data) {\n                    console.log('%c ' + message, this._options.debugLogStyle, data);\n                }\n                else {\n                    console.log('%c ' + message, this._options.debugLogStyle);\n                }\n            }\n        };\n\n\n        // file type identificator\n        this._fileType = (fileName) => {\n            let ext = fileName.substring(fileName.lastIndexOf('.') + 1, fileName.length);\n            let icons = ['pdf', 'jpg', 'png'];\n\n            if (icons.indexOf(ext) >= 0) {\n                return ext;\n            }\n            else {\n                return 'unknown-file';\n            }\n        };\n\n\n        // method for deleting a reader's result from result container\n        this._fileDelete = (event, data) => {\n            let element = data.element;\n            let index = event.target.dataset.delete;\n\n            if (!index) {\n                index = event.target.closest('div[data-delete]').dataset.delete;\n            }\n\n            // remove file block\n            if (this._options.useFileIcons) {\n                getPreviousSibling(element, 'img').remove();\n            }\n            element.remove();\n\n            // get file size\n            let fileSize = $resultContainer.querySelector(`input[name=\"${this._options.resultPrefix}[${index}][${this._options.resultInputNames[3]}]\"]`).value;\n\n            fileSize = this._round(fileSize);\n            currentTotalSize = this._round(currentTotalSize - fileSize);\n            currentNumberOfFiles--;\n\n            let availableSize = this._options.maxTotalSize - currentTotalSize;\n\n            availableSize = this._round(availableSize);\n            updateLabel('sizeAvailable', availableSize);\n            updateLabel('currentSize', currentTotalSize);\n            updateLabel('currentNumberOfFiles', currentNumberOfFiles);\n            updateLabel('numberOfUploadedFiles', '--');\n\n            // remove result block\n            $resultContainer.querySelector(`:scope > div[data-index=\"${index}\"]`).remove();\n\n            if (document.querySelector('.innerFileThumbs').children.length === 0) {\n                document.querySelector('.filesContainer').classList.add('filesContainerEmpty');\n            }\n\n            this._logger('Deleted file N: ' + index, 2);\n            this._options.onfileDelete(index, currentTotalSize, currentNumberOfFiles);\n        };\n\n\n        // method to rename file in result container accordingly to modifications by user\n        this._fileRename = (event) => {\n            let element = event.data.element;\n            let $this = event.target;\n            let ext = element.querySelector(':scope > .fileExt').innerHTML;\n            let text = $this.value;\n            let index = element.dataset.index;\n            let $input = $resultContainer.querySelector(`div[data-index=\"${index}\"] input`);\n            let nameTest = this._options.filenameTest(text, ext, $fileThumbsContainer);\n\n            if (nameTest === false) {\n                event.preventDefault();\n                return false;\n            }\n            if (nameTest !== undefined && nameTest !== true) {\n                text = nameTest;\n                $this.value = text;\n\n                // update input\n                /*if (ext.length > 0) {\n                    text = `${text}.${ext}`;\n                }*/\n\n                $input.value = text;\n                // restore selection range\n                $this.setSelectionRange(event.data.start, event.data.stop);\n            }\n        };\n\n\n        this.getData = () => {\n            let data = [];\n\n            this._logger('RECEIVED SAVE COMMAND:', 0);\n\n            for (const element of $resultContainer.querySelectorAll(`:scope > .${this._options.resultFileContainerClass}`)) {\n                let inputs = element.querySelectorAll(':scope > input');\n                let file = {\n                    title: inputs[0].value,\n                    ext: inputs[1].value,\n                    value: inputs[2].value\n                };\n\n                data.push(file);\n            }\n\n            this._logger('%O', 0 ,data);\n            return data;\n        };\n\n\n        // create container for file uploading elements (icon, progress bar, etc...)\n        this._createUploaderContainer = (index, fileName, fileExt) => {\n            //insert file icon if requested\n            if (this._options.useFileIcons) {\n                let currentThumb = `<img src=\"/images/${this._fileType(fileExt)}.png\" class=\"fileThumb\" />`;\n                $fileThumbsContainer.insertAdjacentHTML('beforeend', currentThumb);\n            }\n\n            let container = document.createElement('div');\n            container.className = 'newElement';\n            container.dataset.index = parseInt(index);\n            container.style.position = 'relative';\n            $fileThumbsContainer.appendChild(container);\n\n            let fileButtonsContainer = document.createElement('div');\n            fileButtonsContainer.className = 'fileActions';\n            container.appendChild(fileButtonsContainer);\n\n            // file \"see\" link\n            let seeFileLink = document.createElement('div');\n            seeFileLink.className = 'fileSee';\n            seeFileLink.innerHTML = this._options.linkButtonContent;\n            fileButtonsContainer.appendChild(seeFileLink);\n\n            seeFileLink.addEventListener('click', function(event) {\n                let index = event.target.closest('.newElement').dataset.index;\n                let content = $resultContainer.querySelector(`.uploadedFile[data-index=\"${index}\"] textarea`).value;\n                let win = window.open();\n\n                win.document.write(`<iframe src=\"${content}\" frameborder=\"0\" style=\"border:0; top:0px; display:block; left:0px; bottom:0px; right:0px; width:100%; min-height: 100vh; height:100%;\" allowfullscreen></iframe>`)\n            });\n\n            // delete button\n            let deleteBtn = document.createElement('div');\n            deleteBtn.className = 'fileDelete';\n            deleteBtn.dataset.delete = parseInt(index);\n            deleteBtn.innerHTML = this._options.deleteButtonContent;\n            fileButtonsContainer.append(deleteBtn);\n            deleteBtn.addEventListener('click', (event) => {\n                this._fileDelete(event, {element: container});\n            });\n\n            //insert loading bars if requested\n            if (this._options.useLoadingBars) {\n                let classes = this._options.loadingBarsClasses;\n\n                if (classes.length > 0) {\n                    classes = classes.join(' ');\n                }\n\n                let currentLoadBar = document.createElement('div');\n                currentLoadBar.className = `loadBar ${classes}`;\n                currentLoadBar.appendChild(document.createElement('div'));\n                container.prepend(currentLoadBar);\n            }\n\n            let currentTitle = document.createElement('input');\n\n            // TODO translate placeholder\n            currentTitle.setAttribute('placeholder', 'nome');\n            currentTitle.className = 'fileTitle';\n\n            let currentExtension = document.createElement('div');\n\n            currentExtension.className = 'fileExt';\n            container.prepend(currentExtension);\n            container.prepend(currentTitle);\n\n            addMultipleListeners(currentTitle, ['keypress', 'keyup', 'paste'], function(event) {\n                event.data = {};\n                event.data.element = container;\n                event.data.start = this.selectionStart;\n                event.data.stop = this.selectionEnd;\n                instance._fileRename(event);\n            });\n\n            currentTitle.value = fileName;\n            currentExtension.innerHTML = fileExt;\n\n            return container;\n        };\n\n\n        this._createResultContainer = (fileData) => {\n            let index = fileData.index;\n            let resultElemContainer = document.createElement('div');\n\n            resultElemContainer.className = this._options.resultFileContainerClass;\n            resultElemContainer.dataset.index = index;\n            resultElemContainer.insertAdjacentHTML('beforeend', `<div>File: ${index}</div>`);\n            resultElemContainer.insertAdjacentHTML('beforeend', `<input type=\"text\" name=\"${this._options.resultPrefix}[${index}][${this._options.resultInputNames[0]}]\" value=\"${fileData.name}\" />`);\n            resultElemContainer.insertAdjacentHTML('beforeend', `<input type=\"text\" name=\"${this._options.resultPrefix}[${index}][${this._options.resultInputNames[1]}]\" value=\"${fileData.type}\" />`);\n            resultElemContainer.insertAdjacentHTML('beforeend', `<textarea name=\"${this._options.resultPrefix}[${index}][${this._options.resultInputNames[2]}]\">${fileData.result}</textarea>`);\n            resultElemContainer.insertAdjacentHTML('beforeend', `<input type=\"text\" name=\"${this._options.resultPrefix}[${index}][${this._options.resultInputNames[3]}]\" value=\"${fileData.size}\" />`);\n            $resultContainer.appendChild(resultElemContainer);\n        };\n\n\n        // files read function\n        this._filesRead = (event) => {\n            let DOM = event.data.DOM;\n            let filesList;\n            let approvedList = false;\n            let i = 0;\n\n            if (event.target.files) {\n                this._logger('files array source: file selector (click event)', 1);\n                filesList = event.target.files;\n            }\n            else {\n                this._logger('files array source: dropzone (drag & drop event)', 1);\n                filesList = event.dataTransfer.files;\n            }\n            this._logger('%O', 0, filesList);\n\n            // build approved list\n            if (!this._options.allowDuplicates) {\n                let loadedFiles = [];\n                let newFiles = [];\n\n                approvedList = [];\n\n                // build already loaded files list\n                for(let file of $resultContainer.children) {\n                    loadedFiles.push(file.querySelector('input').value);\n                };\n\n                // build current selected files list\n                for (i = 0; i < filesList.length; i++) {\n                    newFiles.push(filesList[i].name);\n                }\n\n                // avoid load twice the same file\n                newFiles.forEach(function(newFile) {\n                    let fileIndex = loadedFiles.indexOf(newFile);\n\n                    if (fileIndex < 0) {\n                        approvedList.push(newFile);\n                    }\n                });\n            }\n\n            $fileContainer.classList.remove('filesContainerEmpty');\n\n            let readFile = (reader, file, index, DOM) => {\n                let currentElement = Array.from(DOM.querySelector('.innerFileThumbs').children).filter(function(element) {\n                    return parseInt(element.dataset.index) === index ;\n                });\n                currentElement = currentElement[0];\n                let size = this._round(file.size / 1000000);      // size in MB\n\n                reader.onloadstart = () => {\n                    this._options.onfileloadStart(index);\n                    this._logger(`START read file: ${index}, size: ${size} MB`, 2);\n                };\n\n                reader.onprogress = (event) => {\n                    if (event.lengthComputable) {\n                        let percentLoaded = this._round((event.loaded / event.total) * 100);\n                        this._logger(`File ${index} loaded: ${percentLoaded}`, 3);\n\n                        // Increase the progress bar length.\n                        if (percentLoaded <= 100) {\n                            currentElement.querySelector(':scope > .loadBar > div').style.width = '100%';\n                        }\n                    }\n                };\n\n                reader.onloadend = () => {\n                    let type = file.type;\n                    let name = file.name;\n                    let result = reader.result;\n\n                    // reading unsuccessful\n                    if (!result) {\n                        return false;\n                    }\n\n                    let mimeType = result.substring(0, result.indexOf(';'));\n\n                    // if file has no MIME type, replace with default one\n                    if (mimeType === 'data:' && this._options.defaultMimeType.length > 0) {\n                        result = \"data:\" + this._options.defaultMimeType + result.substring(result.indexOf(';'), result.length);\n                    }\n                    if (type === \"\") {\n                        type = this._options.defaultMimeType;\n                    }\n                    if (name.indexOf('.') < 0 && this._options.defaultFileExt !== '') {\n                        name = `${name}.${this._options.defaultFileExt}`;\n                    }\n\n                    let newFile = {\n                        index: index,\n                        name: name,\n                        type: type,\n                        result: result,\n                        size: size\n                    };\n\n                    this._createResultContainer(newFile);\n\n                    //set direct link on file see button\n                    this._logger(`END read file: ${index}`, 4);\n\n                    let resultObject = {\n                        name: file.name,\n                        type: file.type,\n                        data: result,\n                        size: size\n                    };\n\n                    this._options.onfileloadEnd(index, resultObject, this._round(currentTotalSize), currentNumberOfFiles);\n                };\n\n                // test if loading is allowed\n                function readAllowed(instance) {\n                    reader.readAsDataURL(file);\n\n                    // update total size\n                    currentTotalSize = currentTotalSize + size;\n                    currentNumberOfFiles++;\n\n                    let currentAvailableSize = instance._round(instance._options.maxTotalSize - currentTotalSize);\n\n                    updateLabel('sizeAvailable', currentAvailableSize);\n                    updateLabel('currentSize', currentTotalSize);\n                    updateLabel('currentNumberOfFiles', currentNumberOfFiles);\n                    updateLabel('numberOfUploadedFiles', '++');\n                }\n\n                function readRejected(instance, reasons) {\n                    let errorMsg;\n\n                    for (let reason of reasons) {\n                        switch(reason) {\n                            case 'maxFileSize':\n                            errorMsg = currentLangObj.maxSizeExceeded_msg;\n                            instance._logger(`FILE REJECTED: Max file size exceeded - max size: ${instance._options.maxFileSize} MB - file size: ${size} MB`);\n                            break;\n    \n                            case 'maxTotalSize':\n                            errorMsg = currentLangObj.maxTotalSizeExceeded_msg;\n                            instance._logger(`FILE REJECTED: Max total size exceeded - max size: ${instance._options.maxTotalSize} MB - current total size: ${currentTotalSize + size} MB`);\n                            break;\n    \n                            case 'maxNumberOfFiles':\n                            errorMsg = currentLangObj.maxNumberOfFilesExceeded_msg;\n                            instance._logger(`FILE REJECTED: Max number of files exceeded - max number: ${instance._options.maxNumberOfFiles}`);\n                            break;\n                        }\n                    }\n\n                    currentElement.classList.add('error');\n\n                    if (instance._options.showErrorOnLoadBar) {\n                        let loadBar = currentElement.querySelector(':scope > .loadBar');\n                        loadBar.innerHTML = '';\n                        loadBar.insertAdjacentHTML('beforeend', `<div class=\"errorMsg\">${errorMsg}</div>`)\n                    }\n\n                    setTimeout(() => {\n                        if (instance._options.useFileIcons) {\n                            currentElement.getPreviousSibling('img').remove();\n                        }\n                        currentElement.remove();\n                    }, 2000);\n\n                    updateLabel('numberOfRejectedFiles', '++');\n\n                    // error callback\n                    instance._options.onFileRejected(rejectReasons);\n                }\n                \n                let isReadAllowed = true;\n                let rejectReasons = [];\n\n                if (this._options.maxFileSize && size > this._options.maxFileSize) {\n                    isReadAllowed = false;\n                    rejectReasons.push('maxFileSize');\n                }\n                if (this._options.maxTotalSize && (currentTotalSize + size) > this._options.maxTotalSize) {\n                    isReadAllowed = false;\n                    rejectReasons.push('maxTotalSize');\n                }\n                if (this._options.maxNumberOfFiles && currentNumberOfFiles >= this._options.maxNumberOfFiles) {\n                    isReadAllowed = false;\n                    rejectReasons.push('maxNumberOfFiles');\n                }\n\n                isReadAllowed ? readAllowed(this) : readRejected(this, rejectReasons);\n            }\n\n            let innerFileThumbsElements = document.querySelector('.innerFileThumbs').children;\n            let lastThumbElement = innerFileThumbsElements[innerFileThumbsElements.length - 1];\n            let startIndex = lastThumbElement ? lastThumbElement.getAttribute('index') : 0;\n\n            function appendMessage($message) {\n                setTimeout(() => {\n                    $message.remove();\n                }, 2000);\n            }\n\n            // create a new div containing thumb, delete button and title field for each target file\n            for (i = 0; i < filesList.length; i++) {\n                let file = filesList[i];\n                let reader = new FileReader();\n\n                // test for duplicates\n                if (approvedList && approvedList.indexOf(file.name) < 0) {\n                    if (this._options.duplicatesWarning) {\n                        let $info = document.createElement('div');\n                        $info.className = 'errorLabel center';\n\n                        $info.innerHTML = currentLangObj.duplicated_msg;\n                        $fileThumbsContainer.appendChild($info);\n                        appendMessage($info);\n                    }\n\n                    this._logger(`File duplicated: ${file.name} -> skipping...`, 2);\n                    continue;\n                }\n\n                let fileName, fileExt;\n\n                if (file.name.lastIndexOf('.') > 0) {\n                    fileName = file.name.substring(0, file.name.lastIndexOf('.'));\n                    fileExt = file.name.substring(file.name.lastIndexOf('.') + 1, file.name.length);\n                }\n                else {\n                    fileName = file.name;\n                    fileExt = this._options.defaultFileExt;\n                }\n\n                // test for filenames\n                let nameTest = this._options.filenameTest(fileName, fileExt, $fileThumbsContainer);\n                if (nameTest === false) {\n                    this._logger(`Invalid file name: ${file.name}`, 2);\n                    continue;\n                }\n                else {\n                    if (nameTest !== undefined && nameTest !== true) {\n                        fileName = nameTest;\n                    }\n                }\n\n                this._createUploaderContainer(globalIndex, fileName, fileExt);\n\n                // now read!\n                readFile(reader, file, globalIndex, DOM);\n                globalIndex++;\n            }\n        };\n\n        /*\n        *  -------------------------------------------------------------\n        *  |                       MAIN FLOW                           |\n        *  -------------------------------------------------------------\n        */\n        // initialization\n        if (this._options.name) {\n            this._logger('INITIALIZED INSTANCE: ' + this._options.name);\n        }\n        // build HTML template\n        let template = this._options.HTMLTemplate();\n\n        $el.insertAdjacentHTML('beforeend', template);\n\n        let globalIndex = 0;\n        let $resultContainer = $el.querySelector('.' + this._options.resultContainerClass);\n        let $loadBtn = $el.querySelector('.fileLoader');\n        let $fileContainer = $el.querySelector('.filesContainer');\n        let $fileThumbsContainer = $el.querySelector('.innerFileThumbs');\n        let dropZone = $el.querySelector('.dropZone');\n        let currentLangObj = this._options.langs[this._options.lang];\n        let currentTotalSize = 0;\n        let currentNumberOfFiles = 0;\n        let loadedFile;\n        let instanceLabels = {};\n        let labelsClasses = this._options.labelsClasses;\n\n        // place reloaded files' HTML in result container directly (if provided)\n        if (this._options.reloadHTML) {\n            $resultContainer.innerHTML = this._options.reloadHTML;\n        }\n\n\n        $el.querySelector('.introMsg').innerHTML = currentLangObj.intro_msg;\n        dropZone.innerHTML = currentLangObj.dropZone_msg;\n\n        if (!this._options.debug) {\n            $resultContainer.classList.add('hide');\n        }\n        else {\n            $resultContainer.insertAdjacentHTML('beforebegin', '<p class=\"debugMode\">Debug mode: on</p>');\n            $resultContainer.insertAdjacentHTML('beforebegin', `<div class=\"debug\">Uploaded files: <span class=\"${labelsClasses.numberOfUploadedFiles}\"><span>0</span></span> | Rejected files: <span class=\"${labelsClasses.numberOfRejectedFiles}\"><span>0</span></span></div>`);\n            $resultContainer.insertAdjacentHTML('beforebegin', `<div class=\"debug\">MAX FILE SIZE: ${this._options.maxFileSize} MB</div>`);\n            $resultContainer.insertAdjacentHTML('beforebegin', `<div class=\"debug\">MAX TOTAL SIZE: ${this._options.maxTotalSize} MB</div>`);\n            $resultContainer.insertAdjacentHTML('beforebegin', `<div class=\"debug\">MAX NUMBER OF FILES: ${this._options.maxNumberOfFiles === false ? '(none)' : this._options.maxNumberOfFiles}</div>`);\n            $resultContainer.insertAdjacentHTML('beforebegin', `<div class=\"debug currentNumberOfFiles\">Number of files uploaded: <span>${currentNumberOfFiles}</span></div>`);\n            $resultContainer.insertAdjacentHTML('beforebegin', `<div class=\"debug sizeAvailable\">Size still available: <span>${this._options.maxTotalSize}</span> MB</div>`);\n        }\n\n        // --- FILES RELOAD SECTION ---\n        // lookup for previously loaded files placed in the result container directly        \n        for (let label in labelsClasses) {\n            instanceLabels[`${label}Labels`] = [];\n        }\n\n        let labelsContainers = this._options.labelsContainers;\n\n        if (this._options.debug) {\n            // handle debug dynamic (labels with a static value don't need to be cached) labels\n            instanceLabels.sizeAvailableLabels.push($el.querySelector(`.${labelsClasses.sizeAvailable}`));\n            instanceLabels.currentNumberOfFilesLabels.push($el.querySelector(`.${labelsClasses.currentNumberOfFiles}`));\n            instanceLabels.numberOfUploadedFilesLabels.push($el.querySelector(`.${labelsClasses.numberOfUploadedFiles}`));\n            instanceLabels.numberOfRejectedFilesLabels.push($el.querySelector(`.${labelsClasses.numberOfRejectedFiles}`));\n        }\n        if (labelsContainers) {\n            const getContainer = function(selector) {\n                return document.querySelector(selector);\n            }\n\n            for (let label in labelsClasses) {\n                function findLabel(container, labelsClasses, label) {\n                    if (container) {\n                        let labels = container.querySelector(`.${labelsClasses[label]}`);\n                        \n                        if (labels) {\n                            instanceLabels[`${label}Labels`].push(labels);\n                        }\n                    }\n                    else {\n                        this._logger(`impossible to find labelContainer '${selector}'`, 1);\n                    }\n                }\n\n                if (Array.isArray(labelsContainers)) {\n                    for (let selector of labelsContainers) {\n                        let container = getContainer(selector);\n    \n                        findLabel(container, labelsClasses, label);\n                    }\n                }\n                else {\n                    let container = getContainer(labelsContainers);\n    \n                    if (container) {\n                        let labels = container.querySelector(`.${labelsClasses[label]}`);\n\n                        if (labels) {\n                            instanceLabels[`${label}Labels`].push(labels);\n                        }\n                    }\n                    else {\n                        this._logger(`impossible to find labelContainer '${labelsContainers}'`, 1);\n                    }\n                }\n            }\n        }\n\n        updateLabel('maxFileSize', this._options.maxFileSize);\n        updateLabel('maxTotalSize', this._options.maxTotalSize);\n        updateLabel('maxNumberOfFiles', this._options.maxNumberOfFiles);\n\n        for (const [index, element] of $resultContainer.querySelectorAll(`:scope > .${this._options.resultFileContainerClass}`).entries()) {\n            this._logger(`found previously uploaded file: index = ${element.dataset.index}`, 2);\n\n            // pay attention to index used on fileData here: index 0 is the title DIV!\n            let fileData = element.querySelectorAll(':scope > input');\n            let fileName = fileData[0].value;\n            let fileExt = fileData[1].value;\n            let fileSize = fileData[3].value;\n\n            if (fileName.lastIndexOf('.') > 0) {\n                fileName = fileName.substr(0, fileName.lastIndexOf('.'));\n            }\n\n            loadedFile = this._createUploaderContainer(globalIndex, fileName, fileExt);\n            loadedFile.querySelector(':scope > .loadBar > div').style.width = '100%';\n            loadedFile.classList.add(this._options.reloadedFilesClass);\n\n            currentTotalSize = currentTotalSize + parseFloat(fileSize);\n            currentNumberOfFiles++;\n            globalIndex++;\n        }\n\n        // reload files from provided array\n        if (this._options.reloadArray.length > 0) {\n            this._options.reloadArray.forEach((file, index) => {\n                // re-create visible elements\n                loadedFile = this._createUploaderContainer(index, file.name, file.ext);\n                loadedFile.querySelector(':scope > .loadBar > div').style.width = '100%';\n                loadedFile.classList.add(this._options.reloadedFilesClass);\n\n                this._logger('found previously uploaded file: index = ' + index, 2);\n\n                // re-create results\n                let newFile = {\n                    index: index,\n                    name: file.name,\n                    type: file.ext,\n                    result: file.data,\n                    size: file.size\n                };\n\n                this._createResultContainer(newFile);\n\n                currentTotalSize = currentTotalSize + parseFloat(file.size);\n                currentNumberOfFiles++;\n                globalIndex++;\n            });\n        }\n\n        currentTotalSize = this._round(currentTotalSize);\n\n        this._logger(`current total size: ${currentTotalSize} - current number of files: ${currentNumberOfFiles}`);\n        updateLabel('sizeAvailable', (this._options.maxTotalSize - currentTotalSize));\n        updateLabel('currentSize', currentTotalSize);\n        updateLabel('currentNumberOfFiles', currentNumberOfFiles);\n        updateLabel('numberOfUploadedFiles', currentNumberOfFiles);\n        updateLabel('numberOfRejectedFiles', '0');\n        // --- END FILES RELOAD SECTION ---\n\n        // onload callback\n        this._options.onload(this._options, currentTotalSize, currentNumberOfFiles);\n\n        // Drag events\n        this.handleDragOver = (event) => {\n            dropZone.classList.add('highlight');\n            event.stopPropagation();\n            event.preventDefault();\n            event.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.\n        }\n        this.handleDrop = (event) => {\n            dropZone.classList.remove('highlight');\n            event.data = {\n                DOM: $el\n            };\n            this._filesRead(event);\n        }\n\n        dropZone.addEventListener('dragleave', () => {\n            dropZone.classList.remove('highlight');\n        });\n        dropZone.addEventListener('dragover', this.handleDragOver);\n        dropZone.addEventListener('drop', () => {\n            event.stopPropagation();\n            event.preventDefault();\n            this.handleDrop(event);\n        });\n\n        dropZone.addEventListener('click', (event) => {\n            $loadBtn.click();\n        });\n\n        $loadBtn.addEventListener('change', (event) => {\n            event.data = {\n                DOM: $el\n            };\n            this._filesRead(event);\n            this.value = null;\n        });\n\n        return {\n            fileUploader: instance,\n            elementDOM: $el\n        };\n    };\n})(window);\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.deepmerge = factory());\n}(this, (function () { 'use strict';\n\nvar isMergeableObject = function isMergeableObject(value) {\n\treturn isNonNullObject(value)\n\t\t&& !isSpecial(value)\n};\n\nfunction isNonNullObject(value) {\n\treturn !!value && typeof value === 'object'\n}\n\nfunction isSpecial(value) {\n\tvar stringValue = Object.prototype.toString.call(value);\n\n\treturn stringValue === '[object RegExp]'\n\t\t|| stringValue === '[object Date]'\n\t\t|| isReactElement(value)\n}\n\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\nfunction isReactElement(value) {\n\treturn value.$$typeof === REACT_ELEMENT_TYPE\n}\n\nfunction emptyTarget(val) {\n\treturn Array.isArray(val) ? [] : {}\n}\n\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n\treturn (options.clone !== false && options.isMergeableObject(value))\n\t\t? deepmerge(emptyTarget(value), value, options)\n\t\t: value\n}\n\nfunction defaultArrayMerge(target, source, options) {\n\treturn target.concat(source).map(function(element) {\n\t\treturn cloneUnlessOtherwiseSpecified(element, options)\n\t})\n}\n\nfunction getMergeFunction(key, options) {\n\tif (!options.customMerge) {\n\t\treturn deepmerge\n\t}\n\tvar customMerge = options.customMerge(key);\n\treturn typeof customMerge === 'function' ? customMerge : deepmerge\n}\n\nfunction mergeObject(target, source, options) {\n\tvar destination = {};\n\tif (options.isMergeableObject(target)) {\n\t\tObject.keys(target).forEach(function(key) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n\t\t});\n\t}\n\tObject.keys(source).forEach(function(key) {\n\t\tif (!options.isMergeableObject(source[key]) || !target[key]) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n\t\t} else {\n\t\t\tdestination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n\t\t}\n\t});\n\treturn destination\n}\n\nfunction deepmerge(target, source, options) {\n\toptions = options || {};\n\toptions.arrayMerge = options.arrayMerge || defaultArrayMerge;\n\toptions.isMergeableObject = options.isMergeableObject || isMergeableObject;\n\n\tvar sourceIsArray = Array.isArray(source);\n\tvar targetIsArray = Array.isArray(target);\n\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n\tif (!sourceAndTargetTypesMatch) {\n\t\treturn cloneUnlessOtherwiseSpecified(source, options)\n\t} else if (sourceIsArray) {\n\t\treturn options.arrayMerge(target, source, options)\n\t} else {\n\t\treturn mergeObject(target, source, options)\n\t}\n}\n\ndeepmerge.all = function deepmergeAll(array, options) {\n\tif (!Array.isArray(array)) {\n\t\tthrow new Error('first argument should be an array')\n\t}\n\n\treturn array.reduce(function(prev, next) {\n\t\treturn deepmerge(prev, next, options)\n\t}, {})\n};\n\nvar deepmerge_1 = deepmerge;\n\nreturn deepmerge_1;\n\n})));\n"]}