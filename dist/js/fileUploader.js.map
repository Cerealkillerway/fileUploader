{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js/fileUploader.js","node_modules/deepmerge/dist/umd.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","_deepmerge","window","FileUploader","$el","options","_this","this","instance","_defaults","lang","useFileIcons","debug","debugLogStyle","name","undefined","pluginName","useLoadingBars","loadingBarsClasses","reloadedFilesClass","resultContainerClass","resultFileContainerClass","resultPrefix","resultInputNames","defaultFileExt","defaultMimeType","maxFileSize","maxTotalSize","maxNumberOfFiles","reloadArray","reloadHTML","linkButtonContent","deleteButtonContent","allowDuplicates","duplicatesWarning","labelsContainers","labelsClasses","sizeAvailable","currentSize","HTMLTemplate","onload","onfileloadStart","onfileloadEnd","onfileDelete","filenameTest","langs","en","intro_msg","dropZone_msg","maxSizeExceeded_msg","maxTotalSizeExceeded_msg","duplicated_msg","name_placeHolder","updateLabel","type","value","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","instanceLabels","concat","Symbol","iterator","next","done","querySelector","innerHTML","err","_options","_round","Math","round","get","parameter","currentTotalSize","_logger","message","level","data","console","log","_fileType","fileName","ext","substring","lastIndexOf","indexOf","_fileDelete","event","element","index","target","dataset","closest","selector","sibling","previousElementSibling","matches","getPreviousSibling","remove","fileSize","$resultContainer","currentNumberOfFiles","availableSize","document","children","classList","add","_fileRename","$this","text","$input","nameTest","$fileThumbsContainer","preventDefault","setSelectionRange","start","stop","getData","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","querySelectorAll","inputs","file","title","push","_createUploaderContainer","fileExt","currentThumb","insertAdjacentHTML","container","createElement","className","parseInt","style","position","appendChild","fileButtonsContainer","seeFileLink","addEventListener","content","open","write","deleteBtn","append","classes","join","currentLoadBar","prepend","currentTitle","setAttribute","currentExtension","events","handler","Array","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","_event","addMultipleListeners","selectionStart","selectionEnd","_createResultContainer","fileData","resultElemContainer","result","size","_filesRead","filesList","DOM","approvedList","files","dataTransfer","loadedFiles","newFiles","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","forEach","newFile","$fileContainer","readFile","reader","currentElement","from","filter","onloadstart","onprogress","lengthComputable","percentLoaded","loaded","total","width","onloadend","debugUploaded","getElementById","totalUploaded","resultObject","readAsDataURL","currentAvailableSize","readAllowed","errorMsg","currentLangObj","loadBar","setTimeout","debugRejected","totalRejected","readRejected","innerFileThumbsElements","startIndex","getAttribute","appendMessage","$message","_file","FileReader","$info","globalIndex","template","$loadBtn","dropZone","label","sizeAvailableLabels","getContainer","_label","findLabel","labels","isArray","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","_container","loadedFile","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","entries","_step6$value","_slicedToArray","substr","parseFloat","handleDragOver","stopPropagation","dropEffect","handleDrop","click","fileUploader","elementDOM","global","factory","isMergeableObject","isNonNullObject","stringValue","Object","prototype","toString","$$typeof","REACT_ELEMENT_TYPE","isReactElement","isSpecial","for","cloneUnlessOtherwiseSpecified","clone","deepmerge","val","emptyTarget","defaultArrayMerge","source","map","mergeObject","destination","keys","key","customMerge","getMergeFunction","arrayMerge","sourceIsArray","all","array","reduce","prev","define","amd"],"mappings":"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","file":"fileUploader.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import deepMerge from 'deepmerge';\nimport { read } from 'fs';\n\n\n/*\n* fileUploader v5.3.0\n* Licensed under MIT (https://raw.githubusercontent.com/Cerealkillerway/fileUploader/master/license.txt)\n*/\n(function(context) {\n    context.FileUploader = function($el, options) {\n        let instance = this;\n\n        // default options\n        this._defaults = {\n            lang: 'en',\n            useFileIcons: true,\n\n            debug: false,                                                  // activate console logs for debug\n            debugLogStyle: 'color: #9900ff',                               // css style for debug console logs in js console\n            name: undefined,                                               // a name for plugin's instance (useful for debug purposes)\n            pluginName: 'FileUploader',                                    // plugin's name (used in debug logs alongside with name)\n\n            useLoadingBars: true,                                          // insert loading bar for files\n            loadingBarsClasses: [],                                        // array of strings for classnames for loading bars\n            reloadedFilesClass: 'reloadedElement',                         // class for previously uploaded files\n            resultContainerClass: 'result',                                // result container's class (where to place result files data)\n            resultFileContainerClass: 'uploadedFile',                      // class for every file result container span\n            resultPrefix: 'fileUploader',                                  // prefix for inputs in the file result container\n            resultInputNames: ['title', 'extension', 'value', 'size'],     // name suffix to be used for result inputs\n            defaultFileExt: '',                                            // extension to use for files with no extension\n            defaultMimeType: '',                                           // MIME type to use for files with no extension\n            maxFileSize: 50,                                               // maximum allowed file size (in MB)\n            maxTotalSize: 1000,                                            // total maximum allowed size of all files\n            maxNumberOfFiles: false,                                       // maximum number of files allowed to upload\n            reloadArray: [],                                               // array of files to be reloaded at plugin startup\n            reloadHTML: undefined,                                         // HTML for reloaded files to place directly in result container\n            linkButtonContent: 'L',                                        // HTML content for link button\n            deleteButtonContent: 'X',                                      // HTML content for delete button\n            allowDuplicates: false,                                        // allow upload duplicates\n            duplicatesWarning: false,                                      // show a message in the loading area when trying to load a duplicated file\n            labelsContainers: false,                                       // query selector for the container where to look for labels (ex. '#myId'), (default 'false' -> no labels;\n                                                                           // can be a string for a single value, or an array if the plugin has to update labels in many places;\n            //sizeAvailableLabelClass: 'sizeAvailable',                      // class for the sizeAvailable label\n            labelsClasses: {\n                sizeAvailable: 'sizeAvailable',\n                currentSize: 'currentSize',\n                maxFileSize: 'maxFileSize',\n                maxTotalSize: 'maxTotalSize'\n            },\n\n            HTMLTemplate: () => {\n                return `<p class=\"introMsg\"></p>\n                    <div>\n                        <div class=\"inputContainer\">\n                            <input class=\"fileLoader\" type=\"file\" multiple />\n                        </div>\n                        <div class=\"dropZone\"></div>\n                        <div class=\"filesContainer filesContainerEmpty\">\n                            <div class=\"innerFileThumbs\"></div>\n                            <div style=\"clear:both;\"></div>\n                        </div>\n                    </div>\n                    <div class=\"result\"></div>`;\n            },\n\n            onload: () => {},                                         // callback on plugin initialization\n            onfileloadStart: () => {},                                // callback on file reader start\n            onfileloadEnd: () => {},                                  // callback on file reader end\n            onfileDelete: () => {},                                   // callback on file delete\n            filenameTest: () => {},                                   // callback for testing filenames\n\n            langs: {\n                'en': {\n                    intro_msg: '(Add attachments...)',\n                    dropZone_msg: 'Drop your files here',\n                    maxSizeExceeded_msg: 'File too large',\n                    maxTotalSizeExceeded_msg: 'Total size exceeded',\n                    duplicated_msg: 'File duplicated (skipped)',\n                    name_placeHolder: 'name',\n                }\n            }\n        };\n\n\n        // UTILITIES\n        const addMultipleListeners = function (element, events, handler) {\n            if (!(events instanceof Array)) {\n                this._logger('addMultipleListeners requires events to be an array');\n            }\n            for (const event of events) {\n                element.addEventListener(event, handler);\n            }\n        }\n\n        const getPreviousSibling = function(element, selector) {\n            let sibling = element.previousElementSibling;\n\n            if (!selector) return sibling;\n\n            while (sibling) {\n                if (sibling.matches(selector)) {\n                    return sibling;\n                }\n                sibling = sibling.previousElementSibling;\n            }\n        };\n\n        const updateLabel = function(type, value) {\n            for (let label of instanceLabels[`${type}Labels`]) {\n                label.querySelector(':scope > span').innerHTML = value;\n            }\n        }\n\n\n        // extend options with instance ones\n        this._options = deepMerge(this._defaults, options);\n\n\n        // add more options\n        this.options = (options) => {\n            return (options) ? deepMerge(this._options, options) : this._options;\n        };\n\n\n        // round number\n        this._round = (value) => {\n            return Math.round(value * 100) / 100;\n        };\n\n\n        // return data\n        this.get = (parameter) => {\n            switch (parameter) {\n                case 'currentTotalSize':\n                return this._round(currentTotalSize);\n\n                case 'currentAvailableSize':\n                return this._round(this._options.maxTotalSize - currentTotalSize);\n            }\n        };\n\n\n        // debug logs function\n        this._logger = (message, level, data) => {\n            if (this._options.debug) {\n                if (level) {\n                    for (let i = 0; i < level; i++) {\n                        message = '\\u27A1 ' + message;\n                    }\n                }\n                if (this._options.name) {\n                    message = '[' + this._options.pluginName + ' - ' + this._options.name + '] ' + message;\n                }\n\n                if (data) {\n                    console.log('%c ' + message, this._options.debugLogStyle, data);\n                }\n                else {\n                    console.log('%c ' + message, this._options.debugLogStyle);\n                }\n            }\n        };\n\n\n        // file type identificator\n        this._fileType = (fileName) => {\n            let ext = fileName.substring(fileName.lastIndexOf('.') + 1, fileName.length);\n            let icons = ['pdf', 'jpg', 'png'];\n\n            if (icons.indexOf(ext) >= 0) {\n                return ext;\n            }\n            else {\n                return 'unknown-file';\n            }\n        };\n\n\n        // method for deleting a reader's result from result container\n        this._fileDelete = (event, data) => {\n            let element = data.element;\n            let index = event.target.dataset.delete;\n\n            if (!index) {\n                index = event.target.closest('div[data-delete]').dataset.delete;\n            }\n\n            // remove file block\n            if (this._options.useFileIcons) {\n                getPreviousSibling(element, 'img').remove();\n            }\n            element.remove();\n\n            // get file size\n            let fileSize = $resultContainer.querySelector(`input[name=\"${this._options.resultPrefix}[${index}][${this._options.resultInputNames[3]}]\"]`).value;\n\n            fileSize = this._round(fileSize);\n            currentTotalSize = this._round(currentTotalSize - fileSize);\n            currentNumberOfFiles--;\n\n            let availableSize = this._options.maxTotalSize - currentTotalSize;\n\n            availableSize = this._round(availableSize);\n            updateLabel('sizeAvailable', availableSize);\n            updateLabel('currentSize', currentTotalSize);\n\n            // remove result block\n            $resultContainer.querySelector(`:scope > div[data-index=\"${index}\"]`).remove();\n\n            if (document.querySelector('.innerFileThumbs').children.length === 0) {\n                document.querySelector('.filesContainer').classList.add('filesContainerEmpty');\n            }\n\n            this._logger('Deleted file N: ' + index, 2);\n            this._options.onfileDelete(index, currentTotalSize);\n        };\n\n\n        // method to rename file in result container accordingly to modifications by user\n        this._fileRename = (event) => {\n            let element = event.data.element;\n            let $this = event.target;\n            let ext = element.querySelector(':scope > .fileExt').innerHTML;\n            let text = $this.value;\n            let index = element.dataset.index;\n            let $input = $resultContainer.querySelector(`div[data-index=\"${index}\"] input`);\n            let nameTest = this._options.filenameTest(text, ext, $fileThumbsContainer);\n\n            if (nameTest === false) {\n                event.preventDefault();\n                return false;\n            }\n            if (nameTest !== undefined && nameTest !== true) {\n                text = nameTest;\n                $this.value = text;\n\n                // update input\n                /*if (ext.length > 0) {\n                    text = `${text}.${ext}`;\n                }*/\n\n                $input.value = text;\n                // restore selection range\n                $this.setSelectionRange(event.data.start, event.data.stop);\n            }\n        };\n\n\n        this.getData = () => {\n            let data = [];\n\n            this._logger('RECEIVED SAVE COMMAND:', 0);\n\n            for (const element of $resultContainer.querySelectorAll(`:scope > .${this._options.resultFileContainerClass}`)) {\n                let inputs = element.querySelectorAll(':scope > input');\n                let file = {\n                    title: inputs[0].value,\n                    ext: inputs[1].value,\n                    value: inputs[2].value\n                };\n\n                data.push(file);\n            }\n\n            this._logger('%O', 0 ,data);\n            return data;\n        };\n\n\n        // create container for file uploading elements (icon, progress bar, etc...)\n        this._createUploaderContainer = (index, fileName, fileExt) => {\n            //insert file icon if requested\n            if (this._options.useFileIcons) {\n                let currentThumb = `<img src=\"/images/${this._fileType(fileExt)}.png\" class=\"fileThumb\" />`;\n                $fileThumbsContainer.insertAdjacentHTML('beforeend', currentThumb);\n            }\n\n            let container = document.createElement('div');\n            container.className = 'newElement';\n            container.dataset.index = parseInt(index);\n            container.style.position = 'relative';\n            $fileThumbsContainer.appendChild(container);\n\n            let fileButtonsContainer = document.createElement('div');\n            fileButtonsContainer.className = 'fileActions';\n            container.appendChild(fileButtonsContainer);\n\n            // file \"see\" link\n            let seeFileLink = document.createElement('div');\n            seeFileLink.className = 'fileSee';\n            seeFileLink.innerHTML = this._options.linkButtonContent;\n            fileButtonsContainer.appendChild(seeFileLink);\n\n            seeFileLink.addEventListener('click', function(event) {\n                let index = event.target.closest('.newElement').dataset.index;\n                let content = $resultContainer.querySelector(`.uploadedFile[data-index=\"${index}\"] textarea`).value;\n                let win = window.open();\n\n                win.document.write(`<iframe src=\"${content}\" frameborder=\"0\" style=\"border:0; top:0px; display:block; left:0px; bottom:0px; right:0px; width:100%; min-height: 100vh; height:100%;\" allowfullscreen></iframe>`)\n            });\n\n            // delete button\n            let deleteBtn = document.createElement('div');\n            deleteBtn.className = 'fileDelete';\n            deleteBtn.dataset.delete = parseInt(index);\n            deleteBtn.innerHTML = this._options.deleteButtonContent;\n            fileButtonsContainer.append(deleteBtn);\n            deleteBtn.addEventListener('click', (event) => {\n                this._fileDelete(event, {element: container});\n            });\n\n            //insert loading bars if requested\n            if (this._options.useLoadingBars) {\n                let classes = this._options.loadingBarsClasses;\n\n                if (classes.length > 0) {\n                    classes = classes.join(' ');\n                }\n\n                let currentLoadBar = document.createElement('div');\n                currentLoadBar.className = `loadBar ${classes}`;\n                currentLoadBar.appendChild(document.createElement('div'));\n                container.prepend(currentLoadBar);\n            }\n\n            let currentTitle = document.createElement('input');\n\n            // TODO translate placeholder\n            currentTitle.setAttribute('placeholder', 'nome');\n            currentTitle.className = 'fileTitle';\n\n            let currentExtension = document.createElement('div');\n\n            currentExtension.className = 'fileExt';\n            container.prepend(currentExtension);\n            container.prepend(currentTitle);\n\n            addMultipleListeners(currentTitle, ['keypress', 'keyup', 'paste'], function(event) {\n                event.data = {};\n                event.data.element = container;\n                event.data.start = this.selectionStart;\n                event.data.stop = this.selectionEnd;\n                instance._fileRename(event);\n            });\n\n            currentTitle.value = fileName;\n            currentExtension.innerHTML = fileExt;\n\n            return container;\n        };\n\n\n        this._createResultContainer = (fileData) => {\n            let index = fileData.index;\n            let resultElemContainer = document.createElement('div');\n\n            resultElemContainer.className = this._options.resultFileContainerClass;\n            resultElemContainer.dataset.index = index;\n            resultElemContainer.insertAdjacentHTML('beforeend', `<div>File: ${index}</div>`);\n            resultElemContainer.insertAdjacentHTML('beforeend', `<input type=\"text\" name=\"${this._options.resultPrefix}[${index}][${this._options.resultInputNames[0]}]\" value=\"${fileData.name}\" />`);\n            resultElemContainer.insertAdjacentHTML('beforeend', `<input type=\"text\" name=\"${this._options.resultPrefix}[${index}][${this._options.resultInputNames[1]}]\" value=\"${fileData.type}\" />`);\n            resultElemContainer.insertAdjacentHTML('beforeend', `<textarea name=\"${this._options.resultPrefix}[${index}][${this._options.resultInputNames[2]}]\">${fileData.result}</textarea>`);\n            resultElemContainer.insertAdjacentHTML('beforeend', `<input type=\"text\" name=\"${this._options.resultPrefix}[${index}][${this._options.resultInputNames[3]}]\" value=\"${fileData.size}\" />`);\n            $resultContainer.appendChild(resultElemContainer);\n        };\n\n\n        // files read function\n        this._filesRead = (event) => {\n            let DOM = event.data.DOM;\n            let filesList;\n            let approvedList = false;\n            let i = 0;\n\n            if (event.target.files) {\n                this._logger('files array source: file selector (click event)', 1);\n                filesList = event.target.files;\n            }\n            else {\n                this._logger('files array source: dropzone (drag & drop event)', 1);\n                filesList = event.dataTransfer.files;\n            }\n            this._logger('%O', 0, filesList);\n\n            // build approved list\n            if (!this._options.allowDuplicates) {\n                let loadedFiles = [];\n                let newFiles = [];\n\n                approvedList = [];\n\n                // build already loaded files list\n                for(let file of $resultContainer.children) {\n                    loadedFiles.push(file.querySelector('input').value);\n                };\n\n                // build current selected files list\n                for (i = 0; i < filesList.length; i++) {\n                    newFiles.push(filesList[i].name);\n                }\n\n                // avoid load twice the same file\n                newFiles.forEach(function(newFile) {\n                    let fileIndex = loadedFiles.indexOf(newFile);\n\n                    if (fileIndex < 0) {\n                        approvedList.push(newFile);\n                    }\n                });\n            }\n\n            $fileContainer.classList.remove('filesContainerEmpty');\n\n            let readFile = (reader, file, index, DOM) => {\n                let currentElement = Array.from(DOM.querySelector('.innerFileThumbs').children).filter(function(element) {\n                    return parseInt(element.dataset.index) === index ;\n                });\n                currentElement = currentElement[0];\n                let size = this._round(file.size / 1000000);      // size in MB\n\n                reader.onloadstart = () => {\n                    this._options.onfileloadStart(index);\n                    this._logger(`START read file: ${index}, size: ${size} MB`, 2);\n                };\n\n                reader.onprogress = (event) => {\n                    if (event.lengthComputable) {\n                        let percentLoaded = this._round((event.loaded / event.total) * 100);\n                        this._logger(`File ${index} loaded: ${percentLoaded}`, 3);\n\n                        // Increase the progress bar length.\n                        if (percentLoaded <= 100) {\n                            currentElement.querySelector(':scope > .loadBar > div').style.width = '100%';\n                        }\n                    }\n                };\n\n                reader.onloadend = () => {\n                    let type = file.type;\n                    let name = file.name;\n                    let result = reader.result;\n\n                    // reading unsuccessful\n                    if (!result) {\n                        return false;\n                    }\n\n                    let mimeType = result.substring(0, result.indexOf(';'));\n\n                    // if file has no MIME type, replace with default one\n                    if (mimeType === 'data:' && this._options.defaultMimeType.length > 0) {\n                        result = \"data:\" + this._options.defaultMimeType + result.substring(result.indexOf(';'), result.length);\n                    }\n                    if (type === \"\") {\n                        type = this._options.defaultMimeType;\n                    }\n                    if (name.indexOf('.') < 0 && this._options.defaultFileExt !== '') {\n                        name = `${name}.${this._options.defaultFileExt}`;\n                    }\n\n                    let newFile = {\n                        index: index,\n                        name: name,\n                        type: type,\n                        result: result,\n                        size: size\n                    };\n\n                    this._createResultContainer(newFile);\n\n                    //set direct link on file see button\n                    this._logger(`END read file: ${index}`, 4);\n\n                    let debugUploaded = document.getElementById('debugUploaded');\n                    let totalUploaded = parseInt(debugUploaded.innerHTML) + 1;\n\n                    debugUploaded.innerHTML = totalUploaded;\n\n                    let resultObject = {\n                        name: file.name,\n                        type: file.type,\n                        data: result,\n                        size: size\n                    };\n\n                    this._options.onfileloadEnd(index, resultObject, this._round(currentTotalSize));\n                };\n\n                // test if loading is allowed\n                function readAllowed(instance) {\n                    reader.readAsDataURL(file);\n\n                    // update total size\n                    currentTotalSize = currentTotalSize + size;\n                    currentNumberOfFiles++;\n\n                    let currentAvailableSize = instance._round(instance._options.maxTotalSize - currentTotalSize);\n\n                    updateLabel('sizeAvailable', currentAvailableSize);\n                    updateLabel('currentSize', currentTotalSize);\n                }\n                function readRejected(instance) {\n                    let errorMsg = currentLangObj.maxTotalSizeExceeded_msg;\n\n                    if (size > instance._options.maxFileSize) {\n                        errorMsg = currentLangObj.maxSizeExceeded_msg;\n                        instance._logger(`FILE REJECTED: Max size exceeded - max size: ${instance._options.maxFileSize} MB - file size: ${size} MB`);\n                    }\n                    else {\n                        instance._logger(`FILE REJECTED: Max total size exceeded - max size: ${instance._options.maxTotalSizeExceeded_msg} MB - current total size: ${currentTotalSize + size} MB`);\n                    }\n\n                    currentElement.classList.add('error');\n\n                    let loadBar = currentElement.querySelector(':scope > .loadBar');\n                    loadBar.innerHTML = '';\n                    loadBar.insertAdjacentHTML('beforeend', `<div class=\"errorMsg\">${errorMsg}</div>`)\n\n                    setTimeout(() => {\n                        if (instance._options.useFileIcons) {\n                            currentElement.getPreviousSibling('img').remove();\n                        }\n                        currentElement.remove();\n                    }, 2000);\n\n                    let debugRejected = document.getElementById('debugRejected');\n                    let totalRejected = parseInt(debugRejected.innerHTML) + 1;\n                    debugRejected.innerHTML = totalRejected;\n                }\n                \n                console.log(`current number of files: ${currentNumberOfFiles} / ${this._options.maxNumberOfFiles}`);\n                let isReadAllowed = ((size < this._options.maxFileSize) && ((currentTotalSize + size) < this._options.maxTotalSize) && (currentNumberOfFiles < this._options.maxNumberOfFiles));\n\n                isReadAllowed ? readAllowed(this) : readRejected(this);\n            }\n\n            let innerFileThumbsElements = document.querySelector('.innerFileThumbs').children;\n            let startIndex = innerFileThumbsElements[innerFileThumbsElements.length - 1].getAttribute('index');\n\n            if (startIndex !== undefined) {\n                startIndex = parseInt(startIndex) + 1;\n            }\n            else {\n                startIndex = 0;\n            }\n\n            function appendMessage($message) {\n                setTimeout(() => {\n                    /*$message.animate({opacity: 0}, 300, function() {\n                        $(this).remove();\n                    });*/\n                    $message.remove();\n                }, 2000);\n            }\n\n            // create a new div containing thumb, delete button and title field for each target file\n            for (i = 0; i < filesList.length; i++) {\n                let file = filesList[i];\n                let reader = new FileReader();\n\n                // test for duplicates\n                if (approvedList && approvedList.indexOf(file.name) < 0) {\n                    if (this._options.duplicatesWarning) {\n                        let $info = document.createElement('div');\n                        $info.className = 'errorLabel center';\n\n                        $info.innerHTML = currentLangObj.duplicated_msg;\n                        $fileThumbsContainer.appendChild($info);\n                        appendMessage($info);\n                    }\n\n                    this._logger(`File duplicated: ${file.name} -> skipping...`, 2);\n                    continue;\n                }\n\n                let fileName, fileExt;\n\n                if (file.name.lastIndexOf('.') > 0) {\n                    fileName = file.name.substring(0, file.name.lastIndexOf('.'));\n                    fileExt = file.name.substring(file.name.lastIndexOf('.') + 1, file.name.length);\n                }\n                else {\n                    fileName = file.name;\n                    fileExt = this._options.defaultFileExt;\n                }\n\n                // test for filenames\n                let nameTest = this._options.filenameTest(fileName, fileExt, $fileThumbsContainer);\n                if (nameTest === false) {\n                    this._logger(`Invalid file name: ${file.name}`, 2);\n                    continue;\n                }\n                else {\n                    if (nameTest !== undefined && nameTest !== true) {\n                        fileName = nameTest;\n                    }\n                }\n\n                this._createUploaderContainer(globalIndex, fileName, fileExt);\n\n                // now read!\n                readFile(reader, file, globalIndex, DOM);\n                globalIndex++;\n            }\n        };\n\n        /*\n        *  -------------------------------------------------------------\n        *  |                       MAIN FLOW                           |\n        *  -------------------------------------------------------------\n        */\n        // initialization\n        if (this._options.name) {\n            this._logger('INITIALIZED INSTANCE: ' + this._options.name);\n        }\n        // build HTML template\n        let template = this._options.HTMLTemplate();\n\n        $el.insertAdjacentHTML('beforeend', template);\n\n        let globalIndex = 0;\n        let $resultContainer = $el.querySelector('.' + this._options.resultContainerClass);\n        let $loadBtn = $el.querySelector('.fileLoader');\n        let $fileContainer = $el.querySelector('.filesContainer');\n        let $fileThumbsContainer = $el.querySelector('.innerFileThumbs');\n        let dropZone = $el.querySelector('.dropZone');\n        let currentLangObj = this._options.langs[this._options.lang];\n\n        // place reloaded files' HTML in result container directly (if provided)\n        if (this._options.reloadHTML) {\n            $resultContainer.innerHTML = this._options.reloadHTML;\n        }\n\n\n        $el.querySelector('.introMsg').innerHTML = currentLangObj.intro_msg;\n        dropZone.innerHTML = currentLangObj.dropZone_msg;\n\n        if (!this._options.debug) {\n            $resultContainer.classList.add('hide');\n        }\n        else {\n            $resultContainer.insertAdjacentHTML('beforebegin', '<p class=\"debugMode\">Debug mode: on</p>');\n            $resultContainer.insertAdjacentHTML('beforebegin', '<div class=\"debug\">Uploaded files: <span id=\"debugUploaded\">0</span> | Rejected files: <span id=\"debugRejected\">0</span></div>');\n            $resultContainer.insertAdjacentHTML('beforebegin', '<div class=\"debug\">Current MAX FILE SIZE: ' + this._options.maxFileSize + ' MB</div>');\n            $resultContainer.insertAdjacentHTML('beforebegin', '<div class=\"debug\">Current MAX TOTAL SIZE: ' + this._options.maxTotalSize + ' MB</div>');\n            $resultContainer.insertAdjacentHTML('beforebegin', '<div class=\"debug sizeAvailable\">Size still available: <span>' + this._options.maxTotalSize + '</span> MB</div>');\n        }\n\n        // --- FILES RELOAD SECTION ---\n        // lookup for previously loaded files placed in the result container directly\n        /* labelsClasses: {\n                sizeAvailable: 'sizeAvailable',\n                currentSize: 'currentSize',\n                maxFileSize: 'maxFileSize',\n                maxTotalSize: 'maxTotalSize'\n            },\n        */\n        let instanceLabels = {};\n        let labelsClasses = this._options.labelsClasses;\n        for (let label in labelsClasses) {\n            instanceLabels[`${label}Labels`] = [];\n        }\n        let labelsContainers = this._options.labelsContainers;\n\n        if (this._options.debug) {\n            // handle debug labels\n            // in the debug frame \"sizeAvailable\" is the only dynamic label that we need to store in order to update it when necessary\n            instanceLabels.sizeAvailableLabels.push($el.querySelector(`.${labelsClasses.sizeAvailable}`));\n        }\n        if (labelsContainers) {\n            const getContainer = function(selector) {\n                return document.querySelector(selector);\n            }\n\n            for (let label in labelsClasses) {\n                function findLabel(container, labelsClasses, label) {\n                    if (container) {\n                        let labels = container.querySelector(`.${labelsClasses[label]}`);\n                        \n                        if (labels) {\n                            instanceLabels[`${label}Labels`].push(labels);\n                        }\n                    }\n                    else {\n                        this._logger(`impossible to find labelContainer '${selector}'`, 1);\n                    }\n                }\n\n                if (Array.isArray(labelsContainers)) {\n                    for (let selector of labelsContainers) {\n                        let container = getContainer(selector);\n    \n                        findLabel(container, labelsClasses, label);\n                    }\n                }\n                else {\n                    let container = getContainer(labelsContainers);\n    \n                    if (container) {\n                        let labels = container.querySelector(`.${labelsClasses[label]}`);\n\n                        if (labels) {\n                            instanceLabels[`${label}Labels`].push(labels);\n                        }\n                    }\n                    else {\n                        this._logger(`impossible to find labelContainer '${labelsContainers}'`, 1);\n                    }\n                }\n            }\n        }\n\n        updateLabel('maxFileSize', this._options.maxFileSize);\n        updateLabel('maxTotalSize', this._options.maxTotalSize);\n\n        let currentTotalSize = 0;\n        let currentNumberOfFiles = 0;\n        let loadedFile;\n\n        for (const [index, element] of $resultContainer.querySelectorAll(`:scope > .${this._options.resultFileContainerClass}`).entries()) {\n            this._logger(`found previously uploaded file: index = ${element.dataset.index}`, 2);\n\n            // pay attention to index used on fileData here: index 0 is the title DIV!\n            let fileData = element.querySelectorAll(':scope > input');\n            let fileName = fileData[0].value;\n            let fileExt = fileData[1].value;\n            let fileSize = fileData[3].value;\n\n            if (fileName.lastIndexOf('.') > 0) {\n                fileName = fileName.substr(0, fileName.lastIndexOf('.'));\n            }\n\n            loadedFile = this._createUploaderContainer(globalIndex, fileName, fileExt);\n            loadedFile.querySelector(':scope > .loadBar > div').style.width = '100%';\n            loadedFile.classList.add(this._options.reloadedFilesClass);\n\n            currentTotalSize = currentTotalSize + parseFloat(fileSize);\n            currentNumberOfFiles++;\n            globalIndex++;\n        }\n\n        // reload files from provided array\n        if (this._options.reloadArray.length > 0) {\n            this._options.reloadArray.forEach((file, index) => {\n                // re-create visible elements\n                loadedFile = this._createUploaderContainer(index, file.name, file.ext);\n                loadedFile.querySelector(':scope > .loadBar > div').style.width = '100%';\n                loadedFile.classList.add(this._options.reloadedFilesClass);\n\n                this._logger('found previously uploaded file: index = ' + index, 2);\n\n                // re-create results\n                let newFile = {\n                    index: index,\n                    name: file.name,\n                    type: file.ext,\n                    result: file.data,\n                    size: file.size\n                };\n\n                this._createResultContainer(newFile);\n\n                currentTotalSize = currentTotalSize + parseFloat(file.size);\n                currentNumberOfFiles++;\n                globalIndex++;\n            });\n        }\n\n        currentTotalSize = this._round(currentTotalSize);\n\n        this._logger(`current total size: ${currentTotalSize} - current number of files: ${currentNumberOfFiles}`);\n        updateLabel('sizeAvailable', (this._options.maxTotalSize - currentTotalSize));\n        updateLabel('currentSize', currentTotalSize);\n        // --- END FILES RELOAD SECTION ---\n\n        // onload callback\n        this._options.onload(this._options, currentTotalSize);\n\n        // Drag events\n        this.handleDragOver = (event) => {\n            dropZone.classList.add('highlight');\n            event.stopPropagation();\n            event.preventDefault();\n            event.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.\n        }\n        this.handleDrop = (event) => {\n            dropZone.classList.remove('highlight');\n            event.data = {\n                DOM: $el\n            };\n            this._filesRead(event);\n        }\n\n        dropZone.addEventListener('dragleave', () => {\n            dropZone.classList.remove('highlight');\n        });\n        dropZone.addEventListener('dragover', this.handleDragOver);\n        dropZone.addEventListener('drop', () => {\n            event.stopPropagation();\n            event.preventDefault();\n            this.handleDrop(event);\n        });\n\n        dropZone.addEventListener('click', (event) => {\n            $loadBtn.click();\n        });\n\n        $loadBtn.addEventListener('change', (event) => {\n            event.data = {\n                DOM: $el\n            };\n            this._filesRead(event);\n            this.value = null;\n        });\n\n        return {\n            fileUploader: instance,\n            elementDOM: $el\n        };\n    };\n})(window);\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.deepmerge = factory());\n}(this, (function () { 'use strict';\n\nvar isMergeableObject = function isMergeableObject(value) {\n\treturn isNonNullObject(value)\n\t\t&& !isSpecial(value)\n};\n\nfunction isNonNullObject(value) {\n\treturn !!value && typeof value === 'object'\n}\n\nfunction isSpecial(value) {\n\tvar stringValue = Object.prototype.toString.call(value);\n\n\treturn stringValue === '[object RegExp]'\n\t\t|| stringValue === '[object Date]'\n\t\t|| isReactElement(value)\n}\n\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\nfunction isReactElement(value) {\n\treturn value.$$typeof === REACT_ELEMENT_TYPE\n}\n\nfunction emptyTarget(val) {\n\treturn Array.isArray(val) ? [] : {}\n}\n\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n\treturn (options.clone !== false && options.isMergeableObject(value))\n\t\t? deepmerge(emptyTarget(value), value, options)\n\t\t: value\n}\n\nfunction defaultArrayMerge(target, source, options) {\n\treturn target.concat(source).map(function(element) {\n\t\treturn cloneUnlessOtherwiseSpecified(element, options)\n\t})\n}\n\nfunction getMergeFunction(key, options) {\n\tif (!options.customMerge) {\n\t\treturn deepmerge\n\t}\n\tvar customMerge = options.customMerge(key);\n\treturn typeof customMerge === 'function' ? customMerge : deepmerge\n}\n\nfunction mergeObject(target, source, options) {\n\tvar destination = {};\n\tif (options.isMergeableObject(target)) {\n\t\tObject.keys(target).forEach(function(key) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n\t\t});\n\t}\n\tObject.keys(source).forEach(function(key) {\n\t\tif (!options.isMergeableObject(source[key]) || !target[key]) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n\t\t} else {\n\t\t\tdestination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n\t\t}\n\t});\n\treturn destination\n}\n\nfunction deepmerge(target, source, options) {\n\toptions = options || {};\n\toptions.arrayMerge = options.arrayMerge || defaultArrayMerge;\n\toptions.isMergeableObject = options.isMergeableObject || isMergeableObject;\n\n\tvar sourceIsArray = Array.isArray(source);\n\tvar targetIsArray = Array.isArray(target);\n\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n\tif (!sourceAndTargetTypesMatch) {\n\t\treturn cloneUnlessOtherwiseSpecified(source, options)\n\t} else if (sourceIsArray) {\n\t\treturn options.arrayMerge(target, source, options)\n\t} else {\n\t\treturn mergeObject(target, source, options)\n\t}\n}\n\ndeepmerge.all = function deepmergeAll(array, options) {\n\tif (!Array.isArray(array)) {\n\t\tthrow new Error('first argument should be an array')\n\t}\n\n\treturn array.reduce(function(prev, next) {\n\t\treturn deepmerge(prev, next, options)\n\t}, {})\n};\n\nvar deepmerge_1 = deepmerge;\n\nreturn deepmerge_1;\n\n})));\n"]}