{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js/fileUploader.js","node_modules/deepmerge/dist/umd.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","_deepmerge","window","FileUploader","$el","options","_this","this","instance","_defaults","lang","useFileIcons","debug","debugLogStyle","name","undefined","pluginName","useLoadingBars","loadingBarsClasses","reloadedFilesClass","resultContainerClass","resultFileContainerClass","resultPrefix","resultInputNames","defaultFileExt","defaultMimeType","fileMaxSize","totalMaxSize","reloadArray","reloadHTML","linkButtonContent","deleteButtonContent","allowDuplicates","duplicatesWarning","HTMLTemplate","onload","onfileloadStart","onfileloadEnd","onfileDelete","filenameTest","langs","en","intro_msg","dropZone_msg","maxSizeExceeded_msg","totalMaxSizeExceeded_msg","duplicated_msg","name_placeHolder","_options","_round","value","Math","round","get","parameter","currentTotalSize","_logger","message","level","data","console","log","_fileType","fileName","ext","substring","lastIndexOf","indexOf","_fileDelete","event","element","index","target","dataset","closest","selector","sibling","previousElementSibling","matches","getPreviousSibling","remove","fileSize","$resultContainer","querySelector","concat","availableSize","availableLabel","innerHTML","document","children","classList","add","_fileRename","$this","text","$input","nameTest","$fileThumbsContainer","preventDefault","setSelectionRange","start","stop","getData","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","querySelectorAll","Symbol","iterator","next","done","inputs","file","title","push","err","_createUploaderContainer","fileExt","currentThumb","insertAdjacentHTML","container","createElement","className","parseInt","style","position","appendChild","fileButtonsContainer","seeFileLink","addEventListener","content","open","write","deleteBtn","append","classes","join","currentLoadBar","prepend","currentTitle","setAttribute","currentExtension","events","handler","Array","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","_event","addMultipleListeners","selectionStart","selectionEnd","_createResultContainer","fileData","resultElemContainer","type","result","size","_filesRead","filesList","DOM","approvedList","files","dataTransfer","loadedFiles","newFiles","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","forEach","newFile","$fileContainer","readFile","reader","currentElement","from","filter","onloadstart","onprogress","lengthComputable","percentLoaded","loaded","total","width","onloadend","debugUploaded","getElementById","totalUploaded","resultObject","readAsDataURL","currentAvailableSize","errorMsg","currentLangObj","loadBar","setTimeout","debugRejected","totalRejected","innerFileThumbsElements","startIndex","getAttribute","appendMessage","$message","_file","FileReader","$info","globalIndex","template","$loadBtn","dropZone","loadedFile","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","entries","_step4$value","_slicedToArray","substr","parseFloat","handleDragOver","stopPropagation","dropEffect","handleDrop","click","fileUploader","elementDOM","global","factory","isMergeableObject","isNonNullObject","stringValue","Object","prototype","toString","$$typeof","REACT_ELEMENT_TYPE","isReactElement","isSpecial","for","cloneUnlessOtherwiseSpecified","clone","deepmerge","val","isArray","emptyTarget","defaultArrayMerge","source","map","mergeObject","destination","keys","key","customMerge","getMergeFunction","arrayMerge","sourceIsArray","all","array","reduce","prev","define","amd"],"mappings":"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","file":"fileUploader.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import deepMerge from 'deepmerge';\n\n\n/*\n* fileUploader v4.0.0\n* Licensed under MIT (https://raw.githubusercontent.com/Cerealkillerway/fileUploader/master/license.txt)\n*/\n(function(context) {\n    context.FileUploader = function($el, options) {\n        let instance = this;\n\n        // default options\n        this._defaults = {\n            lang: 'en',\n            useFileIcons: true,\n\n            debug: false,                                                  // activate console logs for debug\n            debugLogStyle: 'color: #9900ff',                               // css style for debug console logs in js console\n            name: undefined,                                               // a name for plugin's instance (useful for debug purposes)\n            pluginName: 'FileUploader',                                    // plugin's name (used in debug logs alongside with name)\n\n            useLoadingBars: true,                                          // insert loading bar for files\n            loadingBarsClasses: [],                                        // array of strings for classnames for loading bars\n            reloadedFilesClass: 'reloadedElement',                         // class for previously uploaded files\n            resultContainerClass: 'result',                                // result container's class (where to place result files data)\n            resultFileContainerClass: 'uploadedFile',                      // class for every file result container span\n            resultPrefix: 'fileUploader',                                  // prefix for inputs in the file result container\n            resultInputNames: ['title', 'extension', 'value', 'size'],     // name suffix to be used for result inputs\n            defaultFileExt: '',                                            // extension to use for files with no extension\n            defaultMimeType: '',                                           // MIME type to use for files with no extension\n            fileMaxSize: 50,                                               // maximum allowed file size (in MB)\n            totalMaxSize: 1000,                                            // total maximum allowed size of all files\n            reloadArray: [],                                               // array of files to be reloaded at plugin startup\n            reloadHTML: undefined,                                         // HTML for reloaded files to place directly in result container\n            linkButtonContent: 'L',                                        // HTML content for link button\n            deleteButtonContent: 'X',                                      // HTML content for delete button\n            allowDuplicates: false,                                        // allow upload duplicates\n            duplicatesWarning: false,                                      // show a message in the loading area when trying to load a duplicated file\n\n            HTMLTemplate: () => {\n                return `<p class=\"introMsg\"></p>\n                    <div>\n                        <div class=\"inputContainer\">\n                            <input class=\"fileLoader\" type=\"file\" multiple />\n                        </div>\n                        <div class=\"dropZone\"></div>\n                        <div class=\"filesContainer filesContainerEmpty\">\n                            <div class=\"innerFileThumbs\"></div>\n                            <div style=\"clear:both;\"></div>\n                        </div>\n                    </div>\n                    <div class=\"result\"></div>`\n            },\n\n            onload: () => {},                                         // callback on plugin initialization\n            onfileloadStart: () => {},                                // callback on file reader start\n            onfileloadEnd: () => {},                                  // callback on file reader end\n            onfileDelete: () => {},                                   // callback on file delete\n            filenameTest: () => {},                                   // callback for testing filenames\n\n            langs: {\n                'en': {\n                    intro_msg: '(Add attachments...)',\n                    dropZone_msg: 'Drop your files here',\n                    maxSizeExceeded_msg: 'File too large',\n                    totalMaxSizeExceeded_msg: 'Total size exceeded',\n                    duplicated_msg: 'File duplicated (skipped)',\n                    name_placeHolder: 'name',\n                }\n            }\n        };\n\n\n        // UTILITIES\n        const addMultipleListeners = function (element, events, handler) {\n            if (!(events instanceof Array)) {\n                this._logger('addMultipleListeners requires events to be an array');\n            }\n            for (const event of events) {\n                element.addEventListener(event, handler);\n            }\n        }\n\n        const getPreviousSibling = function(element, selector) {\n            let sibling = element.previousElementSibling;\n\n            if (!selector) return sibling;\n\n            while (sibling) {\n                if (sibling.matches(selector)) {\n                    return sibling;\n                }\n                sibling = sibling.previousElementSibling;\n            }\n        };\n\n\n        // extend options with instance ones\n        this._options = deepMerge(this._defaults, options);\n\n\n        // add more options\n        this.options = (options) => {\n            return (options) ? deepMerge(this._options, options) : this._options;\n        };\n\n\n        // round number\n        this._round = (value) => {\n            return Math.round(value * 100) / 100;\n        };\n\n\n        // return data\n        this.get = (parameter) => {\n            switch (parameter) {\n                case 'currentTotalSize':\n                return this._round(currentTotalSize);\n\n                case 'currentAvailableSize':\n                return this._round(this._options.totalMaxSize - currentTotalSize);\n            }\n        };\n\n\n        // debug logs function\n        this._logger = (message, level, data) => {\n            if (this._options.debug) {\n                if (level) {\n                    for (let i = 0; i < level; i++) {\n                        message = '\\u27A1 ' + message;\n                    }\n                }\n                if (this._options.name) {\n                    message = '[' + this._options.pluginName + ' - ' + this._options.name + '] ' + message;\n                }\n\n                if (data) {\n                    console.log('%c ' + message, this._options.debugLogStyle, data);\n                }\n                else {\n                    console.log('%c ' + message, this._options.debugLogStyle);\n                }\n            }\n        };\n\n\n        // file type identificator\n        this._fileType = (fileName) => {\n            let ext = fileName.substring(fileName.lastIndexOf('.') + 1, fileName.length);\n            let icons = ['pdf', 'jpg', 'png'];\n\n            if (icons.indexOf(ext) >= 0) {\n                return ext;\n            }\n            else {\n                return 'unknown-file';\n            }\n        };\n\n\n        // method for deleting a reader's result from result container\n        this._fileDelete = (event, data) => {\n            let element = data.element;\n            let index = event.target.dataset.delete;\n\n            if (!index) {\n                index = event.target.closest('div[data-delete]').dataset.delete;\n            }\n\n            // remove file block\n            if (this._options.useFileIcons) {\n                getPreviousSibling(element, 'img').remove();\n            }\n            element.remove();\n\n            // get file size\n            let fileSize = $resultContainer.querySelector(`input[name=\"${this._options.resultPrefix}[${index}][${this._options.resultInputNames[3]}]\"]`).value;\n\n            fileSize = this._round(fileSize);\n            currentTotalSize = this._round(currentTotalSize - fileSize);\n\n            let availableSize = this._options.totalMaxSize - currentTotalSize;\n\n            availableSize = this._round(availableSize);\n            availableLabel.querySelector(':scope > span').innerHTML = availableSize;\n\n            // remove result block\n            $resultContainer.querySelector(`:scope > div[data-index=\"${index}\"]`).remove();\n\n            if (document.querySelector('.innerFileThumbs').children.length === 0) {\n                document.querySelector('.filesContainer').classList.add('filesContainerEmpty');\n            }\n\n            this._logger('Deleted file N: ' + index, 2);\n            this._options.onfileDelete(index, currentTotalSize);\n        };\n\n\n        // method to rename file in result container accordingly to modifications by user\n        this._fileRename = (event) => {\n            let element = event.data.element;\n            let $this = event.target;\n            let ext = element.querySelector(':scope > .fileExt').innerHTML;\n            let text = $this.value;\n            let index = element.dataset.index;\n            let $input = $resultContainer.querySelector(`div[data-index=\"${index}\"] input`);\n            let nameTest = this._options.filenameTest(text, ext, $fileThumbsContainer);\n\n            if (nameTest === false) {\n                event.preventDefault();\n                return false;\n            }\n            if (nameTest !== undefined && nameTest !== true) {\n                text = nameTest;\n                $this.value = text;\n\n                // update input\n                /*if (ext.length > 0) {\n                    text = `${text}.${ext}`;\n                }*/\n\n                $input.value = text;\n                // restore selection range\n                $this.setSelectionRange(event.data.start, event.data.stop);\n            }\n        };\n\n\n        this.getData = () => {\n            let data = [];\n\n            this._logger('RECEIVED SAVE COMMAND:', 0);\n\n            for (const element of $resultContainer.querySelectorAll(`:scope > .${this._options.resultFileContainerClass}`)) {\n                let inputs = element.querySelectorAll(':scope > input');\n                let file = {\n                    title: inputs[0].value,\n                    ext: inputs[1].value,\n                    value: inputs[2].value\n                };\n\n                data.push(file);\n            }\n\n            this._logger('%O', 0 ,data);\n            return data;\n        };\n\n\n        // create container for file uploading elements (icon, progress bar, etc...)\n        this._createUploaderContainer = (index, fileName, fileExt) => {\n            //insert file icon if requested\n            if (this._options.useFileIcons) {\n                let currentThumb = `<img src=\"/images/${this._fileType(fileExt)}.png\" class=\"fileThumb\" />`;\n                $fileThumbsContainer.insertAdjacentHTML('beforeend', currentThumb);\n            }\n\n            let container = document.createElement('div');\n            container.className = 'newElement';\n            container.dataset.index = parseInt(index);\n            container.style.position = 'relative';\n            $fileThumbsContainer.appendChild(container);\n\n            let fileButtonsContainer = document.createElement('div');\n            fileButtonsContainer.className = 'fileActions';\n            container.appendChild(fileButtonsContainer);\n\n            // file \"see\" link\n            let seeFileLink = document.createElement('div');\n            seeFileLink.className = 'fileSee';\n            seeFileLink.innerHTML = this._options.linkButtonContent;\n            fileButtonsContainer.appendChild(seeFileLink);\n\n            seeFileLink.addEventListener('click', function(event) {\n                let index = event.target.closest('.newElement').dataset.index;\n                let content = $resultContainer.querySelector(`.uploadedFile[data-index=\"${index}\"] textarea`).value;\n                let win = window.open();\n\n                win.document.write(`<iframe src=\"${content}\" frameborder=\"0\" style=\"border:0; top:0px; display:block; left:0px; bottom:0px; right:0px; width:100%; min-height: 100vh; height:100%;\" allowfullscreen></iframe>`)\n            });\n\n            // delete button\n            let deleteBtn = document.createElement('div');\n            deleteBtn.className = 'fileDelete';\n            deleteBtn.dataset.delete = parseInt(index);\n            deleteBtn.innerHTML = this._options.deleteButtonContent;\n            fileButtonsContainer.append(deleteBtn);\n            deleteBtn.addEventListener('click', (event) => {\n                this._fileDelete(event, {element: container});\n            });\n\n            //insert loading bars if requested\n            if (this._options.useLoadingBars) {\n                let classes = this._options.loadingBarsClasses;\n\n                if (classes.length > 0) {\n                    classes = classes.join(' ');\n                }\n\n                let currentLoadBar = document.createElement('div');\n                currentLoadBar.className = `loadBar ${classes}`;\n                currentLoadBar.appendChild(document.createElement('div'));\n                container.prepend(currentLoadBar);\n            }\n\n            let currentTitle = document.createElement('input');\n\n            // TODO translate placeholder\n            currentTitle.setAttribute('placeholder', 'nome');\n            currentTitle.className = 'fileTitle';\n\n            let currentExtension = document.createElement('div');\n\n            currentExtension.className = 'fileExt';\n            container.prepend(currentExtension);\n            container.prepend(currentTitle);\n\n            addMultipleListeners(currentTitle, ['keypress', 'keyup', 'paste'], function(event) {\n                event.data = {};\n                event.data.element = container;\n                event.data.start = this.selectionStart;\n                event.data.stop = this.selectionEnd;\n                instance._fileRename(event);\n            });\n\n            currentTitle.value = fileName;\n            currentExtension.innerHTML = fileExt;\n\n            return container;\n        };\n\n\n        this._createResultContainer = (fileData) => {\n            let index = fileData.index;\n            let resultElemContainer = document.createElement('div');\n\n            resultElemContainer.className = this._options.resultFileContainerClass;\n            resultElemContainer.dataset.index = index;\n            resultElemContainer.insertAdjacentHTML('beforeend', `<div>File: ${index}</div>`);\n            resultElemContainer.insertAdjacentHTML('beforeend', `<input type=\"text\" name=\"${this._options.resultPrefix}[${index}][${this._options.resultInputNames[0]}]\" value=\"${fileData.name}\" />`);\n            resultElemContainer.insertAdjacentHTML('beforeend', `<input type=\"text\" name=\"${this._options.resultPrefix}[${index}][${this._options.resultInputNames[1]}]\" value=\"${fileData.type}\" />`);\n            resultElemContainer.insertAdjacentHTML('beforeend', `<textarea name=\"${this._options.resultPrefix}[${index}][${this._options.resultInputNames[2]}]\">${fileData.result}</textarea>`);\n            resultElemContainer.insertAdjacentHTML('beforeend', `<input type=\"text\" name=\"${this._options.resultPrefix}[${index}][${this._options.resultInputNames[3]}]\" value=\"${fileData.size}\" />`);\n            $resultContainer.appendChild(resultElemContainer);\n        };\n\n\n        // files read function\n        this._filesRead = (event) => {\n            let DOM = event.data.DOM;\n            let filesList;\n            let approvedList = false;\n            let i = 0;\n\n            if (event.target.files) {\n                this._logger('files array source: file selector (click event)', 1);\n                filesList = event.target.files;\n            }\n            else {\n                this._logger('files array source: dropzone (drag & drop event)', 1);\n                filesList = event.dataTransfer.files;\n            }\n            this._logger('%O', 0, filesList);\n\n            // build approved list\n            if (!this._options.allowDuplicates) {\n                let loadedFiles = [];\n                let newFiles = [];\n\n                approvedList = [];\n\n                // build already loaded files list\n                for(let file of $resultContainer.children) {\n                    loadedFiles.push(file.querySelector('input').value);\n                };\n\n                // build current selected files list\n                for (i = 0; i < filesList.length; i++) {\n                    newFiles.push(filesList[i].name);\n                }\n\n                // avoid load twice the same file\n                newFiles.forEach(function(newFile) {\n                    let fileIndex = loadedFiles.indexOf(newFile);\n\n                    if (fileIndex < 0) {\n                        approvedList.push(newFile);\n                    }\n                });\n            }\n\n            $fileContainer.classList.remove('filesContainerEmpty');\n\n            let readFile = (reader, file, index, DOM) => {\n                let currentElement = Array.from(DOM.querySelector('.innerFileThumbs').children).filter(function(element) {\n                    return parseInt(element.dataset.index) === index ;\n                });\n                currentElement = currentElement[0];\n                let size = this._round(file.size / 1000000);      // size in MB\n\n                reader.onloadstart = () => {\n                    this._options.onfileloadStart(index);\n                    this._logger(`START read file: ${index}, size: ${size} MB`, 2);\n                };\n\n                reader.onprogress = (event) => {\n                    if (event.lengthComputable) {\n                        let percentLoaded = this._round((event.loaded / event.total) * 100);\n                        this._logger(`File ${index} loaded: ${percentLoaded}`, 3);\n\n                        // Increase the progress bar length.\n                        if (percentLoaded <= 100) {\n                            currentElement.querySelector(':scope > .loadBar > div').style.width = '100%';\n                        }\n                    }\n                };\n\n                reader.onloadend = () => {\n                    let type = file.type;\n                    let name = file.name;\n                    let result = reader.result;\n\n                    // reading unsuccessful\n                    if (!result) {\n                        return false;\n                    }\n\n                    let mimeType = result.substring(0, result.indexOf(';'));\n\n                    // if file has no MIME type, replace with default one\n                    if (mimeType === 'data:' && this._options.defaultMimeType.length > 0) {\n                        result = \"data:\" + this._options.defaultMimeType + result.substring(result.indexOf(';'), result.length);\n                    }\n                    if (type === \"\") {\n                        type = this._options.defaultMimeType;\n                    }\n                    if (name.indexOf('.') < 0 && this._options.defaultFileExt !== '') {\n                        name = `${name}.${this._options.defaultFileExt}`;\n                    }\n\n                    let newFile = {\n                        index: index,\n                        name: name,\n                        type: type,\n                        result: result,\n                        size: size\n                    };\n\n                    this._createResultContainer(newFile);\n\n                    //set direct link on file see button\n                    //currentElement.querySelector(':scope > .fileActions > a').setAttribute('href', result);\n                    this._logger(`END read file: ${index}`, 4);\n\n                    let debugUploaded = document.getElementById('debugUploaded');\n                    let totalUploaded = parseInt(debugUploaded.innerHTML) + 1;\n\n                    debugUploaded.innerHTML = totalUploaded;\n\n                    let resultObject = {\n                        name: file.name,\n                        type: file.type,\n                        data: result,\n                        size: size\n                    };\n\n                    this._options.onfileloadEnd(index, resultObject, this._round(currentTotalSize));\n                };\n\n                if ((size <= this._options.fileMaxSize) && ((currentTotalSize + size) <= this._options.totalMaxSize)) {\n                    reader.readAsDataURL(file);\n\n                    // update total size\n                    currentTotalSize = currentTotalSize + size;\n\n                    let currentAvailableSize = this._options.totalMaxSize - currentTotalSize;\n\n                    availableLabel.querySelector(':scope > span').innerHTML = this._round(currentAvailableSize);\n                }\n                else {\n                    let errorMsg = currentLangObj.totalMaxSizeExceeded_msg;\n\n                    if (size > this._options.fileMaxSize) {\n                        errorMsg = currentLangObj.maxSizeExceeded_msg;\n                        this._logger(`FILE REJECTED: Max size exceeded - max size: ${this._options.fileMaxSize} MB - file size: ${size} MB`);\n                    }\n                    else {\n                        this._logger(`FILE REJECTED: Max total size exceeded - max size: ${this._options.totalMaxSizeExceeded_msg} MB - current total size: ${currentTotalSize + size} MB`);\n                    }\n\n                    currentElement.classList.add('error');\n\n                    let loadBar = currentElement.querySelector(':scope > .loadBar');\n                    loadBar.innerHTML = '';\n                    loadBar.insertAdjacentHTML('beforeend', `<div class=\"errorMsg\">${errorMsg}</div>`)\n\n                    setTimeout(() => {\n                        /*currentElement.animate({opacity: 0}, 300, function() {\n                            if (instance._options.useFileIcons) {\n                                $(this).prev('img').remove();\n                            }\n                            $(this).remove();\n                        });*/\n                        if (instance._options.useFileIcons) {\n                            currentElement.getPreviousSibling('img').remove();\n                        }\n                        currentElement.remove();\n                    }, 2000);\n\n                    let debugRejected = parseInt(document.getElementById('debugRejected'));\n                    let totalRejected = debugRejected.innerHTML + 1;\n                    debugRejected.innerHTML = totalRejected;\n                }\n            }\n\n            let innerFileThumbsElements = document.querySelector('.innerFileThumbs').children;\n            let startIndex = innerFileThumbsElements[innerFileThumbsElements.length - 1].getAttribute('index');\n\n            if (startIndex !== undefined) {\n                startIndex = parseInt(startIndex) + 1;\n            }\n            else {\n                startIndex = 0;\n            }\n\n            function appendMessage($message) {\n                setTimeout(() => {\n                    /*$message.animate({opacity: 0}, 300, function() {\n                        $(this).remove();\n                    });*/\n                    $message.remove();\n                }, 2000);\n            }\n\n            // create a new div containing thumb, delete button and title field for each target file\n            for (i = 0; i < filesList.length; i++) {\n                let file = filesList[i];\n                let reader = new FileReader();\n\n                // test for duplicates\n                if (approvedList && approvedList.indexOf(file.name) < 0) {\n                    if (this._options.duplicatesWarning) {\n                        let $info = document.createElement('div');\n                        $info.className = 'errorLabel center';\n\n                        $info.innerHTML = currentLangObj.duplicated_msg;\n                        $fileThumbsContainer.appendChild($info);\n                        appendMessage($info);\n                    }\n\n                    this._logger(`File duplicated: ${file.name} -> skipping...`, 2);\n                    continue;\n                }\n\n                let fileName, fileExt;\n\n                if (file.name.lastIndexOf('.') > 0) {\n                    fileName = file.name.substring(0, file.name.lastIndexOf('.'));\n                    fileExt = file.name.substring(file.name.lastIndexOf('.') + 1, file.name.length);\n                }\n                else {\n                    fileName = file.name;\n                    fileExt = this._options.defaultFileExt;\n                }\n\n                // test for filenames\n                let nameTest = this._options.filenameTest(fileName, fileExt, $fileThumbsContainer);\n                if (nameTest === false) {\n                    this._logger(`Invalid file name: ${file.name}`, 2);\n                    continue;\n                }\n                else {\n                    if (nameTest !== undefined && nameTest !== true) {\n                        fileName = nameTest;\n                    }\n                }\n\n                this._createUploaderContainer(globalIndex, fileName, fileExt);\n\n                // now read!\n                readFile(reader, file, globalIndex, DOM);\n                globalIndex++;\n            }\n        };\n\n        /*\n        *  -------------------------------------------------------------\n        *  |                       MAIN FLOW                           |\n        *  -------------------------------------------------------------\n        */\n        // initialization\n        if (this._options.name) {\n            this._logger('INITIALIZED INSTANCE: ' + this._options.name);\n        }\n        // build HTML template\n        let template = this._options.HTMLTemplate();\n\n        $el.insertAdjacentHTML('beforeend', template);\n\n        let globalIndex = 0;\n        let $resultContainer = $el.querySelector('.' + this._options.resultContainerClass);\n        let $loadBtn = $el.querySelector('.fileLoader');\n        let $fileContainer = $el.querySelector('.filesContainer');\n        let $fileThumbsContainer = $el.querySelector('.innerFileThumbs');\n        let dropZone = $el.querySelector('.dropZone');\n        let currentLangObj = this._options.langs[this._options.lang];\n\n        // place reloaded files' HTML in result container directly (if provided)\n        if (this._options.reloadHTML) {\n            $resultContainer.innerHTML = this._options.reloadHTML;\n        }\n\n\n        $el.querySelector('.introMsg').innerHTML = currentLangObj.intro_msg;\n        dropZone.innerHTML = currentLangObj.dropZone_msg;\n\n        if (!this._options.debug) {\n            $resultContainer.classList.add('hide');\n        }\n        else {\n            $resultContainer.insertAdjacentHTML('beforebegin', '<p class=\"debugMode\">Debug mode: on</p>');\n            $resultContainer.insertAdjacentHTML('beforebegin', '<div class=\"debug\">Uploaded files: <span id=\"debugUploaded\">0</span> | Rejected files: <span id=\"debugRejected\">0</span></div>');\n            $resultContainer.insertAdjacentHTML('beforebegin', '<div class=\"debug\">Current MAX FILE SIZE: ' + this._options.fileMaxSize + ' MB</div>');\n            $resultContainer.insertAdjacentHTML('beforebegin', '<div class=\"debug\">Current MAX TOTAL SIZE: ' + this._options.totalMaxSize + ' MB</div>');\n            $resultContainer.insertAdjacentHTML('beforebegin', '<div class=\"debug sizeAvailable\">Size still available: <span>' + this._options.totalMaxSize + '</span> MB</div>');\n        }\n\n        // --- FILES RELOAD SECTION ---\n        // lookup for previously loaded files placed in the result container directly\n        let availableLabel = $el.querySelector('.sizeAvailable');\n        let currentTotalSize = 0;\n        let loadedFile;\n\n        for (const [index, element] of $resultContainer.querySelectorAll(`:scope > .${this._options.resultFileContainerClass}`).entries()) {\n            this._logger(`found previously uploaded file: index = ${element.dataset.index}`, 2);\n\n            // pay attention to index used on fileData here: index 0 is the title DIV!\n            let fileData = element.querySelectorAll(':scope > input');\n            let fileName = fileData[0].value;\n            let fileExt = fileData[1].value;\n            let fileSize = fileData[3].value;\n\n            if (fileName.lastIndexOf('.') > 0) {\n                fileName = fileName.substr(0, fileName.lastIndexOf('.'));\n            }\n\n            loadedFile = this._createUploaderContainer(globalIndex, fileName, fileExt);\n            loadedFile.querySelector(':scope > .loadBar > div').style.width = '100%';\n            loadedFile.classList.add(this._options.reloadedFilesClass);\n\n            currentTotalSize = currentTotalSize + parseFloat(fileSize);\n            globalIndex++;\n        }\n\n        // reload files from provided array\n        if (this._options.reloadArray.length > 0) {\n            this._options.reloadArray.forEach((file, index) => {\n                // re-create visible elements\n                loadedFile = this._createUploaderContainer(index, file.name, file.ext);\n                loadedFile.querySelector(':scope > .loadBar > div').style.width = '100%';\n                loadedFile.classList.add(this._options.reloadedFilesClass);\n\n                this._logger('found previously uploaded file: index = ' + index, 2);\n\n                // re-create results\n                let newFile = {\n                    index: index,\n                    name: file.name,\n                    type: file.ext,\n                    result: file.data,\n                    size: file.size\n                };\n\n                this._createResultContainer(newFile);\n\n                currentTotalSize = currentTotalSize + parseFloat(file.size);\n                globalIndex++;\n            });\n        }\n\n        currentTotalSize = this._round(currentTotalSize);\n\n        this._logger('current total size: ' + currentTotalSize);\n        availableLabel.querySelector(':scope > span').innerHTML = (this._options.totalMaxSize - currentTotalSize);\n        // --- END FILES RELOAD SECTION ---\n\n        // onload callback\n        this._options.onload(this._options, currentTotalSize);\n\n        // Drag events\n        this.handleDragOver = (event) => {\n            dropZone.classList.add('highlight');\n            event.stopPropagation();\n            event.preventDefault();\n            event.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.\n        }\n        this.handleDrop = (event) => {\n            dropZone.classList.remove('highlight');\n            event.data = {\n                DOM: $el\n            };\n            this._filesRead(event);\n        }\n\n        dropZone.addEventListener('dragleave', () => {\n            dropZone.classList.remove('highlight');\n        });\n        dropZone.addEventListener('dragover', this.handleDragOver);\n        dropZone.addEventListener('drop', () => {\n            event.stopPropagation();\n            event.preventDefault();\n            this.handleDrop(event);\n        });\n\n        dropZone.addEventListener('click', (event) => {\n            $loadBtn.click();\n        });\n\n        $loadBtn.addEventListener('change', (event) => {\n            event.data = {\n                DOM: $el\n            };\n            this._filesRead(event);\n            this.value = null;\n        });\n\n        return {\n            fileUploader: instance,\n            elementDOM: $el\n        };\n    };\n\n    /*const fileUploader = function(methodOrOptions) {\n        console.log('constructor');\n        let method = (typeof methodOrOptions === 'string') ? methodOrOptions : undefined;\n\n        const getFileUploader = () => {\n            let $el          = $(this);\n            let fileUploader = $el.data('fileUploader');\n\n            fileUploaders.push(fileUploader);\n        }\n\n        const applyMethod = (index) => {\n            let fileUploader = fileUploaders[index];\n\n            if (!fileUploader) {\n                console.warn('$.fileUploader not instantiated yet');\n                console.info(this);\n                results.push(undefined);\n                return;\n            }\n\n            if (typeof fileUploader[method] === 'function') {\n                let result = fileUploader[method].apply(fileUploader, args);\n                results.push(result);\n            } else {\n                console.warn('Method \\'' + method + '\\' not defined in $.fileUploader');\n            }\n        }\n\n        const init = () => {\n            let $el          = $(this);\n            let fileUploader = new FileUploader($el, options);\n\n            $el.data('fileUploader', fileUploader);\n        }\n\n        if (method) {\n            let fileUploaders = [];\n\n            this.each(getFileUploader);\n\n            let args = (arguments.length > 1) ? Array.prototype.slice.call(arguments, 1) : undefined;\n            let results = [];\n\n            this.each(applyMethod);\n\n            return (results.length > 1) ? results : results[0];\n        }\n        else {\n            let options = (typeof methodOrOptions === 'object') ? methodOrOptions : undefined;\n\n            return this.each(init);\n        }\n    };*/\n})(window);\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.deepmerge = factory());\n}(this, (function () { 'use strict';\n\nvar isMergeableObject = function isMergeableObject(value) {\n\treturn isNonNullObject(value)\n\t\t&& !isSpecial(value)\n};\n\nfunction isNonNullObject(value) {\n\treturn !!value && typeof value === 'object'\n}\n\nfunction isSpecial(value) {\n\tvar stringValue = Object.prototype.toString.call(value);\n\n\treturn stringValue === '[object RegExp]'\n\t\t|| stringValue === '[object Date]'\n\t\t|| isReactElement(value)\n}\n\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\nfunction isReactElement(value) {\n\treturn value.$$typeof === REACT_ELEMENT_TYPE\n}\n\nfunction emptyTarget(val) {\n\treturn Array.isArray(val) ? [] : {}\n}\n\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n\treturn (options.clone !== false && options.isMergeableObject(value))\n\t\t? deepmerge(emptyTarget(value), value, options)\n\t\t: value\n}\n\nfunction defaultArrayMerge(target, source, options) {\n\treturn target.concat(source).map(function(element) {\n\t\treturn cloneUnlessOtherwiseSpecified(element, options)\n\t})\n}\n\nfunction getMergeFunction(key, options) {\n\tif (!options.customMerge) {\n\t\treturn deepmerge\n\t}\n\tvar customMerge = options.customMerge(key);\n\treturn typeof customMerge === 'function' ? customMerge : deepmerge\n}\n\nfunction mergeObject(target, source, options) {\n\tvar destination = {};\n\tif (options.isMergeableObject(target)) {\n\t\tObject.keys(target).forEach(function(key) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n\t\t});\n\t}\n\tObject.keys(source).forEach(function(key) {\n\t\tif (!options.isMergeableObject(source[key]) || !target[key]) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n\t\t} else {\n\t\t\tdestination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n\t\t}\n\t});\n\treturn destination\n}\n\nfunction deepmerge(target, source, options) {\n\toptions = options || {};\n\toptions.arrayMerge = options.arrayMerge || defaultArrayMerge;\n\toptions.isMergeableObject = options.isMergeableObject || isMergeableObject;\n\n\tvar sourceIsArray = Array.isArray(source);\n\tvar targetIsArray = Array.isArray(target);\n\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n\tif (!sourceAndTargetTypesMatch) {\n\t\treturn cloneUnlessOtherwiseSpecified(source, options)\n\t} else if (sourceIsArray) {\n\t\treturn options.arrayMerge(target, source, options)\n\t} else {\n\t\treturn mergeObject(target, source, options)\n\t}\n}\n\ndeepmerge.all = function deepmergeAll(array, options) {\n\tif (!Array.isArray(array)) {\n\t\tthrow new Error('first argument should be an array')\n\t}\n\n\treturn array.reduce(function(prev, next) {\n\t\treturn deepmerge(prev, next, options)\n\t}, {})\n};\n\nvar deepmerge_1 = deepmerge;\n\nreturn deepmerge_1;\n\n})));\n"]}