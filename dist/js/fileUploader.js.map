{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js/fileUploader.js","node_modules/deepmerge/dist/umd.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","_deepmerge","window","FileUploader","$el","options","_this","this","instance","console","log","_defaults","lang","useFileIcons","debug","debugLogStyle","name","undefined","pluginName","useLoadingBars","loadingBarsClasses","reloadedFilesClass","resultContainerClass","resultFileContainerClass","resultPrefix","resultInputNames","defaultFileExt","defaultMimeType","fileMaxSize","totalMaxSize","reloadArray","reloadHTML","linkButtonContent","deleteButtonContent","allowDuplicates","duplicatesWarning","HTMLTemplate","onload","onfileloadStart","onfileloadEnd","onfileDelete","filenameTest","langs","en","intro_msg","dropZone_msg","maxSizeExceeded_msg","totalMaxSizeExceeded_msg","duplicated_msg","name_placeHolder","_options","_round","value","Math","round","get","parameter","currentTotalSize","_logger","message","level","data","_fileType","fileName","ext","substring","lastIndexOf","indexOf","_fileDelete","event","element","index","target","dataset","closest","prev","remove","fileSize","$resultContainer","find","val","availableSize","availableLabel","children","html","$","addClass","_fileRename","$this","text","$input","nameTest","$fileThumbsContainer","preventDefault","setSelectionRange","start","stop","getData","each","file","title","push","_createUploaderContainer","fileExt","currentThumb","concat","insertAdjacentHTML","container","document","createElement","className","parseInt","style","position","appendChild","fileButtonsContainer","seeFileLink","deleteBtn","innerHTML","append","addEventListener","classes","join","currentLoadBar","prepend","currentTitle","setAttribute","currentExtension","on","selectionStart","selectionEnd","_createResultContainer","fileData","resultElemContainer","attr","type","result","size","_filesRead","filesList","DOM","approvedList","files","dataTransfer","loadedFiles","newFiles","first","forEach","newFile","$fileContainer","removeClass","$fileNameContainer","readFile","reader","currentElement","filter","onloadstart","onprogress","lengthComputable","percentLoaded","loaded","total","animate","width","onloadend","totalUploaded","resultObject","readAsDataURL","currentAvailableSize","errorMsg","currentLangObj","empty","setTimeout","opacity","totalRejected","startIndex","last","appendMessage","$message","FileReader","$info","globalIndex","template","querySelector","$loadBtn","dropZone","classList","add","loadedFile","passedInElement","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","querySelectorAll","Symbol","iterator","next","done","_step$value","_slicedToArray","substr","css","parseFloat","err","handleDragOver","stopPropagation","dropEffect","handleDrop","click","trigger","change","global","factory","isMergeableObject","isNonNullObject","stringValue","Object","prototype","toString","$$typeof","REACT_ELEMENT_TYPE","isReactElement","isSpecial","for","cloneUnlessOtherwiseSpecified","clone","deepmerge","Array","isArray","emptyTarget","defaultArrayMerge","source","map","mergeObject","destination","keys","key","customMerge","getMergeFunction","arrayMerge","sourceIsArray","all","array","reduce","define","amd"],"mappings":"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","file":"fileUploader.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import deepMerge from 'deepmerge';\n\n\n/*\n* fileUploader v4.0.0\n* Licensed under MIT (https://raw.githubusercontent.com/Cerealkillerway/fileUploader/master/license.txt)\n*/\n(function(context) {\n    context.FileUploader = function($el, options) {\n        let instance = this;\n        console.log(instance);\n\n        // default options\n        this._defaults = {\n            lang: 'en',\n            useFileIcons: true,\n\n            debug: false,                                                  // activate console logs for debug\n            debugLogStyle: 'color: #9900ff',                               // css style for debug console logs in js console\n            name: undefined,                                               // a name for plugin's instance (useful for debug purposes)\n            pluginName: 'FileUploader',                                    // plugin's name (used in debug logs alongside with name)\n\n            useLoadingBars: true,                                          // insert loading bar for files\n            loadingBarsClasses: [],                                        // array of strings for classnames for loading bars\n            reloadedFilesClass: 'reloadedElement',                         // class for previously uploaded files\n            resultContainerClass: 'result',                                // result container's class (where to place result files data)\n            resultFileContainerClass: 'uploadedFile',                      // class for every file result container span\n            resultPrefix: 'fileUploader',                                  // prefix for inputs in the file result container\n            resultInputNames: ['title', 'extension', 'value', 'size'],     // name suffix to be used for result inputs\n            defaultFileExt: '',                                            // extension to use for files with no extension\n            defaultMimeType: '',                                           // MIME type to use for files with no extension\n            fileMaxSize: 50,                                               // maximum allowed file size (in MB)\n            totalMaxSize: 1000,                                            // total maximum allowed size of all files\n            reloadArray: [],                                               // array of files to be reloaded at plugin startup\n            reloadHTML: undefined,                                         // HTML for reloaded files to place directly in result container\n            linkButtonContent: 'L',                                        // HTML content for link button\n            deleteButtonContent: 'X',                                      // HTML content for delete button\n            allowDuplicates: false,                                        // allow upload duplicates\n            duplicatesWarning: false,                                      // show a message in the loading area when trying to load a duplicated file\n\n            HTMLTemplate: () => {\n                return `<p class=\"introMsg\"></p>\n                    <div>\n                        <div class=\"inputContainer\">\n                            <input class=\"fileLoader\" type=\"file\" multiple />\n                        </div>\n                        <div class=\"dropZone\"></div>\n                        <div class=\"filesContainer filesContainerEmpty\">\n                            <div class=\"innerFileThumbs\"></div>\n                            <div style=\"clear:both;\"></div>\n                        </div>\n                    </div>\n                    <div class=\"result\"></div>`\n            },\n\n            onload: () => {},                                         // callback on plugin initialization\n            onfileloadStart: () => {},                                // callback on file reader start\n            onfileloadEnd: () => {},                                  // callback on file reader end\n            onfileDelete: () => {},                                   // callback on file delete\n            filenameTest: () => {},                                   // callback for testing filenames\n\n            langs: {\n                'en': {\n                    intro_msg: '(Add attachments...)',\n                    dropZone_msg: 'Drop your files here',\n                    maxSizeExceeded_msg: 'File too large',\n                    totalMaxSizeExceeded_msg: 'Total size exceeded',\n                    duplicated_msg: 'File duplicated (skipped)',\n                    name_placeHolder: 'name',\n                }\n            }\n        };\n\n        // extend options with instance ones\n        this._options = deepMerge(this._defaults, options);\n\n        // add more options\n        this.options = (options) => {\n            return (options) ? deepMerge(this._options, options) : this._options;\n        };\n\n        // round number\n        this._round = (value) => {\n            return Math.round(value * 100) / 100;\n        };\n\n        // return data\n        this.get = (parameter) => {\n            switch (parameter) {\n                case 'currentTotalSize':\n                return this._round(currentTotalSize);\n\n                case 'currentAvailableSize':\n                return this._round(this._options.totalMaxSize - currentTotalSize);\n            }\n        };\n\n        // debug logs function\n        this._logger = (message, level, data) => {\n            if (this._options.debug) {\n                if (level) {\n                    for (let i = 0; i < level; i++) {\n                        message = '\\u27A1 ' + message;\n                    }\n                }\n                if (this._options.name) {\n                    message = '[' + this._options.pluginName + ' - ' + this._options.name + '] ' + message;\n                }\n\n                if (data) {\n                    console.log('%c ' + message, this._options.debugLogStyle, data);\n                }\n                else {\n                    console.log('%c ' + message, this._options.debugLogStyle);\n                }\n            }\n        };\n\n        // file type identificator\n        this._fileType = (fileName) => {\n            let ext = fileName.substring(fileName.lastIndexOf('.') + 1, fileName.length);\n            let icons = ['pdf', 'jpg', 'png'];\n\n            if (icons.indexOf(ext) >= 0) {\n                return ext;\n            }\n            else {\n                return 'unknown-file';\n            }\n        };\n\n        // method for deleting a reader's result from result container\n        this._fileDelete = (event, data) => {\n            let element = data.element;\n            let index = event.target.dataset.delete;\n\n            if (!index) {\n                index = event.target.closest('div[data-delete]').dataset.delete;\n            }\n\n            // remove file block\n            if (this._options.useFileIcons) {\n                element.prev('img').remove();\n            }\n            element.remove();\n\n            // get file size\n            var fileSize = $resultContainer.find('input[name=\"' + this._options.resultPrefix + '[' + index + '][' + this._options.resultInputNames[3] + ']\"]').val();\n\n            fileSize = this._round(fileSize);\n\n            currentTotalSize = this._round(currentTotalSize - fileSize);\n\n            var availableSize = this._options.totalMaxSize - currentTotalSize;\n\n            availableSize = this._round(availableSize);\n            availableLabel.children('span').html(availableSize);\n\n            // remove result block\n            $resultContainer.children('div[data-index=\"' + index + '\"]').remove();\n\n            if ($('.innerFileThumbs').children().length === 0) {\n                $('.filesContainer').addClass('filesContainerEmpty');\n            }\n\n            this._logger('Deleted file N: ' + index, 2);\n\n            this._options.onfileDelete(index, currentTotalSize);\n        };\n\n        // method to rename file in result container accordingly to modifications by user\n        this._fileRename = (event) => {\n            var element = event.data.element;\n            var $this = $(event.target);\n            var ext = element.children('.fileExt').html();\n            var text = $this.val();\n            var index = element.data('index');\n            var $input = $resultContainer.find('div[data-index=\"' + index + '\"] input:first');\n            var nameTest = this._options.filenameTest(text, ext, $fileThumbsContainer);\n\n            if (nameTest === false) {\n                event.preventDefault();\n                return false;\n            }\n            if (nameTest !== undefined && nameTest !== true) {\n\n                text = nameTest;\n                $this.val(text);\n\n                // update input\n                if (ext.length > 0) {\n                    text = text + '.' + ext;\n                }\n\n                $input.val(text);\n\n                // restore selection range\n                $this[0].setSelectionRange(event.data.start, event.data.stop);\n            }\n        };\n\n        this.getData = () => {\n            let data = [];\n\n            this._logger('RECEIVED SAVE COMMAND:', 0);\n\n            $.each($resultContainer.children('.' + this._options.resultFileContainerClass), function(index, element) {\n                var file = {\n                    title: $($(element).children('input')[0]).val(),\n                    ext: $($(element).children('input')[1]).val(),\n                    value: $($(element).children('input')[2]).val()\n                };\n\n                data.push(file);\n            });\n\n            this._logger('%O', 0 ,data);\n            return data;\n        };\n\n        // create container for file uploading elements (icon, progress bar, etc...)\n        this._createUploaderContainer = (index, fileName, fileExt) => {\n            //insert file icon if requested\n            if (this._options.useFileIcons) {\n                let currentThumb = `<img src=\"/images/${this._fileType(fileExt)}.png\" class=\"fileThumb\" />`;\n                $fileThumbsContainer.insertAdjacentHTML('beforeend', currentThumb);\n            }\n\n            let container = document.createElement('div');\n            container.className = 'newElement';\n            container.dataset.index = parseInt(index);\n            container.style.position = 'relative';\n            $fileThumbsContainer.appendChild(container);\n\n            let fileButtonsContainer = document.createElement('div');\n            fileButtonsContainer.className = 'fileActions';\n            container.appendChild(fileButtonsContainer);\n\n            // file \"see\" link\n            let seeFileLink = `<a target=\"_blank\"><div class=\"fileSee\">${this._options.linkButtonContent}</div></a>`;\n            fileButtonsContainer.insertAdjacentHTML('beforeend', seeFileLink);\n\n            // delete button\n            let deleteBtn = document.createElement('div');\n            deleteBtn.className = 'fileDelete';\n            deleteBtn.dataset.delete = parseInt(index);\n            deleteBtn.innerHTML = this._options.deleteButtonContent;\n            fileButtonsContainer.append(deleteBtn);\n            deleteBtn.addEventListener('click', (event) => {\n                this._fileDelete(event, {element: container});\n            });\n\n            //insert loading bars if requested\n            if (this._options.useLoadingBars) {\n                let classes = this._options.loadingBarsClasses;\n\n                if (classes.length > 0) {\n                    classes = classes.join(' ');\n                }\n\n                let currentLoadBar = document.createElement('div');\n                currentLoadBar.className = `loadBar ${classes}`;\n                currentLoadBar.appendChild(document.createElement('div'));\n                container.prepend(currentLoadBar);\n            }\n\n            let currentTitle = document.createElement('input');\n            // TODO translate placeholder\n            currentTitle.setAttribute('placeholder', 'nome');\n            currentTitle.className = 'fileTitle';\n            let currentExtension = document.createElement('div');\n            currentExtension.className = 'fileExt';\n\n            container.prepend(currentExtension);\n            container.prepend(currentTitle);\n\n            //currentTitle.keypress({element: container}, this._fileRename);\n            currentTitle.on('keypress keyup paste', function(event) {\n                event.data = {};\n                event.data.element = container;\n                event.data.start = this.selectionStart;\n                event.data.stop = this.selectionEnd;\n                this._fileRename(event);\n            });\n\n            currentTitle.val(fileName);\n            currentExtension.html(fileExt);\n\n            return container;\n        };\n\n        this._createResultContainer = (fileData) => {\n            var index = fileData.index;\n            var resultElemContainer = $('<div data-index=\"' + index + '\" class=\"' + this._options.resultFileContainerClass + '\"></div>');\n\n            resultElemContainer.append($('<div>File: ' + index + '</div>'));\n            resultElemContainer.append($('<input/>').attr({type: 'text', name: this._options.resultPrefix + '[' + index + '][' + this._options.resultInputNames[0] + ']', value: fileData.name}));\n            resultElemContainer.append($('<input/>').attr({type: 'text', name: this._options.resultPrefix + '[' + index + '][' + this._options.resultInputNames[1] + ']', value: fileData.type}));\n            resultElemContainer.append($('<input/>').attr({type: 'text', name: this._options.resultPrefix + '[' + index + '][' + this._options.resultInputNames[2] + ']', value: fileData.result}));\n            resultElemContainer.append($('<input/>').attr({type: 'text', name: this._options.resultPrefix + '[' + index + '][' + this._options.resultInputNames[3] + ']', value: fileData.size}));\n\n            $resultContainer.append(resultElemContainer);\n        };\n\n        // files read function\n        this._filesRead = (event) => {\n            var DOM = event.data.DOM;\n            var filesList;\n            var approvedList = false;\n            var i = 0;\n\n            if (event.target.files) {\n                this._logger('files array source: file selector (click event)', 1);\n                filesList = event.target.files;\n            }\n            else {\n                this._logger('files array source: dropzone (drag & drop event)', 1);\n                filesList = event.dataTransfer.files;\n            }\n            this._logger('%O', 0, filesList);\n\n            // build approved list\n            if (!this._options.allowDuplicates) {\n                var loadedFiles = [];\n                var newFiles = [];\n\n                approvedList = [];\n\n                // build already loaded files list\n                $.each($resultContainer.children(), function(index, file) {\n                    loadedFiles.push($(file).children('input').first().val());\n                });\n\n                // build current selected files list\n                for (i = 0; i < filesList.length; i++) {\n                    newFiles.push(filesList[i].name);\n                }\n\n                // avoid load twice the same file\n                newFiles.forEach(function(newFile) {\n                    var fileIndex = loadedFiles.indexOf(newFile);\n\n                    if (fileIndex < 0) {\n                        approvedList.push(newFile);\n                    }\n                });\n            }\n\n            $fileContainer.removeClass('filesContainerEmpty');\n            // set selected file's name to fleNameContainer\n            $fileNameContainer.html('upload files');\n\n            let readFile = (reader, file, index, DOM) => {\n                var currentElement = DOM.find('.innerFileThumbs').children().filter(function() {\n                    return $(this).data('index') === index ;\n                });\n\n                var size = this._round(file.size / 1000000);      // size in MB\n\n                reader.onloadstart = () => {\n                    this._options.onfileloadStart(index);\n                    this._logger('START read file: ' + index + ', size: ' + size + ' MB', 2);\n                };\n\n                reader.onprogress = (event) => {\n                    if (event.lengthComputable) {\n                        var percentLoaded = this._round((event.loaded / event.total) * 100);\n                        this._logger('File ' + index + ' loaded: ' + percentLoaded, 3);\n\n                        // Increase the progress bar length.\n                        if (percentLoaded <= 100) {\n                            currentElement.children('.loadBar').children('div').animate({width: '100%'}, 500);\n                        }\n                    }\n                };\n\n                reader.onloadend = () => {\n                    var type = file.type;\n                    var name = file.name;\n                    var result = reader.result;\n\n                    // reading unsuccessful\n                    if (!result) {\n                        return false;\n                    }\n\n                    var mimeType = result.substring(0, result.indexOf(';'));\n\n                    // if file has no MIME type, replace with default one\n                    if (mimeType === \"data:\" && this._options.defaultMimeType.length > 0) {\n                        result = \"data:\" + this._options.defaultMimeType + result.substring(result.indexOf(';'), result.length);\n                    }\n\n                    if (type === \"\") {\n                        type = this._options.defaultMimeType;\n                    }\n                    if (name.indexOf('.') < 0 && this._options.defaultFileExt !== \"\") {\n                        name = name + '.' + this._options.defaultFileExt;\n                    }\n\n                    var newFile = {\n                        index: index,\n                        name: name,\n                        type: type,\n                        result: result,\n                        size: size\n                    };\n\n                    this._createResultContainer(newFile);\n\n                    //set direct link on file see button\n                    currentElement.children('.fileActions').children('a').attr('href', result);\n                    this._logger('END read file: ' + index, 4);\n\n                    var totalUploaded = parseInt($('#debugUploaded').html()) + 1;\n\n                    $('#debugUploaded').html(totalUploaded);\n\n                    var resultObject = {\n                        name: file.name,\n                        type: file.type,\n                        data: result,\n                        size: size\n                    };\n\n                    this._options.onfileloadEnd(index, resultObject, this._round(currentTotalSize));\n                };\n\n                if ((size <= this._options.fileMaxSize) && ((currentTotalSize + size) <= this._options.totalMaxSize)) {\n                    reader.readAsDataURL(file);\n\n                    // update total size\n                    currentTotalSize = currentTotalSize + size;\n\n                    var currentAvailableSize = this._options.totalMaxSize - currentTotalSize;\n\n                    availableLabel.children('span').html(this._round(currentAvailableSize));\n                }\n                else {\n                    var errorMsg = currentLangObj.totalMaxSizeExceeded_msg;\n\n                    if (size > this._options.fileMaxSize) {\n                        errorMsg = currentLangObj.maxSizeExceeded_msg;\n                        this._logger('FILE REJECTED: Max size exceeded - max size: ' + this._options.fileMaxSize + ' MB - file size: ' + size + ' MB');\n                    }\n                    else {\n                        this._logger('FILE REJECTED: Max total size exceeded - max size: ' + this._options.totalMaxSizeExceeded_msg + ' MB - current total size: ' + (currentTotalSize + size) + ' MB');\n                    }\n\n                    currentElement.addClass('error');\n                    currentElement.children('.loadBar').empty().append('<div class=\"errorMsg\">' + errorMsg + '</div>');\n\n                    setTimeout(() => {\n                        currentElement.animate({opacity: 0}, 300, function() {\n                            if (instance._options.useFileIcons) {\n                                $(this).prev('img').remove();\n                            }\n                            $(this).remove();\n                        });\n                    }, 2000);\n\n                    var totalRejected = parseInt($('#debugRejected').html()) + 1;\n                    $('#debugRejected').html(totalRejected);\n                }\n            }\n\n            var startIndex = $('#innerFileThumbs').children().last().attr('id');\n\n            if (startIndex !== undefined) {\n                startIndex = parseInt(startIndex.substring(startIndex.indexOf('-') + 1, startIndex.length)) + 1;\n            }\n            else {\n                startIndex = 0;\n            }\n\n            function appendMessage($message) {\n                setTimeout(() => {\n                    $message.animate({opacity: 0}, 300, function() {\n                        $(this).remove();\n                    });\n                }, 2000);\n            }\n\n            // create a new div containing thumb, delete button and title field for each target file\n            for (i = 0; i < filesList.length; i++) {\n                var file = filesList[i];\n                var reader = new FileReader();\n\n                // test for duplicates\n                if (approvedList && approvedList.indexOf(file.name) < 0) {\n                    if (this._options.duplicatesWarning) {\n                        var $info = $('<div class=\"errorLabel center\"></div>');\n\n                        $info.html(currentLangObj.duplicated_msg);\n                        $fileThumbsContainer.append($info);\n                        appendMessage($info);\n                    }\n\n                    this._logger('File duplicated: ' + file.name + ' -> skipping...', 2);\n                    continue;\n                }\n\n                var fileName, fileExt;\n\n                if (file.name.lastIndexOf('.') > 0) {\n                    fileName = file.name.substring(0, file.name.lastIndexOf('.'));\n                    fileExt = file.name.substring(file.name.lastIndexOf('.') + 1, file.name.length);\n                }\n                else {\n                    fileName = file.name;\n                    fileExt = this._options.defaultFileExt;\n                }\n\n                // test for filenames\n                var nameTest = this._options.filenameTest(fileName, fileExt, $fileThumbsContainer);\n                if (nameTest === false) {\n                    this._logger('Invalid file name: ' + file.name, 2);\n                    continue;\n                }\n                else {\n                    if (nameTest !== undefined && nameTest !== true) {\n                        fileName = nameTest;\n                    }\n                }\n\n                this._createUploaderContainer(globalIndex, fileName, fileExt);\n\n                // now read!\n                readFile(reader, file, globalIndex, DOM);\n                globalIndex++;\n            }\n        };\n\n        /*\n        *  -------------------------------------------------------------\n        *  |                       MAIN FLOW                           |\n        *  -------------------------------------------------------------\n        */\n        // initialization\n        if (this._options.name) {\n            this._logger('INITIALIZED INSTANCE: ' + this._options.name);\n        }\n        // build HTML template\n        let template = this._options.HTMLTemplate();\n\n        $el.insertAdjacentHTML('beforeend', template);\n\n        let globalIndex = 0;\n        let $resultContainer = $el.querySelector('.' + this._options.resultContainerClass);\n        let $loadBtn = $el.querySelector('.fileLoader');\n        let $fileContainer = $el.querySelector('.filesContainer');\n        let $fileNameContainer = $el.querySelector('.fileNameContainer');\n        let $fileThumbsContainer = $el.querySelector('.innerFileThumbs');\n        let dropZone = $el.querySelector('.dropZone');\n        let currentLangObj = this._options.langs[this._options.lang];\n\n        // place reloaded files' HTML in result container directly (if provided)\n        if (this._options.reloadHTML) {\n            $resultContainer.html(this._options.reloadHTML);\n        }\n\n\n        $el.querySelector('.introMsg').innerHTML = currentLangObj.intro_msg;\n        dropZone.innerHTML = currentLangObj.dropZone_msg;\n\n        if (!this._options.debug) {\n            $resultContainer.classList.add('hide');\n        }\n        else {\n            $resultContainer.insertAdjacentHTML('beforebegin', '<p class=\"debugMode\">Debug mode: on</p>');\n            $resultContainer.insertAdjacentHTML('beforebegin', '<div class=\"debug\">Uploaded files: <span id=\"debugUploaded\">0</span> | Rejected files: <span id=\"debugRejected\">0</span></div>');\n            $resultContainer.insertAdjacentHTML('beforebegin', '<div class=\"debug\">Current MAX FILE SIZE: ' + this._options.fileMaxSize + ' MB</div>');\n            $resultContainer.insertAdjacentHTML('beforebegin', '<div class=\"debug\">Current MAX TOTAL SIZE: ' + this._options.totalMaxSize + ' MB</div>');\n            $resultContainer.insertAdjacentHTML('beforebegin', '<div class=\"debug sizeAvailable\">Size still available: <span>' + this._options.totalMaxSize + '</span> MB</div>');\n        }\n\n        // --- FILES RELOAD SECTION ---\n        // lookup for previously loaded files placed in the result container directly\n        let availableLabel = $el.querySelector('.sizeAvailable');\n        let currentTotalSize = 0;\n        let loadedFile;\n\n        for (const [index, element] of $resultContainer.querySelectorAll(`:scope > .${this._options.resultFileContainerClass}`)) {\n            this._logger(`found previously uploaded file: index = ${element.dataset.index}`, 2);\n\n            // pay attention to index used on fileData here: index 0 is the title DIV!\n            let fileData = $(element).children('input');\n            let fileName = $(fileData[0]).val();\n            let fileExt = $(fileData[1]).val();\n            let fileSize = $(fileData[3]).val();\n\n            if (fileName.lastIndexOf('.') > 0) {\n                fileName = fileName.substr(0, fileName.lastIndexOf('.'));\n            }\n\n            loadedFile = this._createUploaderContainer(globalIndex, fileName, fileExt);\n            loadedFile.children('.loadBar').children('div').css({width: '100%'});\n            loadedFile.addClass(this._options.reloadedFilesClass);\n\n            currentTotalSize = currentTotalSize + parseFloat(fileSize);\n            globalIndex++;\n        }\n\n        // reload files from provided array\n        if (this._options.reloadArray.length > 0) {\n            this._options.reloadArray.forEach((file, index) => {\n                // re-create visible elements\n                loadedFile = this._createUploaderContainer(index, file.name, file.ext);\n                loadedFile.children('.loadBar').children('div').css({width: '100%'});\n                loadedFile.addClass(this._options.reloadedFilesClass);\n\n                this._logger('found previously uploaded file: index = ' + index, 2);\n\n                // re-create results\n                var newFile = {\n                    index: index,\n                    name: file.name,\n                    type: file.ext,\n                    result: file.data,\n                    size: file.size\n                };\n\n                this._createResultContainer(newFile);\n\n                currentTotalSize = currentTotalSize + parseFloat(file.size);\n                globalIndex++;\n            });\n        }\n\n        currentTotalSize = this._round(currentTotalSize);\n\n        this._logger('current total size: ' + currentTotalSize);\n        availableLabel.children('span').html(this._options.totalMaxSize - currentTotalSize);\n        // --- END FILES RELOAD SECTION ---\n\n        // onload callback\n        this._options.onload(this._options, currentTotalSize);\n\n        // Drag events\n        this.handleDragOver = (event) => {\n            $(dropZone).addClass('highlight');\n            event.stopPropagation();\n            event.preventDefault();\n            event.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.\n        }\n        this.handleDrop = (event) => {\n            $(dropZone).removeClass('highlight');\n            event.stopPropagation();\n            event.preventDefault();\n            event.data = {\n                DOM: $el\n            };\n            this._filesRead(event);\n        }\n\n        dropZone.addEventListener('dragleave', () => {\n            $(dropZone).removeClass('highlight');\n        });\n        dropZone.addEventListener('dragover', this.handleDragOver, false);\n        dropZone.addEventListener('drop', ((passedInElement) => {\n            return (event) => {\n                this.handleDrop(event, passedInElement);\n            };\n        }) (this), false);\n\n        $(dropZone).click(() => {\n            $loadBtn.trigger('click');\n        });\n\n        // fileUploader events\n        $loadBtn.change({DOM: $el}, (event) => {\n            this._filesRead(event);\n            this.value = null;\n        });\n\n    };\n\n    const fileUploader = function(methodOrOptions) {\n        var method = (typeof methodOrOptions === 'string') ? methodOrOptions : undefined;\n\n        const getFileUploader = () => {\n            var $el          = $(this);\n            var fileUploader = $el.data('fileUploader');\n\n            fileUploaders.push(fileUploader);\n        }\n\n        const applyMethod = (index) => {\n            var fileUploader = fileUploaders[index];\n\n            if (!fileUploader) {\n                console.warn('$.fileUploader not instantiated yet');\n                console.info(this);\n                results.push(undefined);\n                return;\n            }\n\n            if (typeof fileUploader[method] === 'function') {\n                var result = fileUploader[method].apply(fileUploader, args);\n                results.push(result);\n            } else {\n                console.warn('Method \\'' + method + '\\' not defined in $.fileUploader');\n            }\n        }\n\n        const init = () => {\n            var $el          = $(this);\n            var fileUploader = new FileUploader($el, options);\n\n            $el.data('fileUploader', fileUploader);\n        }\n\n        if (method) {\n            var fileUploaders = [];\n\n            this.each(getFileUploader);\n\n            var args = (arguments.length > 1) ? Array.prototype.slice.call(arguments, 1) : undefined;\n            var results = [];\n\n            this.each(applyMethod);\n\n            return (results.length > 1) ? results : results[0];\n        }\n        else {\n            var options = (typeof methodOrOptions === 'object') ? methodOrOptions : undefined;\n\n            return this.each(init);\n        }\n    };\n})(window);\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.deepmerge = factory());\n}(this, (function () { 'use strict';\n\nvar isMergeableObject = function isMergeableObject(value) {\n\treturn isNonNullObject(value)\n\t\t&& !isSpecial(value)\n};\n\nfunction isNonNullObject(value) {\n\treturn !!value && typeof value === 'object'\n}\n\nfunction isSpecial(value) {\n\tvar stringValue = Object.prototype.toString.call(value);\n\n\treturn stringValue === '[object RegExp]'\n\t\t|| stringValue === '[object Date]'\n\t\t|| isReactElement(value)\n}\n\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\nfunction isReactElement(value) {\n\treturn value.$$typeof === REACT_ELEMENT_TYPE\n}\n\nfunction emptyTarget(val) {\n\treturn Array.isArray(val) ? [] : {}\n}\n\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n\treturn (options.clone !== false && options.isMergeableObject(value))\n\t\t? deepmerge(emptyTarget(value), value, options)\n\t\t: value\n}\n\nfunction defaultArrayMerge(target, source, options) {\n\treturn target.concat(source).map(function(element) {\n\t\treturn cloneUnlessOtherwiseSpecified(element, options)\n\t})\n}\n\nfunction getMergeFunction(key, options) {\n\tif (!options.customMerge) {\n\t\treturn deepmerge\n\t}\n\tvar customMerge = options.customMerge(key);\n\treturn typeof customMerge === 'function' ? customMerge : deepmerge\n}\n\nfunction mergeObject(target, source, options) {\n\tvar destination = {};\n\tif (options.isMergeableObject(target)) {\n\t\tObject.keys(target).forEach(function(key) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n\t\t});\n\t}\n\tObject.keys(source).forEach(function(key) {\n\t\tif (!options.isMergeableObject(source[key]) || !target[key]) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n\t\t} else {\n\t\t\tdestination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n\t\t}\n\t});\n\treturn destination\n}\n\nfunction deepmerge(target, source, options) {\n\toptions = options || {};\n\toptions.arrayMerge = options.arrayMerge || defaultArrayMerge;\n\toptions.isMergeableObject = options.isMergeableObject || isMergeableObject;\n\n\tvar sourceIsArray = Array.isArray(source);\n\tvar targetIsArray = Array.isArray(target);\n\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n\tif (!sourceAndTargetTypesMatch) {\n\t\treturn cloneUnlessOtherwiseSpecified(source, options)\n\t} else if (sourceIsArray) {\n\t\treturn options.arrayMerge(target, source, options)\n\t} else {\n\t\treturn mergeObject(target, source, options)\n\t}\n}\n\ndeepmerge.all = function deepmergeAll(array, options) {\n\tif (!Array.isArray(array)) {\n\t\tthrow new Error('first argument should be an array')\n\t}\n\n\treturn array.reduce(function(prev, next) {\n\t\treturn deepmerge(prev, next, options)\n\t}, {})\n};\n\nvar deepmerge_1 = deepmerge;\n\nreturn deepmerge_1;\n\n})));\n"]}