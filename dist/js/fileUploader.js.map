{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js/fileUploader.js","node_modules/deepmerge/dist/umd.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","_deepmerge","window","FileUploader","$el","options","_this","this","instance","_defaults","lang","useFileIcons","debug","debugLogStyle","name","undefined","pluginName","useLoadingBars","loadingBarsClasses","reloadedFilesClass","resultContainerClass","resultFileContainerClass","resultPrefix","resultInputNames","defaultFileExt","defaultMimeType","maxFileSize","maxTotalSize","maxNumberOfFiles","reloadArray","reloadHTML","linkButtonContent","deleteButtonContent","showErrorOnLoadBar","allowDuplicates","duplicatesWarning","labelsContainers","labelsClasses","sizeAvailable","currentSize","currentNumberOfFiles","HTMLTemplate","onload","onfileloadStart","onfileloadEnd","onfileRejected","onfileDelete","filenameTest","langs","en","intro_msg","dropZone_msg","maxSizeExceeded_msg","maxTotalSizeExceeded_msg","maxNumberOfFilesExceeded_msg","duplicated_msg","name_placeHolder","updateLabel","type","value","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","instanceLabels","concat","Symbol","iterator","next","done","querySelector","innerHTML","err","_options","_round","Math","round","get","parameter","currentTotalSize","_logger","message","level","data","console","log","_fileType","fileName","ext","substring","lastIndexOf","indexOf","_fileDelete","event","element","index","target","dataset","closest","selector","sibling","previousElementSibling","matches","getPreviousSibling","remove","fileSize","$resultContainer","availableSize","document","children","classList","add","_fileRename","$this","text","$input","nameTest","$fileThumbsContainer","preventDefault","setSelectionRange","start","stop","getData","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","querySelectorAll","inputs","file","title","push","_createUploaderContainer","fileExt","currentThumb","insertAdjacentHTML","container","createElement","className","parseInt","style","position","appendChild","fileButtonsContainer","seeFileLink","addEventListener","content","open","write","deleteBtn","append","classes","join","currentLoadBar","prepend","currentTitle","setAttribute","currentExtension","events","handler","Array","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","_event","addMultipleListeners","selectionStart","selectionEnd","_createResultContainer","fileData","resultElemContainer","result","size","_filesRead","filesList","DOM","approvedList","files","dataTransfer","loadedFiles","newFiles","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","forEach","newFile","$fileContainer","readFile","reader","currentElement","from","filter","onloadstart","onprogress","lengthComputable","percentLoaded","loaded","total","width","onloadend","debugUploaded","getElementById","totalUploaded","resultObject","isReadAllowed","rejectReasons","readAsDataURL","currentAvailableSize","readAllowed","reasons","errorMsg","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","currentLangObj","loadBar","setTimeout","debugRejected","totalRejected","onFileRejected","readRejected","innerFileThumbsElements","startIndex","getAttribute","appendMessage","$message","_file","FileReader","$info","globalIndex","template","loadedFile","$loadBtn","dropZone","label","sizeAvailableLabels","currentNumberOfFilesLabels","getContainer","_label","findLabel","labels","isArray","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_container","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","entries","_step7$value","_slicedToArray","substr","parseFloat","handleDragOver","stopPropagation","dropEffect","handleDrop","click","fileUploader","elementDOM","global","factory","isMergeableObject","isNonNullObject","stringValue","Object","prototype","toString","$$typeof","REACT_ELEMENT_TYPE","isReactElement","isSpecial","for","cloneUnlessOtherwiseSpecified","clone","deepmerge","val","emptyTarget","defaultArrayMerge","source","map","mergeObject","destination","keys","key","customMerge","getMergeFunction","arrayMerge","sourceIsArray","all","array","reduce","prev","define","amd"],"mappings":"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","file":"fileUploader.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import deepMerge from 'deepmerge';\nimport { read } from 'fs';\n\n\n/*\n* fileUploader v5.4.13\n* Licensed under MIT (https://raw.githubusercontent.com/Cerealkillerway/fileUploader/master/license.txt)\n*/\n(function(context) {\n    context.FileUploader = function($el, options) {\n        let instance = this;\n\n        // default options\n        this._defaults = {\n            lang: 'en',\n            useFileIcons: true,\n\n            debug: false,                                                  // activate console logs for debug\n            debugLogStyle: 'color: #9900ff',                               // css style for debug console logs in js console\n            name: undefined,                                               // a name for plugin's instance (useful for debug purposes)\n            pluginName: 'FileUploader',                                    // plugin's name (used in debug logs alongside with name)\n\n            useLoadingBars: true,                                          // insert loading bar for files\n            loadingBarsClasses: [],                                        // array of strings for classnames for loading bars\n            reloadedFilesClass: 'reloadedElement',                         // class for previously uploaded files\n            resultContainerClass: 'result',                                // result container's class (where to place result files data)\n            resultFileContainerClass: 'uploadedFile',                      // class for every file result container span\n            resultPrefix: 'fileUploader',                                  // prefix for inputs in the file result container\n            resultInputNames: ['title', 'extension', 'value', 'size'],     // name suffix to be used for result inputs\n            defaultFileExt: '',                                            // extension to use for files with no extension\n            defaultMimeType: '',                                           // MIME type to use for files with no extension\n            maxFileSize: 50,                                               // maximum allowed file size (in MB)\n            maxTotalSize: 1000,                                            // total maximum allowed size of all files\n            maxNumberOfFiles: false,                                       // maximum number of files allowed to upload\n            reloadArray: [],                                               // array of files to be reloaded at plugin startup\n            reloadHTML: undefined,                                         // HTML for reloaded files to place directly in result container\n            linkButtonContent: 'L',                                        // HTML content for link button\n            deleteButtonContent: 'X',                                      // HTML content for delete button\n            showErrorOnLoadBar: true,                                      // decides if the reason for a rejected file will be displayed over its load bar;\n                                                                           // in case the file is rejected because of more than one reason, only the first one will be displayed on the bar;\n            allowDuplicates: false,                                        // allow upload duplicates\n            duplicatesWarning: false,                                      // show a message in the loading area when trying to load a duplicated file\n            labelsContainers: false,                                       // query selector for the container where to look for labels (ex. '#myId'), (default 'false' -> no labels;\n                                                                           // can be a string for a single value, or an array if the plugin has to update labels in many places;\n            labelsClasses: {                                               // dictionary of classes used by the various labels handled by the plugin\n                sizeAvailable: 'sizeAvailable',\n                currentSize: 'currentSize',\n                currentNumberOfFiles: 'currentNumberOfFiles',\n                maxFileSize: 'maxFileSize',\n                maxTotalSize: 'maxTotalSize',\n                maxNumberOfFiles: 'maxNumberOfFiles'\n            },\n\n            HTMLTemplate: () => {\n                return `<p class=\"introMsg\"></p>\n                    <div>\n                        <div class=\"inputContainer\">\n                            <input class=\"fileLoader\" type=\"file\" multiple />\n                        </div>\n                        <div class=\"dropZone\"></div>\n                        <div class=\"filesContainer filesContainerEmpty\">\n                            <div class=\"innerFileThumbs\"></div>\n                            <div style=\"clear:both;\"></div>\n                        </div>\n                    </div>\n                    <div class=\"result\"></div>`;\n            },\n\n            onload: () => {},                                             // callback on plugin initialization\n            onfileloadStart: () => {},                                    // callback on file reader start\n            onfileloadEnd: () => {},                                      // callback on file reader end\n            onfileRejected: () => {},                                     // callback on file rejected\n            onfileDelete: () => {},                                       // callback on file delete\n            filenameTest: () => {},                                       // callback for testing filenames\n\n            langs: {\n                'en': {\n                    intro_msg: '(Add attachments...)',\n                    dropZone_msg: 'Drop your files here',\n                    maxSizeExceeded_msg: 'File too large',\n                    maxTotalSizeExceeded_msg: 'Total size exceeded',\n                    maxNumberOfFilesExceeded_msg: 'Number of files allowed exceeded',\n                    duplicated_msg: 'File duplicated (skipped)',\n                    name_placeHolder: 'name',\n                }\n            }\n        };\n\n\n        // UTILITIES\n        const addMultipleListeners = function (element, events, handler) {\n            if (!(events instanceof Array)) {\n                this._logger('addMultipleListeners requires events to be an array');\n            }\n            for (const event of events) {\n                element.addEventListener(event, handler);\n            }\n        }\n\n        const getPreviousSibling = function(element, selector) {\n            let sibling = element.previousElementSibling;\n\n            if (!selector) return sibling;\n\n            while (sibling) {\n                if (sibling.matches(selector)) {\n                    return sibling;\n                }\n                sibling = sibling.previousElementSibling;\n            }\n        };\n\n        const updateLabel = function(type, value) {\n            for (let label of instanceLabels[`${type}Labels`]) {\n                label.querySelector(':scope > span').innerHTML = value;\n            }\n        }\n\n\n        // extend options with instance ones\n        this._options = deepMerge(this._defaults, options);\n\n\n        // add more options\n        this.options = (options) => {\n            return (options) ? deepMerge(this._options, options) : this._options;\n        };\n\n\n        // round number\n        this._round = (value) => {\n            return Math.round(value * 100) / 100;\n        };\n\n\n        // return data\n        this.get = (parameter) => {\n            switch (parameter) {\n                case 'currentTotalSize':\n                return this._round(currentTotalSize);\n\n                case 'currentAvailableSize':\n                return this._round(this._options.maxTotalSize - currentTotalSize);\n\n                case 'currentNumberOfFiles':\n                return currentNumberOfFiles;\n\n                case 'availableNumberOfFiles':\n                return this._options.maxNumberOfFiles - currentNumberOfFiles;\n            }\n        };\n\n\n        // debug logs function\n        this._logger = (message, level, data) => {\n            if (this._options.debug) {\n                if (level) {\n                    for (let i = 0; i < level; i++) {\n                        message = '\\u27A1 ' + message;\n                    }\n                }\n                if (this._options.name) {\n                    message = '[' + this._options.pluginName + ' - ' + this._options.name + '] ' + message;\n                }\n\n                if (data) {\n                    console.log('%c ' + message, this._options.debugLogStyle, data);\n                }\n                else {\n                    console.log('%c ' + message, this._options.debugLogStyle);\n                }\n            }\n        };\n\n\n        // file type identificator\n        this._fileType = (fileName) => {\n            let ext = fileName.substring(fileName.lastIndexOf('.') + 1, fileName.length);\n            let icons = ['pdf', 'jpg', 'png'];\n\n            if (icons.indexOf(ext) >= 0) {\n                return ext;\n            }\n            else {\n                return 'unknown-file';\n            }\n        };\n\n\n        // method for deleting a reader's result from result container\n        this._fileDelete = (event, data) => {\n            let element = data.element;\n            let index = event.target.dataset.delete;\n\n            if (!index) {\n                index = event.target.closest('div[data-delete]').dataset.delete;\n            }\n\n            // remove file block\n            if (this._options.useFileIcons) {\n                getPreviousSibling(element, 'img').remove();\n            }\n            element.remove();\n\n            // get file size\n            let fileSize = $resultContainer.querySelector(`input[name=\"${this._options.resultPrefix}[${index}][${this._options.resultInputNames[3]}]\"]`).value;\n\n            fileSize = this._round(fileSize);\n            currentTotalSize = this._round(currentTotalSize - fileSize);\n            currentNumberOfFiles--;\n\n            let availableSize = this._options.maxTotalSize - currentTotalSize;\n\n            availableSize = this._round(availableSize);\n            updateLabel('sizeAvailable', availableSize);\n            updateLabel('currentSize', currentTotalSize);\n            updateLabel('currentNumberOfFiles', currentNumberOfFiles);\n\n            // remove result block\n            $resultContainer.querySelector(`:scope > div[data-index=\"${index}\"]`).remove();\n\n            if (document.querySelector('.innerFileThumbs').children.length === 0) {\n                document.querySelector('.filesContainer').classList.add('filesContainerEmpty');\n            }\n\n            this._logger('Deleted file N: ' + index, 2);\n            this._options.onfileDelete(index, currentTotalSize, currentNumberOfFiles);\n        };\n\n\n        // method to rename file in result container accordingly to modifications by user\n        this._fileRename = (event) => {\n            let element = event.data.element;\n            let $this = event.target;\n            let ext = element.querySelector(':scope > .fileExt').innerHTML;\n            let text = $this.value;\n            let index = element.dataset.index;\n            let $input = $resultContainer.querySelector(`div[data-index=\"${index}\"] input`);\n            let nameTest = this._options.filenameTest(text, ext, $fileThumbsContainer);\n\n            if (nameTest === false) {\n                event.preventDefault();\n                return false;\n            }\n            if (nameTest !== undefined && nameTest !== true) {\n                text = nameTest;\n                $this.value = text;\n\n                // update input\n                /*if (ext.length > 0) {\n                    text = `${text}.${ext}`;\n                }*/\n\n                $input.value = text;\n                // restore selection range\n                $this.setSelectionRange(event.data.start, event.data.stop);\n            }\n        };\n\n\n        this.getData = () => {\n            let data = [];\n\n            this._logger('RECEIVED SAVE COMMAND:', 0);\n\n            for (const element of $resultContainer.querySelectorAll(`:scope > .${this._options.resultFileContainerClass}`)) {\n                let inputs = element.querySelectorAll(':scope > input');\n                let file = {\n                    title: inputs[0].value,\n                    ext: inputs[1].value,\n                    value: inputs[2].value\n                };\n\n                data.push(file);\n            }\n\n            this._logger('%O', 0 ,data);\n            return data;\n        };\n\n\n        // create container for file uploading elements (icon, progress bar, etc...)\n        this._createUploaderContainer = (index, fileName, fileExt) => {\n            //insert file icon if requested\n            if (this._options.useFileIcons) {\n                let currentThumb = `<img src=\"/images/${this._fileType(fileExt)}.png\" class=\"fileThumb\" />`;\n                $fileThumbsContainer.insertAdjacentHTML('beforeend', currentThumb);\n            }\n\n            let container = document.createElement('div');\n            container.className = 'newElement';\n            container.dataset.index = parseInt(index);\n            container.style.position = 'relative';\n            $fileThumbsContainer.appendChild(container);\n\n            let fileButtonsContainer = document.createElement('div');\n            fileButtonsContainer.className = 'fileActions';\n            container.appendChild(fileButtonsContainer);\n\n            // file \"see\" link\n            let seeFileLink = document.createElement('div');\n            seeFileLink.className = 'fileSee';\n            seeFileLink.innerHTML = this._options.linkButtonContent;\n            fileButtonsContainer.appendChild(seeFileLink);\n\n            seeFileLink.addEventListener('click', function(event) {\n                let index = event.target.closest('.newElement').dataset.index;\n                let content = $resultContainer.querySelector(`.uploadedFile[data-index=\"${index}\"] textarea`).value;\n                let win = window.open();\n\n                win.document.write(`<iframe src=\"${content}\" frameborder=\"0\" style=\"border:0; top:0px; display:block; left:0px; bottom:0px; right:0px; width:100%; min-height: 100vh; height:100%;\" allowfullscreen></iframe>`)\n            });\n\n            // delete button\n            let deleteBtn = document.createElement('div');\n            deleteBtn.className = 'fileDelete';\n            deleteBtn.dataset.delete = parseInt(index);\n            deleteBtn.innerHTML = this._options.deleteButtonContent;\n            fileButtonsContainer.append(deleteBtn);\n            deleteBtn.addEventListener('click', (event) => {\n                this._fileDelete(event, {element: container});\n            });\n\n            //insert loading bars if requested\n            if (this._options.useLoadingBars) {\n                let classes = this._options.loadingBarsClasses;\n\n                if (classes.length > 0) {\n                    classes = classes.join(' ');\n                }\n\n                let currentLoadBar = document.createElement('div');\n                currentLoadBar.className = `loadBar ${classes}`;\n                currentLoadBar.appendChild(document.createElement('div'));\n                container.prepend(currentLoadBar);\n            }\n\n            let currentTitle = document.createElement('input');\n\n            // TODO translate placeholder\n            currentTitle.setAttribute('placeholder', 'nome');\n            currentTitle.className = 'fileTitle';\n\n            let currentExtension = document.createElement('div');\n\n            currentExtension.className = 'fileExt';\n            container.prepend(currentExtension);\n            container.prepend(currentTitle);\n\n            addMultipleListeners(currentTitle, ['keypress', 'keyup', 'paste'], function(event) {\n                event.data = {};\n                event.data.element = container;\n                event.data.start = this.selectionStart;\n                event.data.stop = this.selectionEnd;\n                instance._fileRename(event);\n            });\n\n            currentTitle.value = fileName;\n            currentExtension.innerHTML = fileExt;\n\n            return container;\n        };\n\n\n        this._createResultContainer = (fileData) => {\n            let index = fileData.index;\n            let resultElemContainer = document.createElement('div');\n\n            resultElemContainer.className = this._options.resultFileContainerClass;\n            resultElemContainer.dataset.index = index;\n            resultElemContainer.insertAdjacentHTML('beforeend', `<div>File: ${index}</div>`);\n            resultElemContainer.insertAdjacentHTML('beforeend', `<input type=\"text\" name=\"${this._options.resultPrefix}[${index}][${this._options.resultInputNames[0]}]\" value=\"${fileData.name}\" />`);\n            resultElemContainer.insertAdjacentHTML('beforeend', `<input type=\"text\" name=\"${this._options.resultPrefix}[${index}][${this._options.resultInputNames[1]}]\" value=\"${fileData.type}\" />`);\n            resultElemContainer.insertAdjacentHTML('beforeend', `<textarea name=\"${this._options.resultPrefix}[${index}][${this._options.resultInputNames[2]}]\">${fileData.result}</textarea>`);\n            resultElemContainer.insertAdjacentHTML('beforeend', `<input type=\"text\" name=\"${this._options.resultPrefix}[${index}][${this._options.resultInputNames[3]}]\" value=\"${fileData.size}\" />`);\n            $resultContainer.appendChild(resultElemContainer);\n        };\n\n\n        // files read function\n        this._filesRead = (event) => {\n            let DOM = event.data.DOM;\n            let filesList;\n            let approvedList = false;\n            let i = 0;\n\n            if (event.target.files) {\n                this._logger('files array source: file selector (click event)', 1);\n                filesList = event.target.files;\n            }\n            else {\n                this._logger('files array source: dropzone (drag & drop event)', 1);\n                filesList = event.dataTransfer.files;\n            }\n            this._logger('%O', 0, filesList);\n\n            // build approved list\n            if (!this._options.allowDuplicates) {\n                let loadedFiles = [];\n                let newFiles = [];\n\n                approvedList = [];\n\n                // build already loaded files list\n                for(let file of $resultContainer.children) {\n                    loadedFiles.push(file.querySelector('input').value);\n                };\n\n                // build current selected files list\n                for (i = 0; i < filesList.length; i++) {\n                    newFiles.push(filesList[i].name);\n                }\n\n                // avoid load twice the same file\n                newFiles.forEach(function(newFile) {\n                    let fileIndex = loadedFiles.indexOf(newFile);\n\n                    if (fileIndex < 0) {\n                        approvedList.push(newFile);\n                    }\n                });\n            }\n\n            $fileContainer.classList.remove('filesContainerEmpty');\n\n            let readFile = (reader, file, index, DOM) => {\n                let currentElement = Array.from(DOM.querySelector('.innerFileThumbs').children).filter(function(element) {\n                    return parseInt(element.dataset.index) === index ;\n                });\n                currentElement = currentElement[0];\n                let size = this._round(file.size / 1000000);      // size in MB\n\n                reader.onloadstart = () => {\n                    this._options.onfileloadStart(index);\n                    this._logger(`START read file: ${index}, size: ${size} MB`, 2);\n                };\n\n                reader.onprogress = (event) => {\n                    if (event.lengthComputable) {\n                        let percentLoaded = this._round((event.loaded / event.total) * 100);\n                        this._logger(`File ${index} loaded: ${percentLoaded}`, 3);\n\n                        // Increase the progress bar length.\n                        if (percentLoaded <= 100) {\n                            currentElement.querySelector(':scope > .loadBar > div').style.width = '100%';\n                        }\n                    }\n                };\n\n                reader.onloadend = () => {\n                    let type = file.type;\n                    let name = file.name;\n                    let result = reader.result;\n\n                    // reading unsuccessful\n                    if (!result) {\n                        return false;\n                    }\n\n                    let mimeType = result.substring(0, result.indexOf(';'));\n\n                    // if file has no MIME type, replace with default one\n                    if (mimeType === 'data:' && this._options.defaultMimeType.length > 0) {\n                        result = \"data:\" + this._options.defaultMimeType + result.substring(result.indexOf(';'), result.length);\n                    }\n                    if (type === \"\") {\n                        type = this._options.defaultMimeType;\n                    }\n                    if (name.indexOf('.') < 0 && this._options.defaultFileExt !== '') {\n                        name = `${name}.${this._options.defaultFileExt}`;\n                    }\n\n                    let newFile = {\n                        index: index,\n                        name: name,\n                        type: type,\n                        result: result,\n                        size: size\n                    };\n\n                    this._createResultContainer(newFile);\n\n                    //set direct link on file see button\n                    this._logger(`END read file: ${index}`, 4);\n\n                    let debugUploaded = document.getElementById('debugUploaded');\n                    let totalUploaded = parseInt(debugUploaded.innerHTML) + 1;\n\n                    debugUploaded.innerHTML = totalUploaded;\n\n                    let resultObject = {\n                        name: file.name,\n                        type: file.type,\n                        data: result,\n                        size: size\n                    };\n\n                    this._options.onfileloadEnd(index, resultObject, this._round(currentTotalSize), currentNumberOfFiles);\n                };\n\n                // test if loading is allowed\n                function readAllowed(instance) {\n                    reader.readAsDataURL(file);\n\n                    // update total size\n                    currentTotalSize = currentTotalSize + size;\n                    currentNumberOfFiles++;\n\n                    let currentAvailableSize = instance._round(instance._options.maxTotalSize - currentTotalSize);\n\n                    updateLabel('sizeAvailable', currentAvailableSize);\n                    updateLabel('currentSize', currentTotalSize);\n                    updateLabel('currentNumberOfFiles', currentNumberOfFiles);\n                }\n\n                function readRejected(instance, reasons) {\n                    let errorMsg;\n\n                    for (let reason of reasons) {\n                        switch(reason) {\n                            case 'maxFileSize':\n                            errorMsg = currentLangObj.maxSizeExceeded_msg;\n                            instance._logger(`FILE REJECTED: Max file size exceeded - max size: ${instance._options.maxFileSize} MB - file size: ${size} MB`);\n                            break;\n    \n                            case 'maxTotalSize':\n                            errorMsg = currentLangObj.maxTotalSizeExceeded_msg;\n                            instance._logger(`FILE REJECTED: Max total size exceeded - max size: ${instance._options.maxTotalSize} MB - current total size: ${currentTotalSize + size} MB`);\n                            break;\n    \n                            case 'maxNumberOfFiles':\n                            errorMsg = currentLangObj.maxNumberOfFilesExceeded_msg;\n                            instance._logger(`FILE REJECTED: Max number of files exceeded - max number: ${instance._options.maxNumberOfFiles}`);\n                            break;\n                        }\n                    }\n\n                    currentElement.classList.add('error');\n\n                    if (instance._options.showErrorOnLoadBar) {\n                        let loadBar = currentElement.querySelector(':scope > .loadBar');\n                        loadBar.innerHTML = '';\n                        loadBar.insertAdjacentHTML('beforeend', `<div class=\"errorMsg\">${errorMsg}</div>`)\n                    }\n\n                    setTimeout(() => {\n                        if (instance._options.useFileIcons) {\n                            currentElement.getPreviousSibling('img').remove();\n                        }\n                        currentElement.remove();\n                    }, 2000);\n\n                    let debugRejected = document.getElementById('debugRejected');\n                    let totalRejected = parseInt(debugRejected.innerHTML) + 1;\n                    debugRejected.innerHTML = totalRejected;\n\n                    // error callback\n                    instance._options.onFileRejected(rejectReasons);\n                }\n                \n                let isReadAllowed = true;\n                let rejectReasons = [];\n\n                if (size > this._options.maxFileSize) {\n                    isReadAllowed = false;\n                    rejectReasons.push('maxFileSize');\n                }\n                if ((currentTotalSize + size) > this._options.maxTotalSize) {\n                    isReadAllowed = false;\n                    rejectReasons.push('maxTotalSize');\n                }\n                if (currentNumberOfFiles >= this._options.maxNumberOfFiles) {\n                    isReadAllowed = false;\n                    rejectReasons.push('maxNumberOfFiles');\n                }\n\n                isReadAllowed ? readAllowed(this) : readRejected(this, rejectReasons);\n            }\n\n            let innerFileThumbsElements = document.querySelector('.innerFileThumbs').children;\n            let startIndex = innerFileThumbsElements[innerFileThumbsElements.length - 1].getAttribute('index');\n\n            if (startIndex !== undefined) {\n                startIndex = parseInt(startIndex) + 1;\n            }\n            else {\n                startIndex = 0;\n            }\n\n            function appendMessage($message) {\n                setTimeout(() => {\n                    $message.remove();\n                }, 2000);\n            }\n\n            // create a new div containing thumb, delete button and title field for each target file\n            for (i = 0; i < filesList.length; i++) {\n                let file = filesList[i];\n                let reader = new FileReader();\n\n                // test for duplicates\n                if (approvedList && approvedList.indexOf(file.name) < 0) {\n                    if (this._options.duplicatesWarning) {\n                        let $info = document.createElement('div');\n                        $info.className = 'errorLabel center';\n\n                        $info.innerHTML = currentLangObj.duplicated_msg;\n                        $fileThumbsContainer.appendChild($info);\n                        appendMessage($info);\n                    }\n\n                    this._logger(`File duplicated: ${file.name} -> skipping...`, 2);\n                    continue;\n                }\n\n                let fileName, fileExt;\n\n                if (file.name.lastIndexOf('.') > 0) {\n                    fileName = file.name.substring(0, file.name.lastIndexOf('.'));\n                    fileExt = file.name.substring(file.name.lastIndexOf('.') + 1, file.name.length);\n                }\n                else {\n                    fileName = file.name;\n                    fileExt = this._options.defaultFileExt;\n                }\n\n                // test for filenames\n                let nameTest = this._options.filenameTest(fileName, fileExt, $fileThumbsContainer);\n                if (nameTest === false) {\n                    this._logger(`Invalid file name: ${file.name}`, 2);\n                    continue;\n                }\n                else {\n                    if (nameTest !== undefined && nameTest !== true) {\n                        fileName = nameTest;\n                    }\n                }\n\n                this._createUploaderContainer(globalIndex, fileName, fileExt);\n\n                // now read!\n                readFile(reader, file, globalIndex, DOM);\n                globalIndex++;\n            }\n        };\n\n        /*\n        *  -------------------------------------------------------------\n        *  |                       MAIN FLOW                           |\n        *  -------------------------------------------------------------\n        */\n        // initialization\n        if (this._options.name) {\n            this._logger('INITIALIZED INSTANCE: ' + this._options.name);\n        }\n        // build HTML template\n        let template = this._options.HTMLTemplate();\n\n        $el.insertAdjacentHTML('beforeend', template);\n\n        let globalIndex = 0;\n        let $resultContainer = $el.querySelector('.' + this._options.resultContainerClass);\n        let $loadBtn = $el.querySelector('.fileLoader');\n        let $fileContainer = $el.querySelector('.filesContainer');\n        let $fileThumbsContainer = $el.querySelector('.innerFileThumbs');\n        let dropZone = $el.querySelector('.dropZone');\n        let currentLangObj = this._options.langs[this._options.lang];\n        let currentTotalSize = 0;\n        let currentNumberOfFiles = 0;\n        let loadedFile;\n\n        // place reloaded files' HTML in result container directly (if provided)\n        if (this._options.reloadHTML) {\n            $resultContainer.innerHTML = this._options.reloadHTML;\n        }\n\n\n        $el.querySelector('.introMsg').innerHTML = currentLangObj.intro_msg;\n        dropZone.innerHTML = currentLangObj.dropZone_msg;\n\n        if (!this._options.debug) {\n            $resultContainer.classList.add('hide');\n        }\n        else {\n            $resultContainer.insertAdjacentHTML('beforebegin', '<p class=\"debugMode\">Debug mode: on</p>');\n            $resultContainer.insertAdjacentHTML('beforebegin', '<div class=\"debug\">Uploaded files: <span id=\"debugUploaded\">0</span> | Rejected files: <span id=\"debugRejected\">0</span></div>');\n            $resultContainer.insertAdjacentHTML('beforebegin', `<div class=\"debug\">MAX FILE SIZE: ${this._options.maxFileSize} MB</div>`);\n            $resultContainer.insertAdjacentHTML('beforebegin', `<div class=\"debug\">MAX TOTAL SIZE: ${this._options.maxTotalSize} MB</div>`);\n            $resultContainer.insertAdjacentHTML('beforebegin', `<div class=\"debug\">MAX NUMBER OF FILES: ${this._options.maxNumberOfFiles === false ? '(none)' : this._options.maxNumberOfFiles}</div>`);\n            $resultContainer.insertAdjacentHTML('beforebegin', `<div class=\"debug currentNumberOfFiles\">Number of files uploaded: <span>${currentNumberOfFiles}</span></div>`);\n            $resultContainer.insertAdjacentHTML('beforebegin', `<div class=\"debug sizeAvailable\">Size still available: <span>${this._options.maxTotalSize}</span> MB</div>`);\n        }\n\n        // --- FILES RELOAD SECTION ---\n        // lookup for previously loaded files placed in the result container directly\n        /* labelsClasses: {\n                sizeAvailable: 'sizeAvailable',\n                currentSize: 'currentSize',\n                currentNumberOfFiles: 'currentNumberOfFiles',\n                maxFileSize: 'maxFileSize',\n                maxTotalSize: 'maxTotalSize',\n                maxNumberOfFiles: 'maxNumberOfFiles'\n            }\n        */\n        let instanceLabels = {};\n        let labelsClasses = this._options.labelsClasses;\n        for (let label in labelsClasses) {\n            instanceLabels[`${label}Labels`] = [];\n        }\n        let labelsContainers = this._options.labelsContainers;\n\n        if (this._options.debug) {\n            // handle debug labels\n            // in the debug frame \"sizeAvailable\" is the only dynamic label that we need to store in order to update it when necessary\n            instanceLabels.sizeAvailableLabels.push($el.querySelector(`.${labelsClasses.sizeAvailable}`));\n            instanceLabels.currentNumberOfFilesLabels.push($el.querySelector(`.${labelsClasses.currentNumberOfFiles}`));\n        }\n        if (labelsContainers) {\n            const getContainer = function(selector) {\n                return document.querySelector(selector);\n            }\n\n            for (let label in labelsClasses) {\n                function findLabel(container, labelsClasses, label) {\n                    if (container) {\n                        let labels = container.querySelector(`.${labelsClasses[label]}`);\n                        \n                        if (labels) {\n                            instanceLabels[`${label}Labels`].push(labels);\n                        }\n                    }\n                    else {\n                        this._logger(`impossible to find labelContainer '${selector}'`, 1);\n                    }\n                }\n\n                if (Array.isArray(labelsContainers)) {\n                    for (let selector of labelsContainers) {\n                        let container = getContainer(selector);\n    \n                        findLabel(container, labelsClasses, label);\n                    }\n                }\n                else {\n                    let container = getContainer(labelsContainers);\n    \n                    if (container) {\n                        let labels = container.querySelector(`.${labelsClasses[label]}`);\n\n                        if (labels) {\n                            instanceLabels[`${label}Labels`].push(labels);\n                        }\n                    }\n                    else {\n                        this._logger(`impossible to find labelContainer '${labelsContainers}'`, 1);\n                    }\n                }\n            }\n        }\n\n        updateLabel('maxFileSize', this._options.maxFileSize);\n        updateLabel('maxTotalSize', this._options.maxTotalSize);\n        updateLabel('maxNumberOfFiles', this._options.maxNumberOfFiles);\n\n        for (const [index, element] of $resultContainer.querySelectorAll(`:scope > .${this._options.resultFileContainerClass}`).entries()) {\n            this._logger(`found previously uploaded file: index = ${element.dataset.index}`, 2);\n\n            // pay attention to index used on fileData here: index 0 is the title DIV!\n            let fileData = element.querySelectorAll(':scope > input');\n            let fileName = fileData[0].value;\n            let fileExt = fileData[1].value;\n            let fileSize = fileData[3].value;\n\n            if (fileName.lastIndexOf('.') > 0) {\n                fileName = fileName.substr(0, fileName.lastIndexOf('.'));\n            }\n\n            loadedFile = this._createUploaderContainer(globalIndex, fileName, fileExt);\n            loadedFile.querySelector(':scope > .loadBar > div').style.width = '100%';\n            loadedFile.classList.add(this._options.reloadedFilesClass);\n\n            currentTotalSize = currentTotalSize + parseFloat(fileSize);\n            currentNumberOfFiles++;\n            globalIndex++;\n        }\n\n        // reload files from provided array\n        if (this._options.reloadArray.length > 0) {\n            this._options.reloadArray.forEach((file, index) => {\n                // re-create visible elements\n                loadedFile = this._createUploaderContainer(index, file.name, file.ext);\n                loadedFile.querySelector(':scope > .loadBar > div').style.width = '100%';\n                loadedFile.classList.add(this._options.reloadedFilesClass);\n\n                this._logger('found previously uploaded file: index = ' + index, 2);\n\n                // re-create results\n                let newFile = {\n                    index: index,\n                    name: file.name,\n                    type: file.ext,\n                    result: file.data,\n                    size: file.size\n                };\n\n                this._createResultContainer(newFile);\n\n                currentTotalSize = currentTotalSize + parseFloat(file.size);\n                currentNumberOfFiles++;\n                globalIndex++;\n            });\n        }\n\n        currentTotalSize = this._round(currentTotalSize);\n\n        this._logger(`current total size: ${currentTotalSize} - current number of files: ${currentNumberOfFiles}`);\n        updateLabel('sizeAvailable', (this._options.maxTotalSize - currentTotalSize));\n        updateLabel('currentSize', currentTotalSize);\n        updateLabel('currentNumberOfFiles', currentNumberOfFiles);\n        // --- END FILES RELOAD SECTION ---\n\n        // onload callback\n        this._options.onload(this._options, currentTotalSize, currentNumberOfFiles);\n\n        // Drag events\n        this.handleDragOver = (event) => {\n            dropZone.classList.add('highlight');\n            event.stopPropagation();\n            event.preventDefault();\n            event.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.\n        }\n        this.handleDrop = (event) => {\n            dropZone.classList.remove('highlight');\n            event.data = {\n                DOM: $el\n            };\n            this._filesRead(event);\n        }\n\n        dropZone.addEventListener('dragleave', () => {\n            dropZone.classList.remove('highlight');\n        });\n        dropZone.addEventListener('dragover', this.handleDragOver);\n        dropZone.addEventListener('drop', () => {\n            event.stopPropagation();\n            event.preventDefault();\n            this.handleDrop(event);\n        });\n\n        dropZone.addEventListener('click', (event) => {\n            $loadBtn.click();\n        });\n\n        $loadBtn.addEventListener('change', (event) => {\n            event.data = {\n                DOM: $el\n            };\n            this._filesRead(event);\n            this.value = null;\n        });\n\n        return {\n            fileUploader: instance,\n            elementDOM: $el\n        };\n    };\n})(window);\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.deepmerge = factory());\n}(this, (function () { 'use strict';\n\nvar isMergeableObject = function isMergeableObject(value) {\n\treturn isNonNullObject(value)\n\t\t&& !isSpecial(value)\n};\n\nfunction isNonNullObject(value) {\n\treturn !!value && typeof value === 'object'\n}\n\nfunction isSpecial(value) {\n\tvar stringValue = Object.prototype.toString.call(value);\n\n\treturn stringValue === '[object RegExp]'\n\t\t|| stringValue === '[object Date]'\n\t\t|| isReactElement(value)\n}\n\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\nfunction isReactElement(value) {\n\treturn value.$$typeof === REACT_ELEMENT_TYPE\n}\n\nfunction emptyTarget(val) {\n\treturn Array.isArray(val) ? [] : {}\n}\n\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n\treturn (options.clone !== false && options.isMergeableObject(value))\n\t\t? deepmerge(emptyTarget(value), value, options)\n\t\t: value\n}\n\nfunction defaultArrayMerge(target, source, options) {\n\treturn target.concat(source).map(function(element) {\n\t\treturn cloneUnlessOtherwiseSpecified(element, options)\n\t})\n}\n\nfunction getMergeFunction(key, options) {\n\tif (!options.customMerge) {\n\t\treturn deepmerge\n\t}\n\tvar customMerge = options.customMerge(key);\n\treturn typeof customMerge === 'function' ? customMerge : deepmerge\n}\n\nfunction mergeObject(target, source, options) {\n\tvar destination = {};\n\tif (options.isMergeableObject(target)) {\n\t\tObject.keys(target).forEach(function(key) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n\t\t});\n\t}\n\tObject.keys(source).forEach(function(key) {\n\t\tif (!options.isMergeableObject(source[key]) || !target[key]) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n\t\t} else {\n\t\t\tdestination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n\t\t}\n\t});\n\treturn destination\n}\n\nfunction deepmerge(target, source, options) {\n\toptions = options || {};\n\toptions.arrayMerge = options.arrayMerge || defaultArrayMerge;\n\toptions.isMergeableObject = options.isMergeableObject || isMergeableObject;\n\n\tvar sourceIsArray = Array.isArray(source);\n\tvar targetIsArray = Array.isArray(target);\n\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n\tif (!sourceAndTargetTypesMatch) {\n\t\treturn cloneUnlessOtherwiseSpecified(source, options)\n\t} else if (sourceIsArray) {\n\t\treturn options.arrayMerge(target, source, options)\n\t} else {\n\t\treturn mergeObject(target, source, options)\n\t}\n}\n\ndeepmerge.all = function deepmergeAll(array, options) {\n\tif (!Array.isArray(array)) {\n\t\tthrow new Error('first argument should be an array')\n\t}\n\n\treturn array.reduce(function(prev, next) {\n\t\treturn deepmerge(prev, next, options)\n\t}, {})\n};\n\nvar deepmerge_1 = deepmerge;\n\nreturn deepmerge_1;\n\n})));\n"]}