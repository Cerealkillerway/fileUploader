{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js/fileUploader.js","node_modules/deepmerge/dist/umd.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","context","_deepmerge","window","console","log","FileUploader","$el","options","_this","this","instance","_defaults","lang","useFileIcons","debug","debugLogStyle","name","undefined","pluginName","useLoadingBars","loadingBarsClasses","reloadedFilesClass","resultContainerClass","resultFileContainerClass","resultPrefix","resultInputNames","defaultFileExt","defaultMimeType","fileMaxSize","totalMaxSize","reloadArray","reloadHTML","linkButtonContent","deleteButtonContent","allowDuplicates","duplicatesWarning","HTMLTemplate","onload","onfileloadStart","onfileloadEnd","onfileDelete","filenameTest","langs","en","intro_msg","dropZone_msg","maxSizeExceeded_msg","totalMaxSizeExceeded_msg","duplicated_msg","name_placeHolder","_options","_round","value","Math","round","get","parameter","currentTotalSize","_logger","message","level","data","_fileType","fileName","ext","substring","lastIndexOf","indexOf","_fileDelete","event","element","index","target","dataset","closest","prev","remove","fileSize","$resultContainer","find","val","availableSize","availableLabel","children","html","$","addClass","_fileRename","$this","text","$input","nameTest","$fileThumbsContainer","preventDefault","setSelectionRange","start","stop","getData","each","file","title","push","_createUploaderContainer","fileExt","currentThumb","concat","insertAdjacentHTML","container","document","createElement","className","parseInt","style","position","appendChild","fileButtonsContainer","seeFileLink","deleteBtn","innerHTML","append","addEventListener","classes","join","currentLoadBar","prepend","currentTitle","setAttribute","currentExtension","events","handler","Array","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","err","addMultipleListeners","selectionStart","selectionEnd","_createResultContainer","fileData","resultElemContainer","type","result","size","_filesRead","filesList","DOM","approvedList","files","dataTransfer","loadedFiles","newFiles","first","forEach","newFile","$fileContainer","removeClass","$fileNameContainer","readFile","reader","currentElement","filter","onloadstart","onprogress","lengthComputable","percentLoaded","loaded","total","animate","width","onloadend","attr","totalUploaded","resultObject","readAsDataURL","currentAvailableSize","errorMsg","currentLangObj","empty","setTimeout","opacity","totalRejected","startIndex","last","appendMessage","$message","FileReader","$info","globalIndex","template","querySelector","$loadBtn","dropZone","classList","add","loadedFile","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","querySelectorAll","entries","_step2$value","_slicedToArray","substr","parseFloat","handleDragOver","stopPropagation","dropEffect","handleDrop","passedInElement","dispatchEvent","global","factory","isMergeableObject","isNonNullObject","stringValue","Object","prototype","toString","$$typeof","REACT_ELEMENT_TYPE","isReactElement","isSpecial","for","cloneUnlessOtherwiseSpecified","clone","deepmerge","isArray","emptyTarget","defaultArrayMerge","source","map","mergeObject","destination","keys","key","customMerge","getMergeFunction","arrayMerge","sourceIsArray","all","array","reduce","define","amd"],"mappings":"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","file":"fileUploader.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import deepMerge from 'deepmerge';\n\n\n/*\n* fileUploader v4.0.0\n* Licensed under MIT (https://raw.githubusercontent.com/Cerealkillerway/fileUploader/master/license.txt)\n*/\n(function(context) {\n    console.log(context);\n    context.FileUploader = function($el, options) {\n        let instance = this;\n        console.log(instance);\n\n        // default options\n        this._defaults = {\n            lang: 'en',\n            useFileIcons: true,\n\n            debug: false,                                                  // activate console logs for debug\n            debugLogStyle: 'color: #9900ff',                               // css style for debug console logs in js console\n            name: undefined,                                               // a name for plugin's instance (useful for debug purposes)\n            pluginName: 'FileUploader',                                    // plugin's name (used in debug logs alongside with name)\n\n            useLoadingBars: true,                                          // insert loading bar for files\n            loadingBarsClasses: [],                                        // array of strings for classnames for loading bars\n            reloadedFilesClass: 'reloadedElement',                         // class for previously uploaded files\n            resultContainerClass: 'result',                                // result container's class (where to place result files data)\n            resultFileContainerClass: 'uploadedFile',                      // class for every file result container span\n            resultPrefix: 'fileUploader',                                  // prefix for inputs in the file result container\n            resultInputNames: ['title', 'extension', 'value', 'size'],     // name suffix to be used for result inputs\n            defaultFileExt: '',                                            // extension to use for files with no extension\n            defaultMimeType: '',                                           // MIME type to use for files with no extension\n            fileMaxSize: 50,                                               // maximum allowed file size (in MB)\n            totalMaxSize: 1000,                                            // total maximum allowed size of all files\n            reloadArray: [],                                               // array of files to be reloaded at plugin startup\n            reloadHTML: undefined,                                         // HTML for reloaded files to place directly in result container\n            linkButtonContent: 'L',                                        // HTML content for link button\n            deleteButtonContent: 'X',                                      // HTML content for delete button\n            allowDuplicates: false,                                        // allow upload duplicates\n            duplicatesWarning: false,                                      // show a message in the loading area when trying to load a duplicated file\n\n            HTMLTemplate: () => {\n                return `<p class=\"introMsg\"></p>\n                    <div>\n                        <div class=\"inputContainer\">\n                            <input class=\"fileLoader\" type=\"file\" multiple />\n                        </div>\n                        <div class=\"dropZone\"></div>\n                        <div class=\"filesContainer filesContainerEmpty\">\n                            <div class=\"innerFileThumbs\"></div>\n                            <div style=\"clear:both;\"></div>\n                        </div>\n                    </div>\n                    <div class=\"result\"></div>`\n            },\n\n            onload: () => {},                                         // callback on plugin initialization\n            onfileloadStart: () => {},                                // callback on file reader start\n            onfileloadEnd: () => {},                                  // callback on file reader end\n            onfileDelete: () => {},                                   // callback on file delete\n            filenameTest: () => {},                                   // callback for testing filenames\n\n            langs: {\n                'en': {\n                    intro_msg: '(Add attachments...)',\n                    dropZone_msg: 'Drop your files here',\n                    maxSizeExceeded_msg: 'File too large',\n                    totalMaxSizeExceeded_msg: 'Total size exceeded',\n                    duplicated_msg: 'File duplicated (skipped)',\n                    name_placeHolder: 'name',\n                }\n            }\n        };\n\n        const addMultipleListeners = function (element, events, handler) {\n            if (!(events instanceof Array)) {\n                this._logger('addMultipleListeners requires events to be an array');\n            }\n            for (const event of events) {\n                element.addEventListener(event, handler);\n            }\n        }\n\n        // extend options with instance ones\n        this._options = deepMerge(this._defaults, options);\n\n        // add more options\n        this.options = (options) => {\n            return (options) ? deepMerge(this._options, options) : this._options;\n        };\n\n        // round number\n        this._round = (value) => {\n            return Math.round(value * 100) / 100;\n        };\n\n        // return data\n        this.get = (parameter) => {\n            switch (parameter) {\n                case 'currentTotalSize':\n                return this._round(currentTotalSize);\n\n                case 'currentAvailableSize':\n                return this._round(this._options.totalMaxSize - currentTotalSize);\n            }\n        };\n\n        // debug logs function\n        this._logger = (message, level, data) => {\n            if (this._options.debug) {\n                if (level) {\n                    for (let i = 0; i < level; i++) {\n                        message = '\\u27A1 ' + message;\n                    }\n                }\n                if (this._options.name) {\n                    message = '[' + this._options.pluginName + ' - ' + this._options.name + '] ' + message;\n                }\n\n                if (data) {\n                    console.log('%c ' + message, this._options.debugLogStyle, data);\n                }\n                else {\n                    console.log('%c ' + message, this._options.debugLogStyle);\n                }\n            }\n        };\n\n        // file type identificator\n        this._fileType = (fileName) => {\n            let ext = fileName.substring(fileName.lastIndexOf('.') + 1, fileName.length);\n            let icons = ['pdf', 'jpg', 'png'];\n\n            if (icons.indexOf(ext) >= 0) {\n                return ext;\n            }\n            else {\n                return 'unknown-file';\n            }\n        };\n\n        // method for deleting a reader's result from result container\n        this._fileDelete = (event, data) => {\n            let element = data.element;\n            let index = event.target.dataset.delete;\n\n            if (!index) {\n                index = event.target.closest('div[data-delete]').dataset.delete;\n            }\n\n            // remove file block\n            if (this._options.useFileIcons) {\n                element.prev('img').remove();\n            }\n            element.remove();\n\n            // get file size\n            var fileSize = $resultContainer.find('input[name=\"' + this._options.resultPrefix + '[' + index + '][' + this._options.resultInputNames[3] + ']\"]').val();\n\n            fileSize = this._round(fileSize);\n\n            currentTotalSize = this._round(currentTotalSize - fileSize);\n\n            var availableSize = this._options.totalMaxSize - currentTotalSize;\n\n            availableSize = this._round(availableSize);\n            availableLabel.children('span').html(availableSize);\n\n            // remove result block\n            $resultContainer.children('div[data-index=\"' + index + '\"]').remove();\n\n            if ($('.innerFileThumbs').children().length === 0) {\n                $('.filesContainer').addClass('filesContainerEmpty');\n            }\n\n            this._logger('Deleted file N: ' + index, 2);\n\n            this._options.onfileDelete(index, currentTotalSize);\n        };\n\n        // method to rename file in result container accordingly to modifications by user\n        this._fileRename = (event) => {\n            var element = event.data.element;\n            var $this = $(event.target);\n            var ext = element.children('.fileExt').html();\n            var text = $this.val();\n            var index = element.data('index');\n            var $input = $resultContainer.find('div[data-index=\"' + index + '\"] input:first');\n            var nameTest = this._options.filenameTest(text, ext, $fileThumbsContainer);\n\n            if (nameTest === false) {\n                event.preventDefault();\n                return false;\n            }\n            if (nameTest !== undefined && nameTest !== true) {\n\n                text = nameTest;\n                $this.val(text);\n\n                // update input\n                if (ext.length > 0) {\n                    text = text + '.' + ext;\n                }\n\n                $input.val(text);\n\n                // restore selection range\n                $this[0].setSelectionRange(event.data.start, event.data.stop);\n            }\n        };\n\n        this.getData = () => {\n            let data = [];\n\n            this._logger('RECEIVED SAVE COMMAND:', 0);\n\n            $.each($resultContainer.children('.' + this._options.resultFileContainerClass), function(index, element) {\n                var file = {\n                    title: $($(element).children('input')[0]).val(),\n                    ext: $($(element).children('input')[1]).val(),\n                    value: $($(element).children('input')[2]).val()\n                };\n\n                data.push(file);\n            });\n\n            this._logger('%O', 0 ,data);\n            return data;\n        };\n\n        // create container for file uploading elements (icon, progress bar, etc...)\n        this._createUploaderContainer = (index, fileName, fileExt) => {\n            //insert file icon if requested\n            if (this._options.useFileIcons) {\n                let currentThumb = `<img src=\"/images/${this._fileType(fileExt)}.png\" class=\"fileThumb\" />`;\n                $fileThumbsContainer.insertAdjacentHTML('beforeend', currentThumb);\n            }\n\n            let container = document.createElement('div');\n            container.className = 'newElement';\n            container.dataset.index = parseInt(index);\n            container.style.position = 'relative';\n            $fileThumbsContainer.appendChild(container);\n\n            let fileButtonsContainer = document.createElement('div');\n            fileButtonsContainer.className = 'fileActions';\n            container.appendChild(fileButtonsContainer);\n\n            // file \"see\" link\n            let seeFileLink = `<a target=\"_blank\"><div class=\"fileSee\">${this._options.linkButtonContent}</div></a>`;\n            fileButtonsContainer.insertAdjacentHTML('beforeend', seeFileLink);\n\n            // delete button\n            let deleteBtn = document.createElement('div');\n            deleteBtn.className = 'fileDelete';\n            deleteBtn.dataset.delete = parseInt(index);\n            deleteBtn.innerHTML = this._options.deleteButtonContent;\n            fileButtonsContainer.append(deleteBtn);\n            deleteBtn.addEventListener('click', (event) => {\n                this._fileDelete(event, {element: container});\n            });\n\n            //insert loading bars if requested\n            if (this._options.useLoadingBars) {\n                let classes = this._options.loadingBarsClasses;\n\n                if (classes.length > 0) {\n                    classes = classes.join(' ');\n                }\n\n                let currentLoadBar = document.createElement('div');\n                currentLoadBar.className = `loadBar ${classes}`;\n                currentLoadBar.appendChild(document.createElement('div'));\n                container.prepend(currentLoadBar);\n            }\n\n            let currentTitle = document.createElement('input');\n            // TODO translate placeholder\n            currentTitle.setAttribute('placeholder', 'nome');\n            currentTitle.className = 'fileTitle';\n            let currentExtension = document.createElement('div');\n            currentExtension.className = 'fileExt';\n\n            container.prepend(currentExtension);\n            container.prepend(currentTitle);\n\n            addMultipleListeners(currentTitle, ['keypress', 'keyup', 'paste'], function(event) {\n                event.data = {};\n                event.data.element = container;\n                event.data.start = this.selectionStart;\n                event.data.stop = this.selectionEnd;\n                this._fileRename(event);\n            });\n\n            currentTitle.value = fileName;\n            currentExtension.innerHTML = fileExt;\n\n            return container;\n        };\n\n        this._createResultContainer = (fileData) => {\n            let index = fileData.index;\n            let resultElemContainer = document.createElement('div');\n\n            resultElemContainer.className = 'this._options.resultFileContainerClass';\n            resultElemContainer.dataset.index = index;\n            resultElemContainer.insertAdjacentHTML('beforeend', `<div>File: ${index}</div>`);\n            resultElemContainer.insertAdjacentHTML('beforeend', `<input type=\"text\" name=\"${this._options.resultPrefix}[${index}][${this._options.resultInputNames[0]}]\" value=\"${fileData.name}\" />`);\n            resultElemContainer.insertAdjacentHTML('beforeend', `<input type=\"text\" name=\"${this._options.resultPrefix}[${index}][${this._options.resultInputNames[1]}]\" value=\"${fileData.type}\" />`);\n            resultElemContainer.insertAdjacentHTML('beforeend', `<input type=\"text\" name=\"${this._options.resultPrefix}[${index}][${this._options.resultInputNames[2]}]\" value=\"${fileData.result}\" />`);\n            resultElemContainer.insertAdjacentHTML('beforeend', `<input type=\"text\" name=\"${this._options.resultPrefix}[${index}][${this._options.resultInputNames[3]}]\" value=\"${fileData.size}\" />`);\n            $resultContainer.appendChild(resultElemContainer);\n        };\n\n        // files read function\n        this._filesRead = (event) => {\n            var DOM = event.data.DOM;\n            var filesList;\n            var approvedList = false;\n            var i = 0;\n\n            if (event.target.files) {\n                this._logger('files array source: file selector (click event)', 1);\n                filesList = event.target.files;\n            }\n            else {\n                this._logger('files array source: dropzone (drag & drop event)', 1);\n                filesList = event.dataTransfer.files;\n            }\n            this._logger('%O', 0, filesList);\n\n            // build approved list\n            if (!this._options.allowDuplicates) {\n                var loadedFiles = [];\n                var newFiles = [];\n\n                approvedList = [];\n\n                // build already loaded files list\n                $.each($resultContainer.children(), function(index, file) {\n                    loadedFiles.push($(file).children('input').first().val());\n                });\n\n                // build current selected files list\n                for (i = 0; i < filesList.length; i++) {\n                    newFiles.push(filesList[i].name);\n                }\n\n                // avoid load twice the same file\n                newFiles.forEach(function(newFile) {\n                    var fileIndex = loadedFiles.indexOf(newFile);\n\n                    if (fileIndex < 0) {\n                        approvedList.push(newFile);\n                    }\n                });\n            }\n\n            $fileContainer.removeClass('filesContainerEmpty');\n            // set selected file's name to fleNameContainer\n            $fileNameContainer.html('upload files');\n\n            let readFile = (reader, file, index, DOM) => {\n                var currentElement = DOM.find('.innerFileThumbs').children().filter(function() {\n                    return $(this).data('index') === index ;\n                });\n\n                var size = this._round(file.size / 1000000);      // size in MB\n\n                reader.onloadstart = () => {\n                    this._options.onfileloadStart(index);\n                    this._logger('START read file: ' + index + ', size: ' + size + ' MB', 2);\n                };\n\n                reader.onprogress = (event) => {\n                    if (event.lengthComputable) {\n                        var percentLoaded = this._round((event.loaded / event.total) * 100);\n                        this._logger('File ' + index + ' loaded: ' + percentLoaded, 3);\n\n                        // Increase the progress bar length.\n                        if (percentLoaded <= 100) {\n                            currentElement.children('.loadBar').children('div').animate({width: '100%'}, 500);\n                        }\n                    }\n                };\n\n                reader.onloadend = () => {\n                    var type = file.type;\n                    var name = file.name;\n                    var result = reader.result;\n\n                    // reading unsuccessful\n                    if (!result) {\n                        return false;\n                    }\n\n                    var mimeType = result.substring(0, result.indexOf(';'));\n\n                    // if file has no MIME type, replace with default one\n                    if (mimeType === \"data:\" && this._options.defaultMimeType.length > 0) {\n                        result = \"data:\" + this._options.defaultMimeType + result.substring(result.indexOf(';'), result.length);\n                    }\n\n                    if (type === \"\") {\n                        type = this._options.defaultMimeType;\n                    }\n                    if (name.indexOf('.') < 0 && this._options.defaultFileExt !== \"\") {\n                        name = name + '.' + this._options.defaultFileExt;\n                    }\n\n                    var newFile = {\n                        index: index,\n                        name: name,\n                        type: type,\n                        result: result,\n                        size: size\n                    };\n\n                    this._createResultContainer(newFile);\n\n                    //set direct link on file see button\n                    currentElement.children('.fileActions').children('a').attr('href', result);\n                    this._logger('END read file: ' + index, 4);\n\n                    var totalUploaded = parseInt($('#debugUploaded').html()) + 1;\n\n                    $('#debugUploaded').html(totalUploaded);\n\n                    var resultObject = {\n                        name: file.name,\n                        type: file.type,\n                        data: result,\n                        size: size\n                    };\n\n                    this._options.onfileloadEnd(index, resultObject, this._round(currentTotalSize));\n                };\n\n                if ((size <= this._options.fileMaxSize) && ((currentTotalSize + size) <= this._options.totalMaxSize)) {\n                    reader.readAsDataURL(file);\n\n                    // update total size\n                    currentTotalSize = currentTotalSize + size;\n\n                    var currentAvailableSize = this._options.totalMaxSize - currentTotalSize;\n\n                    availableLabel.children('span').html(this._round(currentAvailableSize));\n                }\n                else {\n                    var errorMsg = currentLangObj.totalMaxSizeExceeded_msg;\n\n                    if (size > this._options.fileMaxSize) {\n                        errorMsg = currentLangObj.maxSizeExceeded_msg;\n                        this._logger('FILE REJECTED: Max size exceeded - max size: ' + this._options.fileMaxSize + ' MB - file size: ' + size + ' MB');\n                    }\n                    else {\n                        this._logger('FILE REJECTED: Max total size exceeded - max size: ' + this._options.totalMaxSizeExceeded_msg + ' MB - current total size: ' + (currentTotalSize + size) + ' MB');\n                    }\n\n                    currentElement.addClass('error');\n                    currentElement.children('.loadBar').empty().append('<div class=\"errorMsg\">' + errorMsg + '</div>');\n\n                    setTimeout(() => {\n                        currentElement.animate({opacity: 0}, 300, function() {\n                            if (instance._options.useFileIcons) {\n                                $(this).prev('img').remove();\n                            }\n                            $(this).remove();\n                        });\n                    }, 2000);\n\n                    var totalRejected = parseInt($('#debugRejected').html()) + 1;\n                    $('#debugRejected').html(totalRejected);\n                }\n            }\n\n            var startIndex = $('#innerFileThumbs').children().last().attr('id');\n\n            if (startIndex !== undefined) {\n                startIndex = parseInt(startIndex.substring(startIndex.indexOf('-') + 1, startIndex.length)) + 1;\n            }\n            else {\n                startIndex = 0;\n            }\n\n            function appendMessage($message) {\n                setTimeout(() => {\n                    $message.animate({opacity: 0}, 300, function() {\n                        $(this).remove();\n                    });\n                }, 2000);\n            }\n\n            // create a new div containing thumb, delete button and title field for each target file\n            for (i = 0; i < filesList.length; i++) {\n                var file = filesList[i];\n                var reader = new FileReader();\n\n                // test for duplicates\n                if (approvedList && approvedList.indexOf(file.name) < 0) {\n                    if (this._options.duplicatesWarning) {\n                        var $info = $('<div class=\"errorLabel center\"></div>');\n\n                        $info.html(currentLangObj.duplicated_msg);\n                        $fileThumbsContainer.append($info);\n                        appendMessage($info);\n                    }\n\n                    this._logger('File duplicated: ' + file.name + ' -> skipping...', 2);\n                    continue;\n                }\n\n                var fileName, fileExt;\n\n                if (file.name.lastIndexOf('.') > 0) {\n                    fileName = file.name.substring(0, file.name.lastIndexOf('.'));\n                    fileExt = file.name.substring(file.name.lastIndexOf('.') + 1, file.name.length);\n                }\n                else {\n                    fileName = file.name;\n                    fileExt = this._options.defaultFileExt;\n                }\n\n                // test for filenames\n                var nameTest = this._options.filenameTest(fileName, fileExt, $fileThumbsContainer);\n                if (nameTest === false) {\n                    this._logger('Invalid file name: ' + file.name, 2);\n                    continue;\n                }\n                else {\n                    if (nameTest !== undefined && nameTest !== true) {\n                        fileName = nameTest;\n                    }\n                }\n\n                this._createUploaderContainer(globalIndex, fileName, fileExt);\n\n                // now read!\n                readFile(reader, file, globalIndex, DOM);\n                globalIndex++;\n            }\n        };\n\n        /*\n        *  -------------------------------------------------------------\n        *  |                       MAIN FLOW                           |\n        *  -------------------------------------------------------------\n        */\n        // initialization\n        if (this._options.name) {\n            this._logger('INITIALIZED INSTANCE: ' + this._options.name);\n        }\n        // build HTML template\n        let template = this._options.HTMLTemplate();\n\n        $el.insertAdjacentHTML('beforeend', template);\n\n        let globalIndex = 0;\n        let $resultContainer = $el.querySelector('.' + this._options.resultContainerClass);\n        let $loadBtn = $el.querySelector('.fileLoader');\n        let $fileContainer = $el.querySelector('.filesContainer');\n        let $fileNameContainer = $el.querySelector('.fileNameContainer');\n        let $fileThumbsContainer = $el.querySelector('.innerFileThumbs');\n        let dropZone = $el.querySelector('.dropZone');\n        let currentLangObj = this._options.langs[this._options.lang];\n\n        // place reloaded files' HTML in result container directly (if provided)\n        if (this._options.reloadHTML) {\n            $resultContainer.innerHTML = this._options.reloadHTML;\n        }\n\n\n        $el.querySelector('.introMsg').innerHTML = currentLangObj.intro_msg;\n        dropZone.innerHTML = currentLangObj.dropZone_msg;\n\n        if (!this._options.debug) {\n            $resultContainer.classList.add('hide');\n        }\n        else {\n            $resultContainer.insertAdjacentHTML('beforebegin', '<p class=\"debugMode\">Debug mode: on</p>');\n            $resultContainer.insertAdjacentHTML('beforebegin', '<div class=\"debug\">Uploaded files: <span id=\"debugUploaded\">0</span> | Rejected files: <span id=\"debugRejected\">0</span></div>');\n            $resultContainer.insertAdjacentHTML('beforebegin', '<div class=\"debug\">Current MAX FILE SIZE: ' + this._options.fileMaxSize + ' MB</div>');\n            $resultContainer.insertAdjacentHTML('beforebegin', '<div class=\"debug\">Current MAX TOTAL SIZE: ' + this._options.totalMaxSize + ' MB</div>');\n            $resultContainer.insertAdjacentHTML('beforebegin', '<div class=\"debug sizeAvailable\">Size still available: <span>' + this._options.totalMaxSize + '</span> MB</div>');\n        }\n\n        // --- FILES RELOAD SECTION ---\n        // lookup for previously loaded files placed in the result container directly\n        let availableLabel = $el.querySelector('.sizeAvailable');\n        let currentTotalSize = 0;\n        let loadedFile;\n\n        for (const [index, element] of $resultContainer.querySelectorAll(`:scope > .${this._options.resultFileContainerClass}`).entries()) {\n            this._logger(`found previously uploaded file: index = ${element.dataset.index}`, 2);\n\n            // pay attention to index used on fileData here: index 0 is the title DIV!\n            let fileData = element.querySelectorAll(':scope > input');\n            let fileName = fileData[0].value;\n            let fileExt = fileData[1].value;\n            let fileSize = fileData[3].value;\n\n            if (fileName.lastIndexOf('.') > 0) {\n                fileName = fileName.substr(0, fileName.lastIndexOf('.'));\n            }\n\n            loadedFile = this._createUploaderContainer(globalIndex, fileName, fileExt);\n            loadedFile.querySelector(':scope > .loadBar > div').style.width = '100%';\n            loadedFile.classList.add(this._options.reloadedFilesClass);\n\n            currentTotalSize = currentTotalSize + parseFloat(fileSize);\n            globalIndex++;\n        }\n\n        // reload files from provided array\n        if (this._options.reloadArray.length > 0) {\n            this._options.reloadArray.forEach((file, index) => {\n                // re-create visible elements\n                loadedFile = this._createUploaderContainer(index, file.name, file.ext);\n                loadedFile.querySelector(':scope > .loadBar > div').style.width = '100%';\n                loadedFile.classList.add(this._options.reloadedFilesClass);\n\n                this._logger('found previously uploaded file: index = ' + index, 2);\n\n                // re-create results\n                let newFile = {\n                    index: index,\n                    name: file.name,\n                    type: file.ext,\n                    result: file.data,\n                    size: file.size\n                };\n\n                this._createResultContainer(newFile);\n\n                currentTotalSize = currentTotalSize + parseFloat(file.size);\n                globalIndex++;\n            });\n        }\n\n        currentTotalSize = this._round(currentTotalSize);\n\n        this._logger('current total size: ' + currentTotalSize);\n        availableLabel.querySelector(':scope > span').innerHTML = (this._options.totalMaxSize - currentTotalSize);\n        // --- END FILES RELOAD SECTION ---\n\n        // onload callback\n        this._options.onload(this._options, currentTotalSize);\n\n        // Drag events\n        this.handleDragOver = (event) => {\n            dropZone.classList.add('highlight');\n            event.stopPropagation();\n            event.preventDefault();\n            event.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.\n        }\n        this.handleDrop = (event) => {\n            dropZone.classList.remove('highlight');\n            event.stopPropagation();\n            event.preventDefault();\n            event.data = {\n                DOM: $el\n            };\n            this._filesRead(event);\n        }\n\n        dropZone.addEventListener('dragleave', () => {\n            dropZone.classList.remove('highlight');\n        });\n        dropZone.addEventListener('dragover', this.handleDragOver, false);\n        dropZone.addEventListener('drop', (passedInElement) => {\n            return (event) => {\n                this.handleDrop(event, passedInElement);\n            };\n        }, false);\n\n        dropZone.addEventListener('click', (event) => {\n            $loadBtn.dispatchEvent(event);\n        });\n\n        $loadBtn.addEventListener('change', (event) => {\n            event.data = {\n                DOM: $el\n            };\n            this._filesRead(event);\n            this.value = null;\n        });\n    };\n\n    const fileUploader = function(methodOrOptions) {\n        let method = (typeof methodOrOptions === 'string') ? methodOrOptions : undefined;\n\n        const getFileUploader = () => {\n            let $el          = $(this);\n            let fileUploader = $el.data('fileUploader');\n\n            fileUploaders.push(fileUploader);\n        }\n\n        const applyMethod = (index) => {\n            let fileUploader = fileUploaders[index];\n\n            if (!fileUploader) {\n                console.warn('$.fileUploader not instantiated yet');\n                console.info(this);\n                results.push(undefined);\n                return;\n            }\n\n            if (typeof fileUploader[method] === 'function') {\n                let result = fileUploader[method].apply(fileUploader, args);\n                results.push(result);\n            } else {\n                console.warn('Method \\'' + method + '\\' not defined in $.fileUploader');\n            }\n        }\n\n        const init = () => {\n            let $el          = $(this);\n            let fileUploader = new FileUploader($el, options);\n\n            $el.data('fileUploader', fileUploader);\n        }\n\n        if (method) {\n            let fileUploaders = [];\n\n            this.each(getFileUploader);\n\n            let args = (arguments.length > 1) ? Array.prototype.slice.call(arguments, 1) : undefined;\n            let results = [];\n\n            this.each(applyMethod);\n\n            return (results.length > 1) ? results : results[0];\n        }\n        else {\n            let options = (typeof methodOrOptions === 'object') ? methodOrOptions : undefined;\n\n            return this.each(init);\n        }\n    };\n})(window);\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.deepmerge = factory());\n}(this, (function () { 'use strict';\n\nvar isMergeableObject = function isMergeableObject(value) {\n\treturn isNonNullObject(value)\n\t\t&& !isSpecial(value)\n};\n\nfunction isNonNullObject(value) {\n\treturn !!value && typeof value === 'object'\n}\n\nfunction isSpecial(value) {\n\tvar stringValue = Object.prototype.toString.call(value);\n\n\treturn stringValue === '[object RegExp]'\n\t\t|| stringValue === '[object Date]'\n\t\t|| isReactElement(value)\n}\n\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\nfunction isReactElement(value) {\n\treturn value.$$typeof === REACT_ELEMENT_TYPE\n}\n\nfunction emptyTarget(val) {\n\treturn Array.isArray(val) ? [] : {}\n}\n\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n\treturn (options.clone !== false && options.isMergeableObject(value))\n\t\t? deepmerge(emptyTarget(value), value, options)\n\t\t: value\n}\n\nfunction defaultArrayMerge(target, source, options) {\n\treturn target.concat(source).map(function(element) {\n\t\treturn cloneUnlessOtherwiseSpecified(element, options)\n\t})\n}\n\nfunction getMergeFunction(key, options) {\n\tif (!options.customMerge) {\n\t\treturn deepmerge\n\t}\n\tvar customMerge = options.customMerge(key);\n\treturn typeof customMerge === 'function' ? customMerge : deepmerge\n}\n\nfunction mergeObject(target, source, options) {\n\tvar destination = {};\n\tif (options.isMergeableObject(target)) {\n\t\tObject.keys(target).forEach(function(key) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n\t\t});\n\t}\n\tObject.keys(source).forEach(function(key) {\n\t\tif (!options.isMergeableObject(source[key]) || !target[key]) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n\t\t} else {\n\t\t\tdestination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n\t\t}\n\t});\n\treturn destination\n}\n\nfunction deepmerge(target, source, options) {\n\toptions = options || {};\n\toptions.arrayMerge = options.arrayMerge || defaultArrayMerge;\n\toptions.isMergeableObject = options.isMergeableObject || isMergeableObject;\n\n\tvar sourceIsArray = Array.isArray(source);\n\tvar targetIsArray = Array.isArray(target);\n\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n\tif (!sourceAndTargetTypesMatch) {\n\t\treturn cloneUnlessOtherwiseSpecified(source, options)\n\t} else if (sourceIsArray) {\n\t\treturn options.arrayMerge(target, source, options)\n\t} else {\n\t\treturn mergeObject(target, source, options)\n\t}\n}\n\ndeepmerge.all = function deepmergeAll(array, options) {\n\tif (!Array.isArray(array)) {\n\t\tthrow new Error('first argument should be an array')\n\t}\n\n\treturn array.reduce(function(prev, next) {\n\t\treturn deepmerge(prev, next, options)\n\t}, {})\n};\n\nvar deepmerge_1 = deepmerge;\n\nreturn deepmerge_1;\n\n})));\n"]}