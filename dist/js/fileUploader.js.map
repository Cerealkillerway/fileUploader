{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js/fileUploader.js","node_modules/deepmerge/dist/umd.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","_deepmerge","window","FileUploader","$el","options","_this","this","instance","_defaults","lang","useFileIcons","debug","debugLogStyle","name","undefined","pluginName","useLoadingBars","loadingBarsClasses","reloadedFilesClass","resultContainerClass","resultFileContainerClass","resultPrefix","resultInputNames","defaultFileExt","defaultMimeType","fileMaxSize","totalMaxSize","reloadArray","reloadHTML","linkButtonContent","deleteButtonContent","allowDuplicates","duplicatesWarning","labelsContainers","labelsClasses","sizeAvailable","currentSize","maxFileSize","maxTotalSize","HTMLTemplate","onload","onfileloadStart","onfileloadEnd","onfileDelete","filenameTest","langs","en","intro_msg","dropZone_msg","maxSizeExceeded_msg","totalMaxSizeExceeded_msg","duplicated_msg","name_placeHolder","_options","_round","value","Math","round","get","parameter","currentTotalSize","_logger","message","level","data","console","log","_fileType","fileName","ext","substring","lastIndexOf","indexOf","_fileDelete","event","element","index","target","dataset","closest","selector","sibling","previousElementSibling","matches","getPreviousSibling","remove","fileSize","$resultContainer","querySelector","concat","availableSize","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","instanceLabels","sizeAvailableLabels","Symbol","iterator","next","done","innerHTML","err","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","currentSizeLabels","document","children","classList","add","_fileRename","$this","text","$input","nameTest","$fileThumbsContainer","preventDefault","setSelectionRange","start","stop","getData","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","querySelectorAll","inputs","file","title","push","_createUploaderContainer","fileExt","currentThumb","insertAdjacentHTML","container","createElement","className","parseInt","style","position","appendChild","fileButtonsContainer","seeFileLink","addEventListener","content","open","write","deleteBtn","append","classes","join","currentLoadBar","prepend","currentTitle","setAttribute","currentExtension","events","handler","Array","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","_event","addMultipleListeners","selectionStart","selectionEnd","_createResultContainer","fileData","resultElemContainer","type","result","size","_filesRead","filesList","DOM","approvedList","files","dataTransfer","loadedFiles","newFiles","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","forEach","newFile","$fileContainer","readFile","reader","currentElement","from","filter","onloadstart","onprogress","lengthComputable","percentLoaded","loaded","total","width","onloadend","debugUploaded","getElementById","totalUploaded","resultObject","readAsDataURL","currentAvailableSize","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","errorMsg","currentLangObj","loadBar","setTimeout","debugRejected","totalRejected","innerFileThumbsElements","startIndex","getAttribute","appendMessage","$message","_file","FileReader","$info","globalIndex","template","$loadBtn","dropZone","label","getContainer","_label","isArray","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","labels","_container","_labels","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","maxFileSizeLabels","loadedFile","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","entries","_step10$value","_slicedToArray","substr","parseFloat","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","handleDragOver","stopPropagation","dropEffect","handleDrop","click","fileUploader","elementDOM","global","factory","isMergeableObject","isNonNullObject","stringValue","Object","prototype","toString","$$typeof","REACT_ELEMENT_TYPE","isReactElement","isSpecial","for","cloneUnlessOtherwiseSpecified","clone","deepmerge","val","emptyTarget","defaultArrayMerge","source","map","mergeObject","destination","keys","key","customMerge","getMergeFunction","arrayMerge","sourceIsArray","all","array","reduce","prev","define","amd"],"mappings":"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","file":"fileUploader.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import deepMerge from 'deepmerge';\n\n\n/*\n* fileUploader v5.0.0\n* Licensed under MIT (https://raw.githubusercontent.com/Cerealkillerway/fileUploader/master/license.txt)\n*/\n(function(context) {\n    context.FileUploader = function($el, options) {\n        let instance = this;\n\n        // default options\n        this._defaults = {\n            lang: 'en',\n            useFileIcons: true,\n\n            debug: false,                                                  // activate console logs for debug\n            debugLogStyle: 'color: #9900ff',                               // css style for debug console logs in js console\n            name: undefined,                                               // a name for plugin's instance (useful for debug purposes)\n            pluginName: 'FileUploader',                                    // plugin's name (used in debug logs alongside with name)\n\n            useLoadingBars: true,                                          // insert loading bar for files\n            loadingBarsClasses: [],                                        // array of strings for classnames for loading bars\n            reloadedFilesClass: 'reloadedElement',                         // class for previously uploaded files\n            resultContainerClass: 'result',                                // result container's class (where to place result files data)\n            resultFileContainerClass: 'uploadedFile',                      // class for every file result container span\n            resultPrefix: 'fileUploader',                                  // prefix for inputs in the file result container\n            resultInputNames: ['title', 'extension', 'value', 'size'],     // name suffix to be used for result inputs\n            defaultFileExt: '',                                            // extension to use for files with no extension\n            defaultMimeType: '',                                           // MIME type to use for files with no extension\n            fileMaxSize: 50,                                               // maximum allowed file size (in MB)\n            totalMaxSize: 1000,                                            // total maximum allowed size of all files\n            reloadArray: [],                                               // array of files to be reloaded at plugin startup\n            reloadHTML: undefined,                                         // HTML for reloaded files to place directly in result container\n            linkButtonContent: 'L',                                        // HTML content for link button\n            deleteButtonContent: 'X',                                      // HTML content for delete button\n            allowDuplicates: false,                                        // allow upload duplicates\n            duplicatesWarning: false,                                      // show a message in the loading area when trying to load a duplicated file\n            labelsContainers: false,                                       // query selector for the container where to look for labels (ex. '#myId'), (default 'false' -> no labels;\n                                                                           // can be a string for a single value, or an array if the plugin has to update labels in many places;\n            //sizeAvailableLabelClass: 'sizeAvailable',                      // class for the sizeAvailable label\n            labelsClasses: {\n                sizeAvailable: 'sizeAvailable',\n                currentSize: 'currentSize',\n                maxFileSize: 'maxFileSize',\n                maxTotalSize: 'maxTotalSize'\n            },\n\n            HTMLTemplate: () => {\n                return `<p class=\"introMsg\"></p>\n                    <div>\n                        <div class=\"inputContainer\">\n                            <input class=\"fileLoader\" type=\"file\" multiple />\n                        </div>\n                        <div class=\"dropZone\"></div>\n                        <div class=\"filesContainer filesContainerEmpty\">\n                            <div class=\"innerFileThumbs\"></div>\n                            <div style=\"clear:both;\"></div>\n                        </div>\n                    </div>\n                    <div class=\"result\"></div>`;\n            },\n\n            onload: () => {},                                         // callback on plugin initialization\n            onfileloadStart: () => {},                                // callback on file reader start\n            onfileloadEnd: () => {},                                  // callback on file reader end\n            onfileDelete: () => {},                                   // callback on file delete\n            filenameTest: () => {},                                   // callback for testing filenames\n\n            langs: {\n                'en': {\n                    intro_msg: '(Add attachments...)',\n                    dropZone_msg: 'Drop your files here',\n                    maxSizeExceeded_msg: 'File too large',\n                    totalMaxSizeExceeded_msg: 'Total size exceeded',\n                    duplicated_msg: 'File duplicated (skipped)',\n                    name_placeHolder: 'name',\n                }\n            }\n        };\n\n\n        // UTILITIES\n        const addMultipleListeners = function (element, events, handler) {\n            if (!(events instanceof Array)) {\n                this._logger('addMultipleListeners requires events to be an array');\n            }\n            for (const event of events) {\n                element.addEventListener(event, handler);\n            }\n        }\n\n        const getPreviousSibling = function(element, selector) {\n            let sibling = element.previousElementSibling;\n\n            if (!selector) return sibling;\n\n            while (sibling) {\n                if (sibling.matches(selector)) {\n                    return sibling;\n                }\n                sibling = sibling.previousElementSibling;\n            }\n        };\n\n\n        // extend options with instance ones\n        this._options = deepMerge(this._defaults, options);\n\n\n        // add more options\n        this.options = (options) => {\n            return (options) ? deepMerge(this._options, options) : this._options;\n        };\n\n\n        // round number\n        this._round = (value) => {\n            return Math.round(value * 100) / 100;\n        };\n\n\n        // return data\n        this.get = (parameter) => {\n            switch (parameter) {\n                case 'currentTotalSize':\n                return this._round(currentTotalSize);\n\n                case 'currentAvailableSize':\n                return this._round(this._options.totalMaxSize - currentTotalSize);\n            }\n        };\n\n\n        // debug logs function\n        this._logger = (message, level, data) => {\n            if (this._options.debug) {\n                if (level) {\n                    for (let i = 0; i < level; i++) {\n                        message = '\\u27A1 ' + message;\n                    }\n                }\n                if (this._options.name) {\n                    message = '[' + this._options.pluginName + ' - ' + this._options.name + '] ' + message;\n                }\n\n                if (data) {\n                    console.log('%c ' + message, this._options.debugLogStyle, data);\n                }\n                else {\n                    console.log('%c ' + message, this._options.debugLogStyle);\n                }\n            }\n        };\n\n\n        // file type identificator\n        this._fileType = (fileName) => {\n            let ext = fileName.substring(fileName.lastIndexOf('.') + 1, fileName.length);\n            let icons = ['pdf', 'jpg', 'png'];\n\n            if (icons.indexOf(ext) >= 0) {\n                return ext;\n            }\n            else {\n                return 'unknown-file';\n            }\n        };\n\n\n        // method for deleting a reader's result from result container\n        this._fileDelete = (event, data) => {\n            let element = data.element;\n            let index = event.target.dataset.delete;\n\n            if (!index) {\n                index = event.target.closest('div[data-delete]').dataset.delete;\n            }\n\n            // remove file block\n            if (this._options.useFileIcons) {\n                getPreviousSibling(element, 'img').remove();\n            }\n            element.remove();\n\n            // get file size\n            let fileSize = $resultContainer.querySelector(`input[name=\"${this._options.resultPrefix}[${index}][${this._options.resultInputNames[3]}]\"]`).value;\n\n            fileSize = this._round(fileSize);\n            currentTotalSize = this._round(currentTotalSize - fileSize);\n\n            let availableSize = this._options.totalMaxSize - currentTotalSize;\n\n            availableSize = this._round(availableSize);\n            for (let sizeAvailableLabel of instanceLabels.sizeAvailableLabels) {\n                sizeAvailableLabel.querySelector(':scope > span').innerHTML = availableSize;\n            }\n            for (let currentSizeLabel of instanceLabels.currentSizeLabels) {\n                currentSizeLabel.querySelector(':scope > span').innerHTML = currentTotalSize;\n            }\n\n            // remove result block\n            $resultContainer.querySelector(`:scope > div[data-index=\"${index}\"]`).remove();\n\n            if (document.querySelector('.innerFileThumbs').children.length === 0) {\n                document.querySelector('.filesContainer').classList.add('filesContainerEmpty');\n            }\n\n            this._logger('Deleted file N: ' + index, 2);\n            this._options.onfileDelete(index, currentTotalSize);\n        };\n\n\n        // method to rename file in result container accordingly to modifications by user\n        this._fileRename = (event) => {\n            let element = event.data.element;\n            let $this = event.target;\n            let ext = element.querySelector(':scope > .fileExt').innerHTML;\n            let text = $this.value;\n            let index = element.dataset.index;\n            let $input = $resultContainer.querySelector(`div[data-index=\"${index}\"] input`);\n            let nameTest = this._options.filenameTest(text, ext, $fileThumbsContainer);\n\n            if (nameTest === false) {\n                event.preventDefault();\n                return false;\n            }\n            if (nameTest !== undefined && nameTest !== true) {\n                text = nameTest;\n                $this.value = text;\n\n                // update input\n                /*if (ext.length > 0) {\n                    text = `${text}.${ext}`;\n                }*/\n\n                $input.value = text;\n                // restore selection range\n                $this.setSelectionRange(event.data.start, event.data.stop);\n            }\n        };\n\n\n        this.getData = () => {\n            let data = [];\n\n            this._logger('RECEIVED SAVE COMMAND:', 0);\n\n            for (const element of $resultContainer.querySelectorAll(`:scope > .${this._options.resultFileContainerClass}`)) {\n                let inputs = element.querySelectorAll(':scope > input');\n                let file = {\n                    title: inputs[0].value,\n                    ext: inputs[1].value,\n                    value: inputs[2].value\n                };\n\n                data.push(file);\n            }\n\n            this._logger('%O', 0 ,data);\n            return data;\n        };\n\n\n        // create container for file uploading elements (icon, progress bar, etc...)\n        this._createUploaderContainer = (index, fileName, fileExt) => {\n            //insert file icon if requested\n            if (this._options.useFileIcons) {\n                let currentThumb = `<img src=\"/images/${this._fileType(fileExt)}.png\" class=\"fileThumb\" />`;\n                $fileThumbsContainer.insertAdjacentHTML('beforeend', currentThumb);\n            }\n\n            let container = document.createElement('div');\n            container.className = 'newElement';\n            container.dataset.index = parseInt(index);\n            container.style.position = 'relative';\n            $fileThumbsContainer.appendChild(container);\n\n            let fileButtonsContainer = document.createElement('div');\n            fileButtonsContainer.className = 'fileActions';\n            container.appendChild(fileButtonsContainer);\n\n            // file \"see\" link\n            let seeFileLink = document.createElement('div');\n            seeFileLink.className = 'fileSee';\n            seeFileLink.innerHTML = this._options.linkButtonContent;\n            fileButtonsContainer.appendChild(seeFileLink);\n\n            seeFileLink.addEventListener('click', function(event) {\n                let index = event.target.closest('.newElement').dataset.index;\n                let content = $resultContainer.querySelector(`.uploadedFile[data-index=\"${index}\"] textarea`).value;\n                let win = window.open();\n\n                win.document.write(`<iframe src=\"${content}\" frameborder=\"0\" style=\"border:0; top:0px; display:block; left:0px; bottom:0px; right:0px; width:100%; min-height: 100vh; height:100%;\" allowfullscreen></iframe>`)\n            });\n\n            // delete button\n            let deleteBtn = document.createElement('div');\n            deleteBtn.className = 'fileDelete';\n            deleteBtn.dataset.delete = parseInt(index);\n            deleteBtn.innerHTML = this._options.deleteButtonContent;\n            fileButtonsContainer.append(deleteBtn);\n            deleteBtn.addEventListener('click', (event) => {\n                this._fileDelete(event, {element: container});\n            });\n\n            //insert loading bars if requested\n            if (this._options.useLoadingBars) {\n                let classes = this._options.loadingBarsClasses;\n\n                if (classes.length > 0) {\n                    classes = classes.join(' ');\n                }\n\n                let currentLoadBar = document.createElement('div');\n                currentLoadBar.className = `loadBar ${classes}`;\n                currentLoadBar.appendChild(document.createElement('div'));\n                container.prepend(currentLoadBar);\n            }\n\n            let currentTitle = document.createElement('input');\n\n            // TODO translate placeholder\n            currentTitle.setAttribute('placeholder', 'nome');\n            currentTitle.className = 'fileTitle';\n\n            let currentExtension = document.createElement('div');\n\n            currentExtension.className = 'fileExt';\n            container.prepend(currentExtension);\n            container.prepend(currentTitle);\n\n            addMultipleListeners(currentTitle, ['keypress', 'keyup', 'paste'], function(event) {\n                event.data = {};\n                event.data.element = container;\n                event.data.start = this.selectionStart;\n                event.data.stop = this.selectionEnd;\n                instance._fileRename(event);\n            });\n\n            currentTitle.value = fileName;\n            currentExtension.innerHTML = fileExt;\n\n            return container;\n        };\n\n\n        this._createResultContainer = (fileData) => {\n            let index = fileData.index;\n            let resultElemContainer = document.createElement('div');\n\n            resultElemContainer.className = this._options.resultFileContainerClass;\n            resultElemContainer.dataset.index = index;\n            resultElemContainer.insertAdjacentHTML('beforeend', `<div>File: ${index}</div>`);\n            resultElemContainer.insertAdjacentHTML('beforeend', `<input type=\"text\" name=\"${this._options.resultPrefix}[${index}][${this._options.resultInputNames[0]}]\" value=\"${fileData.name}\" />`);\n            resultElemContainer.insertAdjacentHTML('beforeend', `<input type=\"text\" name=\"${this._options.resultPrefix}[${index}][${this._options.resultInputNames[1]}]\" value=\"${fileData.type}\" />`);\n            resultElemContainer.insertAdjacentHTML('beforeend', `<textarea name=\"${this._options.resultPrefix}[${index}][${this._options.resultInputNames[2]}]\">${fileData.result}</textarea>`);\n            resultElemContainer.insertAdjacentHTML('beforeend', `<input type=\"text\" name=\"${this._options.resultPrefix}[${index}][${this._options.resultInputNames[3]}]\" value=\"${fileData.size}\" />`);\n            $resultContainer.appendChild(resultElemContainer);\n        };\n\n\n        // files read function\n        this._filesRead = (event) => {\n            let DOM = event.data.DOM;\n            let filesList;\n            let approvedList = false;\n            let i = 0;\n\n            if (event.target.files) {\n                this._logger('files array source: file selector (click event)', 1);\n                filesList = event.target.files;\n            }\n            else {\n                this._logger('files array source: dropzone (drag & drop event)', 1);\n                filesList = event.dataTransfer.files;\n            }\n            this._logger('%O', 0, filesList);\n\n            // build approved list\n            if (!this._options.allowDuplicates) {\n                let loadedFiles = [];\n                let newFiles = [];\n\n                approvedList = [];\n\n                // build already loaded files list\n                for(let file of $resultContainer.children) {\n                    loadedFiles.push(file.querySelector('input').value);\n                };\n\n                // build current selected files list\n                for (i = 0; i < filesList.length; i++) {\n                    newFiles.push(filesList[i].name);\n                }\n\n                // avoid load twice the same file\n                newFiles.forEach(function(newFile) {\n                    let fileIndex = loadedFiles.indexOf(newFile);\n\n                    if (fileIndex < 0) {\n                        approvedList.push(newFile);\n                    }\n                });\n            }\n\n            $fileContainer.classList.remove('filesContainerEmpty');\n\n            let readFile = (reader, file, index, DOM) => {\n                let currentElement = Array.from(DOM.querySelector('.innerFileThumbs').children).filter(function(element) {\n                    return parseInt(element.dataset.index) === index ;\n                });\n                currentElement = currentElement[0];\n                let size = this._round(file.size / 1000000);      // size in MB\n\n                reader.onloadstart = () => {\n                    this._options.onfileloadStart(index);\n                    this._logger(`START read file: ${index}, size: ${size} MB`, 2);\n                };\n\n                reader.onprogress = (event) => {\n                    if (event.lengthComputable) {\n                        let percentLoaded = this._round((event.loaded / event.total) * 100);\n                        this._logger(`File ${index} loaded: ${percentLoaded}`, 3);\n\n                        // Increase the progress bar length.\n                        if (percentLoaded <= 100) {\n                            currentElement.querySelector(':scope > .loadBar > div').style.width = '100%';\n                        }\n                    }\n                };\n\n                reader.onloadend = () => {\n                    let type = file.type;\n                    let name = file.name;\n                    let result = reader.result;\n\n                    // reading unsuccessful\n                    if (!result) {\n                        return false;\n                    }\n\n                    let mimeType = result.substring(0, result.indexOf(';'));\n\n                    // if file has no MIME type, replace with default one\n                    if (mimeType === 'data:' && this._options.defaultMimeType.length > 0) {\n                        result = \"data:\" + this._options.defaultMimeType + result.substring(result.indexOf(';'), result.length);\n                    }\n                    if (type === \"\") {\n                        type = this._options.defaultMimeType;\n                    }\n                    if (name.indexOf('.') < 0 && this._options.defaultFileExt !== '') {\n                        name = `${name}.${this._options.defaultFileExt}`;\n                    }\n\n                    let newFile = {\n                        index: index,\n                        name: name,\n                        type: type,\n                        result: result,\n                        size: size\n                    };\n\n                    this._createResultContainer(newFile);\n\n                    //set direct link on file see button\n                    //currentElement.querySelector(':scope > .fileActions > a').setAttribute('href', result);\n                    this._logger(`END read file: ${index}`, 4);\n\n                    let debugUploaded = document.getElementById('debugUploaded');\n                    let totalUploaded = parseInt(debugUploaded.innerHTML) + 1;\n\n                    debugUploaded.innerHTML = totalUploaded;\n\n                    let resultObject = {\n                        name: file.name,\n                        type: file.type,\n                        data: result,\n                        size: size\n                    };\n\n                    this._options.onfileloadEnd(index, resultObject, this._round(currentTotalSize));\n                };\n\n                if ((size <= this._options.fileMaxSize) && ((currentTotalSize + size) <= this._options.totalMaxSize)) {\n                    reader.readAsDataURL(file);\n\n                    // update total size\n                    currentTotalSize = currentTotalSize + size;\n\n                    let currentAvailableSize = this._options.totalMaxSize - currentTotalSize;\n\n                    for (let sizeAvailableLabel of instanceLabels.sizeAvailableLabels) {\n                        sizeAvailableLabel.querySelector(':scope > span').innerHTML = this._round(currentAvailableSize);\n                    }\n                    for (let currentSizeLabel of instanceLabels.currentSizeLabels) {\n                        currentSizeLabel.querySelector(':scope > span').innerHTML = currentTotalSize;\n                    }\n                }\n                else {\n                    let errorMsg = currentLangObj.totalMaxSizeExceeded_msg;\n\n                    if (size > this._options.fileMaxSize) {\n                        errorMsg = currentLangObj.maxSizeExceeded_msg;\n                        this._logger(`FILE REJECTED: Max size exceeded - max size: ${this._options.fileMaxSize} MB - file size: ${size} MB`);\n                    }\n                    else {\n                        this._logger(`FILE REJECTED: Max total size exceeded - max size: ${this._options.totalMaxSizeExceeded_msg} MB - current total size: ${currentTotalSize + size} MB`);\n                    }\n\n                    currentElement.classList.add('error');\n\n                    let loadBar = currentElement.querySelector(':scope > .loadBar');\n                    loadBar.innerHTML = '';\n                    loadBar.insertAdjacentHTML('beforeend', `<div class=\"errorMsg\">${errorMsg}</div>`)\n\n                    setTimeout(() => {\n                        /*currentElement.animate({opacity: 0}, 300, function() {\n                            if (instance._options.useFileIcons) {\n                                $(this).prev('img').remove();\n                            }\n                            $(this).remove();\n                        });*/\n                        if (instance._options.useFileIcons) {\n                            currentElement.getPreviousSibling('img').remove();\n                        }\n                        currentElement.remove();\n                    }, 2000);\n\n                    let debugRejected = parseInt(document.getElementById('debugRejected'));\n                    let totalRejected = debugRejected.innerHTML + 1;\n                    debugRejected.innerHTML = totalRejected;\n                }\n            }\n\n            let innerFileThumbsElements = document.querySelector('.innerFileThumbs').children;\n            let startIndex = innerFileThumbsElements[innerFileThumbsElements.length - 1].getAttribute('index');\n\n            if (startIndex !== undefined) {\n                startIndex = parseInt(startIndex) + 1;\n            }\n            else {\n                startIndex = 0;\n            }\n\n            function appendMessage($message) {\n                setTimeout(() => {\n                    /*$message.animate({opacity: 0}, 300, function() {\n                        $(this).remove();\n                    });*/\n                    $message.remove();\n                }, 2000);\n            }\n\n            // create a new div containing thumb, delete button and title field for each target file\n            for (i = 0; i < filesList.length; i++) {\n                let file = filesList[i];\n                let reader = new FileReader();\n\n                // test for duplicates\n                if (approvedList && approvedList.indexOf(file.name) < 0) {\n                    if (this._options.duplicatesWarning) {\n                        let $info = document.createElement('div');\n                        $info.className = 'errorLabel center';\n\n                        $info.innerHTML = currentLangObj.duplicated_msg;\n                        $fileThumbsContainer.appendChild($info);\n                        appendMessage($info);\n                    }\n\n                    this._logger(`File duplicated: ${file.name} -> skipping...`, 2);\n                    continue;\n                }\n\n                let fileName, fileExt;\n\n                if (file.name.lastIndexOf('.') > 0) {\n                    fileName = file.name.substring(0, file.name.lastIndexOf('.'));\n                    fileExt = file.name.substring(file.name.lastIndexOf('.') + 1, file.name.length);\n                }\n                else {\n                    fileName = file.name;\n                    fileExt = this._options.defaultFileExt;\n                }\n\n                // test for filenames\n                let nameTest = this._options.filenameTest(fileName, fileExt, $fileThumbsContainer);\n                if (nameTest === false) {\n                    this._logger(`Invalid file name: ${file.name}`, 2);\n                    continue;\n                }\n                else {\n                    if (nameTest !== undefined && nameTest !== true) {\n                        fileName = nameTest;\n                    }\n                }\n\n                this._createUploaderContainer(globalIndex, fileName, fileExt);\n\n                // now read!\n                readFile(reader, file, globalIndex, DOM);\n                globalIndex++;\n            }\n        };\n\n        /*\n        *  -------------------------------------------------------------\n        *  |                       MAIN FLOW                           |\n        *  -------------------------------------------------------------\n        */\n        // initialization\n        if (this._options.name) {\n            this._logger('INITIALIZED INSTANCE: ' + this._options.name);\n        }\n        // build HTML template\n        let template = this._options.HTMLTemplate();\n\n        $el.insertAdjacentHTML('beforeend', template);\n\n        let globalIndex = 0;\n        let $resultContainer = $el.querySelector('.' + this._options.resultContainerClass);\n        let $loadBtn = $el.querySelector('.fileLoader');\n        let $fileContainer = $el.querySelector('.filesContainer');\n        let $fileThumbsContainer = $el.querySelector('.innerFileThumbs');\n        let dropZone = $el.querySelector('.dropZone');\n        let currentLangObj = this._options.langs[this._options.lang];\n\n        // place reloaded files' HTML in result container directly (if provided)\n        if (this._options.reloadHTML) {\n            $resultContainer.innerHTML = this._options.reloadHTML;\n        }\n\n\n        $el.querySelector('.introMsg').innerHTML = currentLangObj.intro_msg;\n        dropZone.innerHTML = currentLangObj.dropZone_msg;\n\n        if (!this._options.debug) {\n            $resultContainer.classList.add('hide');\n        }\n        else {\n            $resultContainer.insertAdjacentHTML('beforebegin', '<p class=\"debugMode\">Debug mode: on</p>');\n            $resultContainer.insertAdjacentHTML('beforebegin', '<div class=\"debug\">Uploaded files: <span id=\"debugUploaded\">0</span> | Rejected files: <span id=\"debugRejected\">0</span></div>');\n            $resultContainer.insertAdjacentHTML('beforebegin', '<div class=\"debug\">Current MAX FILE SIZE: ' + this._options.fileMaxSize + ' MB</div>');\n            $resultContainer.insertAdjacentHTML('beforebegin', '<div class=\"debug\">Current MAX TOTAL SIZE: ' + this._options.totalMaxSize + ' MB</div>');\n            $resultContainer.insertAdjacentHTML('beforebegin', '<div class=\"debug sizeAvailable\">Size still available: <span>' + this._options.totalMaxSize + '</span> MB</div>');\n        }\n\n        // --- FILES RELOAD SECTION ---\n        // lookup for previously loaded files placed in the result container directly\n        // gather all availableSizeLabels\n        /* labelsClasses: {\n                sizeAvailable: 'sizeAvailable',\n                currentSize: 'currentSize',\n                maxFileSize: 'maxFileSize',\n                maxTotalSize: 'maxTotalSize'\n            },\n        */\n        let instanceLabels = {};\n        for (let label in this._options.labelsClasses) {\n            instanceLabels[`${label}Labels`] = [];\n        }\n        let labelsContainers = this._options.labelsContainers;\n\n        if (this._options.debug) {\n            // handle debug labels\n            // in the debug frame \"sizeAvailable\" is the only dynamic label that we need to store in order to update it when necessary\n            instanceLabels.sizeAvailableLabels.push($el.querySelector(`.${this._options.labelsClasses.sizeAvailable}`));\n        }\n        if (labelsContainers) {\n            const getContainer = function(selector) {\n                return document.querySelector(selector);\n            }\n\n            for (let label in this._options.labelsClasses) {\n                if (Array.isArray(labelsContainers)) {\n                    for (let selector of labelsContainers) {\n                        let container = getContainer(selector);\n    \n                        if (container) {\n                            let labels = container.querySelector(`.${this._options.labelsClasses[label]}`);\n                            \n                            if (labels) {\n                                instanceLabels[`${label}Labels`].push(labels);\n                            }\n                        }\n                        else {\n                            this._logger(`impossible to find labelContainer '${selector}'`, 1);\n                        }\n                    }\n                }\n                else {\n                    let container = getContainer(labelsContainers);\n    \n                    if (container) {\n                        let labels = container.querySelector(`.${this._options.labelsClasses[label]}`);\n\n                        if (labels) {\n                            instanceLabels[`${label}Labels`].push(labels);\n                        }\n                    }\n                    else {\n                        this._logger(`impossible to find labelContainer '${labelsContainers}'`, 1);\n                    }\n                }\n            }\n        }\n\n        console.log(instanceLabels);\n        for (let maxFileSizeLabel of instanceLabels.maxFileSizeLabels) {\n            maxFileSizeLabel.innerHTML = this._options.maxFileSize;\n        }\n\n        let currentTotalSize = 0;\n        let loadedFile;\n\n        for (const [index, element] of $resultContainer.querySelectorAll(`:scope > .${this._options.resultFileContainerClass}`).entries()) {\n            this._logger(`found previously uploaded file: index = ${element.dataset.index}`, 2);\n\n            // pay attention to index used on fileData here: index 0 is the title DIV!\n            let fileData = element.querySelectorAll(':scope > input');\n            let fileName = fileData[0].value;\n            let fileExt = fileData[1].value;\n            let fileSize = fileData[3].value;\n\n            if (fileName.lastIndexOf('.') > 0) {\n                fileName = fileName.substr(0, fileName.lastIndexOf('.'));\n            }\n\n            loadedFile = this._createUploaderContainer(globalIndex, fileName, fileExt);\n            loadedFile.querySelector(':scope > .loadBar > div').style.width = '100%';\n            loadedFile.classList.add(this._options.reloadedFilesClass);\n\n            currentTotalSize = currentTotalSize + parseFloat(fileSize);\n            globalIndex++;\n        }\n\n        // reload files from provided array\n        if (this._options.reloadArray.length > 0) {\n            this._options.reloadArray.forEach((file, index) => {\n                // re-create visible elements\n                loadedFile = this._createUploaderContainer(index, file.name, file.ext);\n                loadedFile.querySelector(':scope > .loadBar > div').style.width = '100%';\n                loadedFile.classList.add(this._options.reloadedFilesClass);\n\n                this._logger('found previously uploaded file: index = ' + index, 2);\n\n                // re-create results\n                let newFile = {\n                    index: index,\n                    name: file.name,\n                    type: file.ext,\n                    result: file.data,\n                    size: file.size\n                };\n\n                this._createResultContainer(newFile);\n\n                currentTotalSize = currentTotalSize + parseFloat(file.size);\n                globalIndex++;\n            });\n        }\n\n        currentTotalSize = this._round(currentTotalSize);\n\n        this._logger('current total size: ' + currentTotalSize);\n        for (let sizeAvailableLabel of instanceLabels.sizeAvailableLabels) {\n            sizeAvailableLabel.querySelector(':scope > span').innerHTML = (this._options.totalMaxSize - currentTotalSize);\n        }\n        for (let currentSizeLabel of instanceLabels.currentSizeLabels) {\n            currentSizeLabel.querySelector(':scope > span').innerHTML = currentTotalSize;\n        }\n        // --- END FILES RELOAD SECTION ---\n\n        // onload callback\n        this._options.onload(this._options, currentTotalSize);\n\n        // Drag events\n        this.handleDragOver = (event) => {\n            dropZone.classList.add('highlight');\n            event.stopPropagation();\n            event.preventDefault();\n            event.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.\n        }\n        this.handleDrop = (event) => {\n            dropZone.classList.remove('highlight');\n            event.data = {\n                DOM: $el\n            };\n            this._filesRead(event);\n        }\n\n        dropZone.addEventListener('dragleave', () => {\n            dropZone.classList.remove('highlight');\n        });\n        dropZone.addEventListener('dragover', this.handleDragOver);\n        dropZone.addEventListener('drop', () => {\n            event.stopPropagation();\n            event.preventDefault();\n            this.handleDrop(event);\n        });\n\n        dropZone.addEventListener('click', (event) => {\n            $loadBtn.click();\n        });\n\n        $loadBtn.addEventListener('change', (event) => {\n            event.data = {\n                DOM: $el\n            };\n            this._filesRead(event);\n            this.value = null;\n        });\n\n        return {\n            fileUploader: instance,\n            elementDOM: $el\n        };\n    };\n\n    /*const fileUploader = function(methodOrOptions) {\n        console.log('constructor');\n        let method = (typeof methodOrOptions === 'string') ? methodOrOptions : undefined;\n\n        const getFileUploader = () => {\n            let $el          = $(this);\n            let fileUploader = $el.data('fileUploader');\n\n            fileUploaders.push(fileUploader);\n        }\n\n        const applyMethod = (index) => {\n            let fileUploader = fileUploaders[index];\n\n            if (!fileUploader) {\n                console.warn('$.fileUploader not instantiated yet');\n                console.info(this);\n                results.push(undefined);\n                return;\n            }\n\n            if (typeof fileUploader[method] === 'function') {\n                let result = fileUploader[method].apply(fileUploader, args);\n                results.push(result);\n            } else {\n                console.warn('Method \\'' + method + '\\' not defined in $.fileUploader');\n            }\n        }\n\n        const init = () => {\n            let $el          = $(this);\n            let fileUploader = new FileUploader($el, options);\n\n            $el.data('fileUploader', fileUploader);\n        }\n\n        if (method) {\n            let fileUploaders = [];\n\n            this.each(getFileUploader);\n\n            let args = (arguments.length > 1) ? Array.prototype.slice.call(arguments, 1) : undefined;\n            let results = [];\n\n            this.each(applyMethod);\n\n            return (results.length > 1) ? results : results[0];\n        }\n        else {\n            let options = (typeof methodOrOptions === 'object') ? methodOrOptions : undefined;\n\n            return this.each(init);\n        }\n    };*/\n})(window);\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.deepmerge = factory());\n}(this, (function () { 'use strict';\n\nvar isMergeableObject = function isMergeableObject(value) {\n\treturn isNonNullObject(value)\n\t\t&& !isSpecial(value)\n};\n\nfunction isNonNullObject(value) {\n\treturn !!value && typeof value === 'object'\n}\n\nfunction isSpecial(value) {\n\tvar stringValue = Object.prototype.toString.call(value);\n\n\treturn stringValue === '[object RegExp]'\n\t\t|| stringValue === '[object Date]'\n\t\t|| isReactElement(value)\n}\n\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\nfunction isReactElement(value) {\n\treturn value.$$typeof === REACT_ELEMENT_TYPE\n}\n\nfunction emptyTarget(val) {\n\treturn Array.isArray(val) ? [] : {}\n}\n\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n\treturn (options.clone !== false && options.isMergeableObject(value))\n\t\t? deepmerge(emptyTarget(value), value, options)\n\t\t: value\n}\n\nfunction defaultArrayMerge(target, source, options) {\n\treturn target.concat(source).map(function(element) {\n\t\treturn cloneUnlessOtherwiseSpecified(element, options)\n\t})\n}\n\nfunction getMergeFunction(key, options) {\n\tif (!options.customMerge) {\n\t\treturn deepmerge\n\t}\n\tvar customMerge = options.customMerge(key);\n\treturn typeof customMerge === 'function' ? customMerge : deepmerge\n}\n\nfunction mergeObject(target, source, options) {\n\tvar destination = {};\n\tif (options.isMergeableObject(target)) {\n\t\tObject.keys(target).forEach(function(key) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n\t\t});\n\t}\n\tObject.keys(source).forEach(function(key) {\n\t\tif (!options.isMergeableObject(source[key]) || !target[key]) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n\t\t} else {\n\t\t\tdestination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n\t\t}\n\t});\n\treturn destination\n}\n\nfunction deepmerge(target, source, options) {\n\toptions = options || {};\n\toptions.arrayMerge = options.arrayMerge || defaultArrayMerge;\n\toptions.isMergeableObject = options.isMergeableObject || isMergeableObject;\n\n\tvar sourceIsArray = Array.isArray(source);\n\tvar targetIsArray = Array.isArray(target);\n\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n\tif (!sourceAndTargetTypesMatch) {\n\t\treturn cloneUnlessOtherwiseSpecified(source, options)\n\t} else if (sourceIsArray) {\n\t\treturn options.arrayMerge(target, source, options)\n\t} else {\n\t\treturn mergeObject(target, source, options)\n\t}\n}\n\ndeepmerge.all = function deepmergeAll(array, options) {\n\tif (!Array.isArray(array)) {\n\t\tthrow new Error('first argument should be an array')\n\t}\n\n\treturn array.reduce(function(prev, next) {\n\t\treturn deepmerge(prev, next, options)\n\t}, {})\n};\n\nvar deepmerge_1 = deepmerge;\n\nreturn deepmerge_1;\n\n})));\n"]}