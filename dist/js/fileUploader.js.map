{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js/fileUploader.js","node_modules/deepmerge/dist/umd.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","_deepmerge","window","FileUploader","$el","options","_this","this","instance","_defaults","lang","useFileIcons","debug","debugLogStyle","name","undefined","pluginName","useLoadingBars","loadingBarsClasses","reloadedFilesClass","resultContainerClass","resultFileContainerClass","resultPrefix","resultInputNames","defaultFileExt","defaultMimeType","fileMaxSize","totalMaxSize","reloadArray","reloadHTML","linkButtonContent","deleteButtonContent","allowDuplicates","duplicatesWarning","HTMLTemplate","onload","onfileloadStart","onfileloadEnd","onfileDelete","filenameTest","langs","en","intro_msg","dropZone_msg","maxSizeExceeded_msg","totalMaxSizeExceeded_msg","duplicated_msg","name_placeHolder","_options","_round","value","Math","round","get","parameter","currentTotalSize","_logger","message","level","data","console","log","_fileType","fileName","ext","substring","lastIndexOf","indexOf","_fileDelete","event","element","index","target","dataset","closest","prev","remove","fileSize","$resultContainer","find","val","availableSize","availableLabel","children","html","$","addClass","_fileRename","$this","text","$input","nameTest","$fileThumbsContainer","preventDefault","setSelectionRange","start","stop","getData","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","querySelectorAll","concat","Symbol","iterator","next","done","inputs","file","title","push","err","_createUploaderContainer","fileExt","currentThumb","insertAdjacentHTML","container","document","createElement","className","parseInt","style","position","appendChild","fileButtonsContainer","seeFileLink","deleteBtn","innerHTML","append","addEventListener","classes","join","currentLoadBar","prepend","currentTitle","setAttribute","currentExtension","events","handler","Array","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","addMultipleListeners","selectionStart","selectionEnd","_createResultContainer","fileData","resultElemContainer","type","result","size","_filesRead","filesList","DOM","approvedList","files","dataTransfer","loadedFiles","newFiles","each","first","forEach","newFile","$fileContainer","removeClass","$fileNameContainer","readFile","reader","currentElement","filter","onloadstart","onprogress","lengthComputable","percentLoaded","loaded","total","animate","width","onloadend","attr","totalUploaded","resultObject","readAsDataURL","currentAvailableSize","errorMsg","currentLangObj","empty","setTimeout","opacity","totalRejected","startIndex","last","appendMessage","$message","FileReader","$info","globalIndex","template","querySelector","$loadBtn","dropZone","classList","add","loadedFile","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","entries","_step3$value","_slicedToArray","substr","parseFloat","handleDragOver","stopPropagation","dropEffect","handleDrop","passedInElement","dispatchEvent","fileUploader","elementDOM","global","factory","isMergeableObject","isNonNullObject","stringValue","Object","prototype","toString","$$typeof","REACT_ELEMENT_TYPE","isReactElement","isSpecial","for","cloneUnlessOtherwiseSpecified","clone","deepmerge","isArray","emptyTarget","defaultArrayMerge","source","map","mergeObject","destination","keys","key","customMerge","getMergeFunction","arrayMerge","sourceIsArray","all","array","reduce","define","amd"],"mappings":"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","file":"fileUploader.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import deepMerge from 'deepmerge';\n\n\n/*\n* fileUploader v4.0.0\n* Licensed under MIT (https://raw.githubusercontent.com/Cerealkillerway/fileUploader/master/license.txt)\n*/\n(function(context) {\n    context.FileUploader = function($el, options) {\n        let instance = this;\n\n        // default options\n        this._defaults = {\n            lang: 'en',\n            useFileIcons: true,\n\n            debug: false,                                                  // activate console logs for debug\n            debugLogStyle: 'color: #9900ff',                               // css style for debug console logs in js console\n            name: undefined,                                               // a name for plugin's instance (useful for debug purposes)\n            pluginName: 'FileUploader',                                    // plugin's name (used in debug logs alongside with name)\n\n            useLoadingBars: true,                                          // insert loading bar for files\n            loadingBarsClasses: [],                                        // array of strings for classnames for loading bars\n            reloadedFilesClass: 'reloadedElement',                         // class for previously uploaded files\n            resultContainerClass: 'result',                                // result container's class (where to place result files data)\n            resultFileContainerClass: 'uploadedFile',                      // class for every file result container span\n            resultPrefix: 'fileUploader',                                  // prefix for inputs in the file result container\n            resultInputNames: ['title', 'extension', 'value', 'size'],     // name suffix to be used for result inputs\n            defaultFileExt: '',                                            // extension to use for files with no extension\n            defaultMimeType: '',                                           // MIME type to use for files with no extension\n            fileMaxSize: 50,                                               // maximum allowed file size (in MB)\n            totalMaxSize: 1000,                                            // total maximum allowed size of all files\n            reloadArray: [],                                               // array of files to be reloaded at plugin startup\n            reloadHTML: undefined,                                         // HTML for reloaded files to place directly in result container\n            linkButtonContent: 'L',                                        // HTML content for link button\n            deleteButtonContent: 'X',                                      // HTML content for delete button\n            allowDuplicates: false,                                        // allow upload duplicates\n            duplicatesWarning: false,                                      // show a message in the loading area when trying to load a duplicated file\n\n            HTMLTemplate: () => {\n                return `<p class=\"introMsg\"></p>\n                    <div>\n                        <div class=\"inputContainer\">\n                            <input class=\"fileLoader\" type=\"file\" multiple />\n                        </div>\n                        <div class=\"dropZone\"></div>\n                        <div class=\"filesContainer filesContainerEmpty\">\n                            <div class=\"innerFileThumbs\"></div>\n                            <div style=\"clear:both;\"></div>\n                        </div>\n                    </div>\n                    <div class=\"result\"></div>`\n            },\n\n            onload: () => {},                                         // callback on plugin initialization\n            onfileloadStart: () => {},                                // callback on file reader start\n            onfileloadEnd: () => {},                                  // callback on file reader end\n            onfileDelete: () => {},                                   // callback on file delete\n            filenameTest: () => {},                                   // callback for testing filenames\n\n            langs: {\n                'en': {\n                    intro_msg: '(Add attachments...)',\n                    dropZone_msg: 'Drop your files here',\n                    maxSizeExceeded_msg: 'File too large',\n                    totalMaxSizeExceeded_msg: 'Total size exceeded',\n                    duplicated_msg: 'File duplicated (skipped)',\n                    name_placeHolder: 'name',\n                }\n            }\n        };\n\n        const addMultipleListeners = function (element, events, handler) {\n            if (!(events instanceof Array)) {\n                this._logger('addMultipleListeners requires events to be an array');\n            }\n            for (const event of events) {\n                element.addEventListener(event, handler);\n            }\n        }\n\n        // extend options with instance ones\n        this._options = deepMerge(this._defaults, options);\n\n        // add more options\n        this.options = (options) => {\n            return (options) ? deepMerge(this._options, options) : this._options;\n        };\n\n        // round number\n        this._round = (value) => {\n            return Math.round(value * 100) / 100;\n        };\n\n        // return data\n        this.get = (parameter) => {\n            switch (parameter) {\n                case 'currentTotalSize':\n                return this._round(currentTotalSize);\n\n                case 'currentAvailableSize':\n                return this._round(this._options.totalMaxSize - currentTotalSize);\n            }\n        };\n\n        // debug logs function\n        this._logger = (message, level, data) => {\n            if (this._options.debug) {\n                if (level) {\n                    for (let i = 0; i < level; i++) {\n                        message = '\\u27A1 ' + message;\n                    }\n                }\n                if (this._options.name) {\n                    message = '[' + this._options.pluginName + ' - ' + this._options.name + '] ' + message;\n                }\n\n                if (data) {\n                    console.log('%c ' + message, this._options.debugLogStyle, data);\n                }\n                else {\n                    console.log('%c ' + message, this._options.debugLogStyle);\n                }\n            }\n        };\n\n        // file type identificator\n        this._fileType = (fileName) => {\n            let ext = fileName.substring(fileName.lastIndexOf('.') + 1, fileName.length);\n            let icons = ['pdf', 'jpg', 'png'];\n\n            if (icons.indexOf(ext) >= 0) {\n                return ext;\n            }\n            else {\n                return 'unknown-file';\n            }\n        };\n\n        // method for deleting a reader's result from result container\n        this._fileDelete = (event, data) => {\n            let element = data.element;\n            let index = event.target.dataset.delete;\n\n            if (!index) {\n                index = event.target.closest('div[data-delete]').dataset.delete;\n            }\n\n            // remove file block\n            if (this._options.useFileIcons) {\n                element.prev('img').remove();\n            }\n            element.remove();\n\n            // get file size\n            var fileSize = $resultContainer.find('input[name=\"' + this._options.resultPrefix + '[' + index + '][' + this._options.resultInputNames[3] + ']\"]').val();\n\n            fileSize = this._round(fileSize);\n\n            currentTotalSize = this._round(currentTotalSize - fileSize);\n\n            var availableSize = this._options.totalMaxSize - currentTotalSize;\n\n            availableSize = this._round(availableSize);\n            availableLabel.children('span').html(availableSize);\n\n            // remove result block\n            $resultContainer.children('div[data-index=\"' + index + '\"]').remove();\n\n            if ($('.innerFileThumbs').children().length === 0) {\n                $('.filesContainer').addClass('filesContainerEmpty');\n            }\n\n            this._logger('Deleted file N: ' + index, 2);\n\n            this._options.onfileDelete(index, currentTotalSize);\n        };\n\n\n        // method to rename file in result container accordingly to modifications by user\n        this._fileRename = (event) => {\n            var element = event.data.element;\n            var $this = $(event.target);\n            var ext = element.children('.fileExt').html();\n            var text = $this.val();\n            var index = element.data('index');\n            var $input = $resultContainer.find('div[data-index=\"' + index + '\"] input:first');\n            var nameTest = this._options.filenameTest(text, ext, $fileThumbsContainer);\n\n            if (nameTest === false) {\n                event.preventDefault();\n                return false;\n            }\n            if (nameTest !== undefined && nameTest !== true) {\n\n                text = nameTest;\n                $this.val(text);\n\n                // update input\n                if (ext.length > 0) {\n                    text = text + '.' + ext;\n                }\n\n                $input.val(text);\n\n                // restore selection range\n                $this[0].setSelectionRange(event.data.start, event.data.stop);\n            }\n        };\n\n\n        this.getData = () => {\n            let data = [];\n\n            this._logger('RECEIVED SAVE COMMAND:', 0);\n\n            for (const element of $resultContainer.querySelectorAll(`:scope > .${this._options.resultFileContainerClass}`)) {\n                let inputs = element.querySelectorAll(':scope > input');\n                let file = {\n                    title: inputs[0].value,\n                    ext: inputs[1].value,\n                    value: inputs[2].value\n                };\n\n                data.push(file);\n            }\n\n            this._logger('%O', 0 ,data);\n            return data;\n        };\n\n\n        // create container for file uploading elements (icon, progress bar, etc...)\n        this._createUploaderContainer = (index, fileName, fileExt) => {\n            //insert file icon if requested\n            if (this._options.useFileIcons) {\n                let currentThumb = `<img src=\"/images/${this._fileType(fileExt)}.png\" class=\"fileThumb\" />`;\n                $fileThumbsContainer.insertAdjacentHTML('beforeend', currentThumb);\n            }\n\n            let container = document.createElement('div');\n            container.className = 'newElement';\n            container.dataset.index = parseInt(index);\n            container.style.position = 'relative';\n            $fileThumbsContainer.appendChild(container);\n\n            let fileButtonsContainer = document.createElement('div');\n            fileButtonsContainer.className = 'fileActions';\n            container.appendChild(fileButtonsContainer);\n\n            // file \"see\" link\n            let seeFileLink = `<a target=\"_blank\"><div class=\"fileSee\">${this._options.linkButtonContent}</div></a>`;\n            fileButtonsContainer.insertAdjacentHTML('beforeend', seeFileLink);\n\n            // delete button\n            let deleteBtn = document.createElement('div');\n            deleteBtn.className = 'fileDelete';\n            deleteBtn.dataset.delete = parseInt(index);\n            deleteBtn.innerHTML = this._options.deleteButtonContent;\n            fileButtonsContainer.append(deleteBtn);\n            deleteBtn.addEventListener('click', (event) => {\n                this._fileDelete(event, {element: container});\n            });\n\n            //insert loading bars if requested\n            if (this._options.useLoadingBars) {\n                let classes = this._options.loadingBarsClasses;\n\n                if (classes.length > 0) {\n                    classes = classes.join(' ');\n                }\n\n                let currentLoadBar = document.createElement('div');\n                currentLoadBar.className = `loadBar ${classes}`;\n                currentLoadBar.appendChild(document.createElement('div'));\n                container.prepend(currentLoadBar);\n            }\n\n            let currentTitle = document.createElement('input');\n            // TODO translate placeholder\n            currentTitle.setAttribute('placeholder', 'nome');\n            currentTitle.className = 'fileTitle';\n            let currentExtension = document.createElement('div');\n            currentExtension.className = 'fileExt';\n\n            container.prepend(currentExtension);\n            container.prepend(currentTitle);\n\n            addMultipleListeners(currentTitle, ['keypress', 'keyup', 'paste'], function(event) {\n                event.data = {};\n                event.data.element = container;\n                event.data.start = this.selectionStart;\n                event.data.stop = this.selectionEnd;\n                this._fileRename(event);\n            });\n\n            currentTitle.value = fileName;\n            currentExtension.innerHTML = fileExt;\n\n            return container;\n        };\n\n        this._createResultContainer = (fileData) => {\n            let index = fileData.index;\n            let resultElemContainer = document.createElement('div');\n\n            resultElemContainer.className = this._options.resultFileContainerClass;\n            resultElemContainer.dataset.index = index;\n            resultElemContainer.insertAdjacentHTML('beforeend', `<div>File: ${index}</div>`);\n            resultElemContainer.insertAdjacentHTML('beforeend', `<input type=\"text\" name=\"${this._options.resultPrefix}[${index}][${this._options.resultInputNames[0]}]\" value=\"${fileData.name}\" />`);\n            resultElemContainer.insertAdjacentHTML('beforeend', `<input type=\"text\" name=\"${this._options.resultPrefix}[${index}][${this._options.resultInputNames[1]}]\" value=\"${fileData.type}\" />`);\n            resultElemContainer.insertAdjacentHTML('beforeend', `<input type=\"text\" name=\"${this._options.resultPrefix}[${index}][${this._options.resultInputNames[2]}]\" value=\"${fileData.result}\" />`);\n            resultElemContainer.insertAdjacentHTML('beforeend', `<input type=\"text\" name=\"${this._options.resultPrefix}[${index}][${this._options.resultInputNames[3]}]\" value=\"${fileData.size}\" />`);\n            $resultContainer.appendChild(resultElemContainer);\n        };\n\n        // files read function\n        this._filesRead = (event) => {\n            var DOM = event.data.DOM;\n            var filesList;\n            var approvedList = false;\n            var i = 0;\n\n            if (event.target.files) {\n                this._logger('files array source: file selector (click event)', 1);\n                filesList = event.target.files;\n            }\n            else {\n                this._logger('files array source: dropzone (drag & drop event)', 1);\n                filesList = event.dataTransfer.files;\n            }\n            this._logger('%O', 0, filesList);\n\n            // build approved list\n            if (!this._options.allowDuplicates) {\n                var loadedFiles = [];\n                var newFiles = [];\n\n                approvedList = [];\n\n                // build already loaded files list\n                $.each($resultContainer.children(), function(index, file) {\n                    loadedFiles.push($(file).children('input').first().val());\n                });\n\n                // build current selected files list\n                for (i = 0; i < filesList.length; i++) {\n                    newFiles.push(filesList[i].name);\n                }\n\n                // avoid load twice the same file\n                newFiles.forEach(function(newFile) {\n                    var fileIndex = loadedFiles.indexOf(newFile);\n\n                    if (fileIndex < 0) {\n                        approvedList.push(newFile);\n                    }\n                });\n            }\n\n            $fileContainer.removeClass('filesContainerEmpty');\n            // set selected file's name to fleNameContainer\n            $fileNameContainer.html('upload files');\n\n            let readFile = (reader, file, index, DOM) => {\n                var currentElement = DOM.find('.innerFileThumbs').children().filter(function() {\n                    return $(this).data('index') === index ;\n                });\n\n                var size = this._round(file.size / 1000000);      // size in MB\n\n                reader.onloadstart = () => {\n                    this._options.onfileloadStart(index);\n                    this._logger('START read file: ' + index + ', size: ' + size + ' MB', 2);\n                };\n\n                reader.onprogress = (event) => {\n                    if (event.lengthComputable) {\n                        var percentLoaded = this._round((event.loaded / event.total) * 100);\n                        this._logger('File ' + index + ' loaded: ' + percentLoaded, 3);\n\n                        // Increase the progress bar length.\n                        if (percentLoaded <= 100) {\n                            currentElement.children('.loadBar').children('div').animate({width: '100%'}, 500);\n                        }\n                    }\n                };\n\n                reader.onloadend = () => {\n                    var type = file.type;\n                    var name = file.name;\n                    var result = reader.result;\n\n                    // reading unsuccessful\n                    if (!result) {\n                        return false;\n                    }\n\n                    var mimeType = result.substring(0, result.indexOf(';'));\n\n                    // if file has no MIME type, replace with default one\n                    if (mimeType === \"data:\" && this._options.defaultMimeType.length > 0) {\n                        result = \"data:\" + this._options.defaultMimeType + result.substring(result.indexOf(';'), result.length);\n                    }\n\n                    if (type === \"\") {\n                        type = this._options.defaultMimeType;\n                    }\n                    if (name.indexOf('.') < 0 && this._options.defaultFileExt !== \"\") {\n                        name = name + '.' + this._options.defaultFileExt;\n                    }\n\n                    var newFile = {\n                        index: index,\n                        name: name,\n                        type: type,\n                        result: result,\n                        size: size\n                    };\n\n                    this._createResultContainer(newFile);\n\n                    //set direct link on file see button\n                    currentElement.children('.fileActions').children('a').attr('href', result);\n                    this._logger('END read file: ' + index, 4);\n\n                    var totalUploaded = parseInt($('#debugUploaded').html()) + 1;\n\n                    $('#debugUploaded').html(totalUploaded);\n\n                    var resultObject = {\n                        name: file.name,\n                        type: file.type,\n                        data: result,\n                        size: size\n                    };\n\n                    this._options.onfileloadEnd(index, resultObject, this._round(currentTotalSize));\n                };\n\n                if ((size <= this._options.fileMaxSize) && ((currentTotalSize + size) <= this._options.totalMaxSize)) {\n                    reader.readAsDataURL(file);\n\n                    // update total size\n                    currentTotalSize = currentTotalSize + size;\n\n                    var currentAvailableSize = this._options.totalMaxSize - currentTotalSize;\n\n                    availableLabel.children('span').html(this._round(currentAvailableSize));\n                }\n                else {\n                    var errorMsg = currentLangObj.totalMaxSizeExceeded_msg;\n\n                    if (size > this._options.fileMaxSize) {\n                        errorMsg = currentLangObj.maxSizeExceeded_msg;\n                        this._logger('FILE REJECTED: Max size exceeded - max size: ' + this._options.fileMaxSize + ' MB - file size: ' + size + ' MB');\n                    }\n                    else {\n                        this._logger('FILE REJECTED: Max total size exceeded - max size: ' + this._options.totalMaxSizeExceeded_msg + ' MB - current total size: ' + (currentTotalSize + size) + ' MB');\n                    }\n\n                    currentElement.addClass('error');\n                    currentElement.children('.loadBar').empty().append('<div class=\"errorMsg\">' + errorMsg + '</div>');\n\n                    setTimeout(() => {\n                        currentElement.animate({opacity: 0}, 300, function() {\n                            if (instance._options.useFileIcons) {\n                                $(this).prev('img').remove();\n                            }\n                            $(this).remove();\n                        });\n                    }, 2000);\n\n                    var totalRejected = parseInt($('#debugRejected').html()) + 1;\n                    $('#debugRejected').html(totalRejected);\n                }\n            }\n\n            let startIndex = $('#innerFileThumbs').children().last().attr('id');\n\n            if (startIndex !== undefined) {\n                startIndex = parseInt(startIndex.substring(startIndex.indexOf('-') + 1, startIndex.length)) + 1;\n            }\n            else {\n                startIndex = 0;\n            }\n\n            function appendMessage($message) {\n                setTimeout(() => {\n                    $message.animate({opacity: 0}, 300, function() {\n                        $(this).remove();\n                    });\n                }, 2000);\n            }\n\n            // create a new div containing thumb, delete button and title field for each target file\n            for (i = 0; i < filesList.length; i++) {\n                let file = filesList[i];\n                let reader = new FileReader();\n\n                // test for duplicates\n                if (approvedList && approvedList.indexOf(file.name) < 0) {\n                    if (this._options.duplicatesWarning) {\n                        let $info = $('<div class=\"errorLabel center\"></div>');\n\n                        $info.html(currentLangObj.duplicated_msg);\n                        $fileThumbsContainer.append($info);\n                        appendMessage($info);\n                    }\n\n                    this._logger('File duplicated: ' + file.name + ' -> skipping...', 2);\n                    continue;\n                }\n\n                let fileName, fileExt;\n\n                if (file.name.lastIndexOf('.') > 0) {\n                    fileName = file.name.substring(0, file.name.lastIndexOf('.'));\n                    fileExt = file.name.substring(file.name.lastIndexOf('.') + 1, file.name.length);\n                }\n                else {\n                    fileName = file.name;\n                    fileExt = this._options.defaultFileExt;\n                }\n\n                // test for filenames\n                let nameTest = this._options.filenameTest(fileName, fileExt, $fileThumbsContainer);\n                if (nameTest === false) {\n                    this._logger('Invalid file name: ' + file.name, 2);\n                    continue;\n                }\n                else {\n                    if (nameTest !== undefined && nameTest !== true) {\n                        fileName = nameTest;\n                    }\n                }\n\n                this._createUploaderContainer(globalIndex, fileName, fileExt);\n\n                // now read!\n                readFile(reader, file, globalIndex, DOM);\n                globalIndex++;\n            }\n        };\n\n        /*\n        *  -------------------------------------------------------------\n        *  |                       MAIN FLOW                           |\n        *  -------------------------------------------------------------\n        */\n        // initialization\n        if (this._options.name) {\n            this._logger('INITIALIZED INSTANCE: ' + this._options.name);\n        }\n        // build HTML template\n        let template = this._options.HTMLTemplate();\n\n        $el.insertAdjacentHTML('beforeend', template);\n\n        let globalIndex = 0;\n        let $resultContainer = $el.querySelector('.' + this._options.resultContainerClass);\n        let $loadBtn = $el.querySelector('.fileLoader');\n        let $fileContainer = $el.querySelector('.filesContainer');\n        let $fileNameContainer = $el.querySelector('.fileNameContainer');\n        let $fileThumbsContainer = $el.querySelector('.innerFileThumbs');\n        let dropZone = $el.querySelector('.dropZone');\n        let currentLangObj = this._options.langs[this._options.lang];\n\n        // place reloaded files' HTML in result container directly (if provided)\n        if (this._options.reloadHTML) {\n            $resultContainer.innerHTML = this._options.reloadHTML;\n        }\n\n\n        $el.querySelector('.introMsg').innerHTML = currentLangObj.intro_msg;\n        dropZone.innerHTML = currentLangObj.dropZone_msg;\n\n        if (!this._options.debug) {\n            $resultContainer.classList.add('hide');\n        }\n        else {\n            $resultContainer.insertAdjacentHTML('beforebegin', '<p class=\"debugMode\">Debug mode: on</p>');\n            $resultContainer.insertAdjacentHTML('beforebegin', '<div class=\"debug\">Uploaded files: <span id=\"debugUploaded\">0</span> | Rejected files: <span id=\"debugRejected\">0</span></div>');\n            $resultContainer.insertAdjacentHTML('beforebegin', '<div class=\"debug\">Current MAX FILE SIZE: ' + this._options.fileMaxSize + ' MB</div>');\n            $resultContainer.insertAdjacentHTML('beforebegin', '<div class=\"debug\">Current MAX TOTAL SIZE: ' + this._options.totalMaxSize + ' MB</div>');\n            $resultContainer.insertAdjacentHTML('beforebegin', '<div class=\"debug sizeAvailable\">Size still available: <span>' + this._options.totalMaxSize + '</span> MB</div>');\n        }\n\n        // --- FILES RELOAD SECTION ---\n        // lookup for previously loaded files placed in the result container directly\n        let availableLabel = $el.querySelector('.sizeAvailable');\n        let currentTotalSize = 0;\n        let loadedFile;\n\n        for (const [index, element] of $resultContainer.querySelectorAll(`:scope > .${this._options.resultFileContainerClass}`).entries()) {\n            this._logger(`found previously uploaded file: index = ${element.dataset.index}`, 2);\n\n            // pay attention to index used on fileData here: index 0 is the title DIV!\n            let fileData = element.querySelectorAll(':scope > input');\n            let fileName = fileData[0].value;\n            let fileExt = fileData[1].value;\n            let fileSize = fileData[3].value;\n\n            if (fileName.lastIndexOf('.') > 0) {\n                fileName = fileName.substr(0, fileName.lastIndexOf('.'));\n            }\n\n            loadedFile = this._createUploaderContainer(globalIndex, fileName, fileExt);\n            loadedFile.querySelector(':scope > .loadBar > div').style.width = '100%';\n            loadedFile.classList.add(this._options.reloadedFilesClass);\n\n            currentTotalSize = currentTotalSize + parseFloat(fileSize);\n            globalIndex++;\n        }\n\n        // reload files from provided array\n        if (this._options.reloadArray.length > 0) {\n            this._options.reloadArray.forEach((file, index) => {\n                // re-create visible elements\n                loadedFile = this._createUploaderContainer(index, file.name, file.ext);\n                loadedFile.querySelector(':scope > .loadBar > div').style.width = '100%';\n                loadedFile.classList.add(this._options.reloadedFilesClass);\n\n                this._logger('found previously uploaded file: index = ' + index, 2);\n\n                // re-create results\n                let newFile = {\n                    index: index,\n                    name: file.name,\n                    type: file.ext,\n                    result: file.data,\n                    size: file.size\n                };\n\n                this._createResultContainer(newFile);\n\n                currentTotalSize = currentTotalSize + parseFloat(file.size);\n                globalIndex++;\n            });\n        }\n\n        currentTotalSize = this._round(currentTotalSize);\n\n        this._logger('current total size: ' + currentTotalSize);\n        availableLabel.querySelector(':scope > span').innerHTML = (this._options.totalMaxSize - currentTotalSize);\n        // --- END FILES RELOAD SECTION ---\n\n        // onload callback\n        this._options.onload(this._options, currentTotalSize);\n\n        // Drag events\n        this.handleDragOver = (event) => {\n            dropZone.classList.add('highlight');\n            event.stopPropagation();\n            event.preventDefault();\n            event.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.\n        }\n        this.handleDrop = (event) => {\n            dropZone.classList.remove('highlight');\n            event.stopPropagation();\n            event.preventDefault();\n            event.data = {\n                DOM: $el\n            };\n            this._filesRead(event);\n        }\n\n        dropZone.addEventListener('dragleave', () => {\n            dropZone.classList.remove('highlight');\n        });\n        dropZone.addEventListener('dragover', this.handleDragOver, false);\n        dropZone.addEventListener('drop', (passedInElement) => {\n            return (event) => {\n                this.handleDrop(event, passedInElement);\n            };\n        }, false);\n\n        dropZone.addEventListener('click', (event) => {\n            $loadBtn.dispatchEvent(event);\n        });\n\n        $loadBtn.addEventListener('change', (event) => {\n            event.data = {\n                DOM: $el\n            };\n            this._filesRead(event);\n            this.value = null;\n        });\n\n        return {\n            fileUploader: instance,\n            elementDOM: $el\n        };\n    };\n\n    /*const fileUploader = function(methodOrOptions) {\n        console.log('constructor');\n        let method = (typeof methodOrOptions === 'string') ? methodOrOptions : undefined;\n\n        const getFileUploader = () => {\n            let $el          = $(this);\n            let fileUploader = $el.data('fileUploader');\n\n            fileUploaders.push(fileUploader);\n        }\n\n        const applyMethod = (index) => {\n            let fileUploader = fileUploaders[index];\n\n            if (!fileUploader) {\n                console.warn('$.fileUploader not instantiated yet');\n                console.info(this);\n                results.push(undefined);\n                return;\n            }\n\n            if (typeof fileUploader[method] === 'function') {\n                let result = fileUploader[method].apply(fileUploader, args);\n                results.push(result);\n            } else {\n                console.warn('Method \\'' + method + '\\' not defined in $.fileUploader');\n            }\n        }\n\n        const init = () => {\n            let $el          = $(this);\n            let fileUploader = new FileUploader($el, options);\n\n            $el.data('fileUploader', fileUploader);\n        }\n\n        if (method) {\n            let fileUploaders = [];\n\n            this.each(getFileUploader);\n\n            let args = (arguments.length > 1) ? Array.prototype.slice.call(arguments, 1) : undefined;\n            let results = [];\n\n            this.each(applyMethod);\n\n            return (results.length > 1) ? results : results[0];\n        }\n        else {\n            let options = (typeof methodOrOptions === 'object') ? methodOrOptions : undefined;\n\n            return this.each(init);\n        }\n    };*/\n})(window);\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.deepmerge = factory());\n}(this, (function () { 'use strict';\n\nvar isMergeableObject = function isMergeableObject(value) {\n\treturn isNonNullObject(value)\n\t\t&& !isSpecial(value)\n};\n\nfunction isNonNullObject(value) {\n\treturn !!value && typeof value === 'object'\n}\n\nfunction isSpecial(value) {\n\tvar stringValue = Object.prototype.toString.call(value);\n\n\treturn stringValue === '[object RegExp]'\n\t\t|| stringValue === '[object Date]'\n\t\t|| isReactElement(value)\n}\n\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\nfunction isReactElement(value) {\n\treturn value.$$typeof === REACT_ELEMENT_TYPE\n}\n\nfunction emptyTarget(val) {\n\treturn Array.isArray(val) ? [] : {}\n}\n\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n\treturn (options.clone !== false && options.isMergeableObject(value))\n\t\t? deepmerge(emptyTarget(value), value, options)\n\t\t: value\n}\n\nfunction defaultArrayMerge(target, source, options) {\n\treturn target.concat(source).map(function(element) {\n\t\treturn cloneUnlessOtherwiseSpecified(element, options)\n\t})\n}\n\nfunction getMergeFunction(key, options) {\n\tif (!options.customMerge) {\n\t\treturn deepmerge\n\t}\n\tvar customMerge = options.customMerge(key);\n\treturn typeof customMerge === 'function' ? customMerge : deepmerge\n}\n\nfunction mergeObject(target, source, options) {\n\tvar destination = {};\n\tif (options.isMergeableObject(target)) {\n\t\tObject.keys(target).forEach(function(key) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n\t\t});\n\t}\n\tObject.keys(source).forEach(function(key) {\n\t\tif (!options.isMergeableObject(source[key]) || !target[key]) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n\t\t} else {\n\t\t\tdestination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n\t\t}\n\t});\n\treturn destination\n}\n\nfunction deepmerge(target, source, options) {\n\toptions = options || {};\n\toptions.arrayMerge = options.arrayMerge || defaultArrayMerge;\n\toptions.isMergeableObject = options.isMergeableObject || isMergeableObject;\n\n\tvar sourceIsArray = Array.isArray(source);\n\tvar targetIsArray = Array.isArray(target);\n\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n\tif (!sourceAndTargetTypesMatch) {\n\t\treturn cloneUnlessOtherwiseSpecified(source, options)\n\t} else if (sourceIsArray) {\n\t\treturn options.arrayMerge(target, source, options)\n\t} else {\n\t\treturn mergeObject(target, source, options)\n\t}\n}\n\ndeepmerge.all = function deepmergeAll(array, options) {\n\tif (!Array.isArray(array)) {\n\t\tthrow new Error('first argument should be an array')\n\t}\n\n\treturn array.reduce(function(prev, next) {\n\t\treturn deepmerge(prev, next, options)\n\t}, {})\n};\n\nvar deepmerge_1 = deepmerge;\n\nreturn deepmerge_1;\n\n})));\n"]}